=== SCENESCOUT VITE-APP COMPLETE CODEBASE ===
=== Generated on: 2025-09-13 ===

=== DIRECTORY STRUCTURE ===
.
├── .env.example
├── API_INTEGRATION_REQUIREMENTS.md
├── CODEBASE_SUMMARY.md
├── db
│   ├── INDEXES.sql
│   ├── METRICS.sql
│   ├── PLANS.sql
│   ├── PROFILES.sql
│   ├── PURGE_SEED.sql
│   ├── PUSH.sql
│   ├── RLS.sql
│   ├── RPC.sql
│   ├── RPC_COUNTS.sql
│   ├── RPC_SALES_TS.sql
│   ├── SCHEMA.sql
│   ├── SEED.sql
│   ├── STRIPE_EXTRAS.sql
│   └── SUBMISSIONS.sql
├── index.html
├── package-lock.json
├── package.json
├── postcss.config.js
├── public
│   └── mockServiceWorker.js
├── src
│   ├── App.tsx
│   ├── components
│   │   ├── events
│   │   │   ├── CategoryRow.tsx
│   │   │   ├── EventCard.tsx
│   │   │   └── FeaturedBanner.tsx
│   │   ├── layout
│   │   │   ├── Header.tsx
│   │   │   ├── Layout.tsx
│   │   │   └── Sidebar.tsx
│   │   └── ui
│   │       ├── button.tsx
│   │       ├── card.tsx
│   │       ├── loading-spinner.tsx
│   │       ├── toast.tsx
│   │       └── toaster.tsx
│   ├── hooks
│   │   ├── useEvents.ts
│   │   └── useToast.ts
│   ├── lib
│   │   ├── supabase.ts
│   │   └── utils.ts
│   ├── main.tsx
│   ├── pages
│   │   ├── DiscoverPage.tsx
│   │   ├── EventDetailsPage.tsx
│   │   ├── HomePage.tsx
│   │   ├── MapPage.tsx
│   │   ├── PlanPage.tsx
│   │   ├── ProfilePage.tsx
│   │   └── SavedPage.tsx
│   ├── services
│   │   ├── events.service.ts
│   │   ├── plans.service.ts
│   │   └── user-events.service.ts
│   ├── styles
│   │   └── globals.css
│   └── types
│       └── database.types.ts
├── supabase
│   ├── config.toml
│   └── functions
│       ├── README.md
│       ├── _shared
│       │   └── types.ts
│       ├── daily_digest
│       │   └── index.ts
│       ├── enrich_images
│       │   └── index.ts
│       ├── hotness_ml
│       │   └── index.ts
│       ├── ics
│       │   └── index.ts
│       ├── img-proxy
│       │   └── index.ts
│       ├── ingest_eventbrite
│       │   └── index.ts
│       ├── ingest_meetup
│       │   └── index.ts
│       ├── ingest_places_google
│       │   └── index.ts
│       ├── ingest_places_yelp
│       │   └── index.ts
│       ├── ingest_songkick
│       │   └── index.ts
│       ├── ingest_ticketmaster
│       │   └── index.ts
│       ├── og-event
│       │   └── index.ts
│       ├── push-send
│       │   └── index.ts
│       ├── push-subscribe
│       │   └── index.ts
│       └── reminders
│           └── index.ts
├── tailwind.config.js
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

=== FILE: ./.env.example ===
     1	# Supabase Configuration
     2	VITE_SUPABASE_URL=your_supabase_project_url
     3	VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
     4	
     5	# Optional: External API Keys
     6	VITE_GOOGLE_MAPS_API_KEY=your_google_maps_key
     7	VITE_MAPBOX_TOKEN=your_mapbox_token
     8	
     9	# Optional: Analytics
    10	VITE_GA_MEASUREMENT_ID=your_ga_id
=== FILE: ./package.json ===
     1	{
     2	  "name": "scenescout-vite",
     3	  "private": true,
     4	  "version": "0.1.0",
     5	  "type": "module",
     6	  "scripts": {
     7	    "dev": "vite",
     8	    "build": "tsc && vite build",
     9	    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    10	    "preview": "vite preview",
    11	    "test": "vitest",
    12	    "test:ui": "vitest --ui",
    13	    "test:e2e": "playwright test",
    14	    "test:coverage": "vitest run --coverage",
    15	    "test:ci": "vitest run && playwright test",
    16	    "typecheck": "tsc --noEmit",
    17	    "supabase:start": "supabase start",
    18	    "supabase:stop": "supabase stop",
    19	    "supabase:functions": "supabase functions serve",
    20	    "db:reset": "supabase db reset",
    21	    "db:push": "supabase db push",
    22	    "edge:deploy": "supabase functions deploy --no-verify-jwt"
    23	  },
    24	  "dependencies": {
    25	    "@radix-ui/react-avatar": "^1.1.10",
    26	    "@radix-ui/react-checkbox": "^1.3.3",
    27	    "@radix-ui/react-dialog": "^1.1.1",
    28	    "@radix-ui/react-dropdown-menu": "^2.1.1",
    29	    "@radix-ui/react-label": "^2.1.7",
    30	    "@radix-ui/react-popover": "^1.1.15",
    31	    "@radix-ui/react-select": "^2.2.6",
    32	    "@radix-ui/react-separator": "^1.1.7",
    33	    "@radix-ui/react-slot": "^1.2.3",
    34	    "@radix-ui/react-switch": "^1.2.6",
    35	    "@radix-ui/react-tabs": "^1.1.13",
    36	    "@radix-ui/react-toast": "^1.2.1",
    37	    "@supabase/supabase-js": "^2.45.0",
    38	    "@tanstack/react-query": "^5.51.11",
    39	    "@tanstack/react-query-devtools": "^5.87.4",
    40	    "@tanstack/react-virtual": "^3.13.12",
    41	    "class-variance-authority": "^0.7.1",
    42	    "clsx": "^2.1.1",
    43	    "date-fns": "^3.6.0",
    44	    "leaflet": "^1.9.4",
    45	    "lucide-react": "^0.426.0",
    46	    "react": "^18.3.1",
    47	    "react-day-picker": "^9.9.0",
    48	    "react-dom": "^18.3.1",
    49	    "react-hook-form": "^7.56.1",
    50	    "react-leaflet": "^4.2.1",
    51	    "react-leaflet-cluster": "^3.1.1",
    52	    "react-router-dom": "^7.2.0",
    53	    "tailwind-merge": "^2.4.0",
    54	    "tailwindcss-animate": "^1.0.7",
    55	    "zod": "^3.23.8"
    56	  },
    57	  "devDependencies": {
    58	    "@playwright/test": "^1.50.1",
    59	    "@testing-library/jest-dom": "^6.7.0",
    60	    "@testing-library/react": "^16.0.1",
    61	    "@testing-library/user-event": "^14.5.2",
    62	    "@types/leaflet": "^1.9.12",
    63	    "@types/node": "^22.2.0",
    64	    "@types/react": "^18.3.3",
    65	    "@types/react-dom": "^18.3.0",
    66	    "@typescript-eslint/eslint-plugin": "^7.18.0",
    67	    "@typescript-eslint/parser": "^7.18.0",
    68	    "@vitejs/plugin-react": "^4.3.1",
    69	    "@vitest/coverage-v8": "^2.0.5",
    70	    "@vitest/ui": "^2.0.5",
    71	    "autoprefixer": "^10.4.19",
    72	    "eslint": "^8.57.0",
    73	    "eslint-plugin-react-hooks": "^4.6.0",
    74	    "eslint-plugin-react-refresh": "^0.4.7",
    75	    "happy-dom": "^16.6.0",
    76	    "msw": "^2.8.1",
    77	    "postcss": "^8.4.40",
    78	    "tailwindcss": "^3.4.7",
    79	    "typescript": "^5.5.4",
    80	    "vite": "^5.4.1",
    81	    "vitest": "^2.0.5"
    82	  },
    83	  "msw": {
    84	    "workerDirectory": "public"
    85	  }
    86	}

=== FILE: ./tsconfig.json ===
     1	{
     2	  "compilerOptions": {
     3	    "target": "ES2020",
     4	    "useDefineForClassFields": true,
     5	    "lib": ["ES2020", "DOM", "DOM.Iterable"],
     6	    "module": "ESNext",
     7	    "skipLibCheck": true,
     8	
     9	    /* Bundler mode */
    10	    "moduleResolution": "bundler",
    11	    "allowImportingTsExtensions": true,
    12	    "resolveJsonModule": true,
    13	    "isolatedModules": true,
    14	    "noEmit": true,
    15	    "jsx": "react-jsx",
    16	
    17	    /* Linting */
    18	    "strict": true,
    19	    "noUnusedLocals": true,
    20	    "noUnusedParameters": true,
    21	    "noFallthroughCasesInSwitch": true,
    22	
    23	    /* Paths */
    24	    "baseUrl": ".",
    25	    "paths": {
    26	      "@/*": ["src/*"]
    27	    }
    28	  },
    29	  "include": ["src"],
    30	  "references": [{ "path": "./tsconfig.node.json" }]
    31	}
=== FILE: ./tsconfig.node.json ===
     1	{
     2	  "compilerOptions": {
     3	    "composite": true,
     4	    "skipLibCheck": true,
     5	    "module": "ESNext",
     6	    "moduleResolution": "bundler",
     7	    "allowSyntheticDefaultImports": true,
     8	    "strict": true
     9	  },
    10	  "include": ["vite.config.ts"]
    11	}
=== FILE: ./vite.config.ts ===
     1	import { defineConfig } from 'vite'
     2	import react from '@vitejs/plugin-react'
     3	import path from 'path'
     4	
     5	// https://vitejs.dev/config/
     6	export default defineConfig({
     7	  plugins: [react()],
     8	  resolve: {
     9	    alias: {
    10	      '@': path.resolve(__dirname, './src'),
    11	    },
    12	  },
    13	  server: {
    14	    port: 5173,
    15	    proxy: {
    16	      '/api': {
    17	        target: 'http://localhost:54321',
    18	        changeOrigin: true,
    19	        rewrite: (path) => path.replace(/^\/api/, '')
    20	      }
    21	    }
    22	  },
    23	  test: {
    24	    globals: true,
    25	    environment: 'happy-dom',
    26	    setupFiles: './src/test/setup.ts',
    27	    coverage: {
    28	      reporter: ['text', 'json', 'html'],
    29	      exclude: [
    30	        'node_modules/',
    31	        'src/test/',
    32	      ]
    33	    }
    34	  }
    35	})
=== FILE: ./postcss.config.js ===
     1	export default {
     2	  plugins: {
     3	    tailwindcss: {},
     4	    autoprefixer: {},
     5	  },
     6	}
=== FILE: ./tailwind.config.js ===
     1	/** @type {import('tailwindcss').Config} */
     2	export default {
     3	  darkMode: ["class"],
     4	  content: [
     5	    './pages/**/*.{ts,tsx}',
     6	    './components/**/*.{ts,tsx}',
     7	    './app/**/*.{ts,tsx}',
     8	    './src/**/*.{ts,tsx}',
     9	  ],
    10	  theme: {
    11	    container: {
    12	      center: true,
    13	      padding: "2rem",
    14	      screens: {
    15	        "2xl": "1400px",
    16	      },
    17	    },
    18	    extend: {
    19	      colors: {
    20	        border: "hsl(var(--border))",
    21	        input: "hsl(var(--input))",
    22	        ring: "hsl(var(--ring))",
    23	        background: "hsl(var(--background))",
    24	        foreground: "hsl(var(--foreground))",
    25	        primary: {
    26	          DEFAULT: "hsl(var(--primary))",
    27	          foreground: "hsl(var(--primary-foreground))",
    28	        },
    29	        secondary: {
    30	          DEFAULT: "hsl(var(--secondary))",
    31	          foreground: "hsl(var(--secondary-foreground))",
    32	        },
    33	        destructive: {
    34	          DEFAULT: "hsl(var(--destructive))",
    35	          foreground: "hsl(var(--destructive-foreground))",
    36	        },
    37	        muted: {
    38	          DEFAULT: "hsl(var(--muted))",
    39	          foreground: "hsl(var(--muted-foreground))",
    40	        },
    41	        accent: {
    42	          DEFAULT: "hsl(var(--accent))",
    43	          foreground: "hsl(var(--accent-foreground))",
    44	        },
    45	        popover: {
    46	          DEFAULT: "hsl(var(--popover))",
    47	          foreground: "hsl(var(--popover-foreground))",
    48	        },
    49	        card: {
    50	          DEFAULT: "hsl(var(--card))",
    51	          foreground: "hsl(var(--card-foreground))",
    52	        },
    53	      },
    54	      borderRadius: {
    55	        lg: "var(--radius)",
    56	        md: "calc(var(--radius) - 2px)",
    57	        sm: "calc(var(--radius) - 4px)",
    58	      },
    59	      keyframes: {
    60	        "accordion-down": {
    61	          from: { height: 0 },
    62	          to: { height: "var(--radix-accordion-content-height)" },
    63	        },
    64	        "accordion-up": {
    65	          from: { height: "var(--radix-accordion-content-height)" },
    66	          to: { height: 0 },
    67	        },
    68	      },
    69	      animation: {
    70	        "accordion-down": "accordion-down 0.2s ease-out",
    71	        "accordion-up": "accordion-up 0.2s ease-out",
    72	      },
    73	    },
    74	  },
    75	  plugins: [require("tailwindcss-animate")],
    76	}
=== FILE: ./index.html ===
     1	<!doctype html>
     2	<html lang="en" class="dark">
     3	  <head>
     4	    <meta charset="UTF-8" />
     5	    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
     6	    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     7	    <meta name="description" content="SceneScout - Discover the best events, venues, and cultural experiences in cities worldwide" />
     8	    <title>SceneScout - Discover Urban Culture & Events</title>
     9	  </head>
    10	  <body>
    11	    <div id="root"></div>
    12	    <script type="module" src="/src/main.tsx"></script>
    13	  </body>
    14	</html>
=== FILE: ./API_INTEGRATION_REQUIREMENTS.md ===
     1	# SceneScout API Integration Requirements
     2	
     3	This document outlines every API endpoint, webhook, and external service integration that needs real-world data to make SceneScout fully functional.
     4	
     5	## 1. 🗄️ **Supabase Database Integration**
     6	
     7	**File Location**: `/src/lib/supabase.ts` (lines 1-21)  
     8	**Current Status**: ✅ Configured with environment variables  
     9	**Required Environment Variables**: 
    10	- `VITE_SUPABASE_URL` - Supabase project URL
    11	- `VITE_SUPABASE_ANON_KEY` - Supabase anonymous key  
    12	**Real-World Service**: Supabase (Backend-as-a-Service)  
    13	**Authentication**: API key-based authentication
    14	**Priority**: 🔴 **CRITICAL** - Core database functionality
    15	
    16	---
    17	
    18	## 2. 📊 **Events Service API Calls**
    19	
    20	**File Location**: `/src/services/events.service.ts`
    21	
    22	### **Supabase RPC Functions** (Need Database Implementation):
    23	- **`get_featured_events`** (line 83) - Gets featured events with limit
    24	- **`get_events_by_city`** (line 92) - Gets events filtered by city slug  
    25	- **`get_nearby_events`** (line 101) - Gets events within radius of lat/lng coordinates
    26	- **`search_events`** (line 126) - Full-text search across events
    27	- **`increment_event_views`** (line 135) - Increments view count for event analytics
    28	
    29	**Priority**: 🔴 **CRITICAL** - Core event functionality
    30	
    31	### **Direct Database Queries** (Need Real Data):
    32	- **`getEvents()`** (lines 25-77) - Main events query with filtering
    33	- **`getEvent()`** (lines 109-121) - Single event with venue/city details
    34	- **Required Tables**: `events`, `venues`, `cities` with proper relationships
    35	
    36	**Priority**: 🔴 **CRITICAL** - Main application functionality
    37	
    38	---
    39	
    40	## 3. 📋 **Plans Service API Calls**
    41	
    42	**File Location**: `/src/services/plans.service.ts`
    43	
    44	### **Supabase RPC Function** (Need Database Implementation):
    45	- **`get_plan_details`** (line 57) - Gets detailed plan with events
    46	
    47	### **Direct Database Operations** (Need Real Data):
    48	- **`getUserPlans()`** (lines 29-45) - User's personal plans with events
    49	- **`createPlan()`** (lines 64-89) - Create new event plan
    50	- **`updatePlan()`** (lines 91-112) - Update existing plan
    51	- **`deletePlan()`** (lines 114-125) - Delete plan
    52	- **`addEventToPlan()` / `removeEventFromPlan()`** (lines 127-156) - Manage plan contents
    53	- **`getPublicPlans()`** (lines 180-197) - Browse public community plans
    54	
    55	**Priority**: 🟡 **HIGH** - User itinerary management
    56	
    57	---
    58	
    59	## 4. 💖 **User Events Service API Calls**
    60	
    61	**File Location**: `/src/services/user-events.service.ts`
    62	
    63	### **Supabase RPC Function** (Need Database Implementation):
    64	- **`get_user_saved_events`** (line 11) - User's saved events with details
    65	
    66	### **Direct Database Operations** (Need Real Data):
    67	- **`saveEvent()` / `unsaveEvent()`** (lines 18-44) - Bookmark events
    68	- **`isEventSaved()`** (lines 46-54) - Check bookmark status  
    69	- **`markAttended()`** (lines 69-88) - Mark event as attended with rating/notes
    70	- **`getUserEventHistory()`** (lines 90-104) - User's event interaction history
    71	
    72	**Priority**: 🟡 **HIGH** - User personalization features
    73	
    74	---
    75	
    76	## 5. 🌐 **External Event Data Ingestion APIs**
    77	
    78	**File Location**: `/supabase/functions/`
    79	
    80	### **🎫 Eventbrite API Integration** (`/ingest_eventbrite/index.ts`):
    81	- **Endpoint**: `https://www.eventbriteapi.com/v3/events/search/`
    82	- **Authentication**: Bearer token (`EVENTBRITE_TOKEN` env var)
    83	- **Data Fields**: Events, venues, organizers, ticket classes, pricing
    84	- **Parameters**: location, date range, categories, search query
    85	- **Rate Limits**: 1000 requests/hour (free), higher for paid plans
    86	- **Priority**: 🔴 **CRITICAL** - Primary event source
    87	
    88	### **🎭 Ticketmaster API Integration** (`/ingest_ticketmaster/index.ts`):
    89	- **Endpoint**: `https://app.ticketmaster.com/discovery/v2/events.json`
    90	- **Authentication**: API key (`TICKETMASTER_API_KEY` env var)  
    91	- **Data Fields**: Events, venues, attractions, classifications, pricing
    92	- **Parameters**: city, state, date range, keywords, size limit
    93	- **Rate Limits**: 5000 requests/day (free)
    94	- **Priority**: 🔴 **CRITICAL** - Major event source
    95	
    96	### **👥 Meetup API Integration** (`/ingest_meetup/index.ts`):
    97	- **Endpoint**: Meetup Events API
    98	- **Authentication**: Meetup API credentials required
    99	- **Data Fields**: Events, venues, groups, categories
   100	- **Priority**: 🟡 **HIGH** - Social events source
   101	
   102	### **🎵 Songkick API Integration** (`/ingest_songkick/index.ts`):
   103	- **Purpose**: Music events and concert data
   104	- **Authentication**: Songkick API key required
   105	- **Priority**: 🟡 **HIGH** - Music events specialization
   106	
   107	### **📍 Google Places API Integration** (`/ingest_places_google/index.ts`):
   108	- **Endpoint**: Google Places API for venue data enrichment
   109	- **Authentication**: Google Maps API key (`VITE_GOOGLE_MAPS_API_KEY`)
   110	- **Data Fields**: Place details, ratings, photos, business hours
   111	- **Usage**: Venue information enhancement
   112	- **Priority**: 🟡 **HIGH** - Venue data enrichment
   113	
   114	### **🍕 Yelp Places API Integration** (`/ingest_places_yelp/index.ts`):
   115	- **Purpose**: Restaurant and business venue data
   116	- **Authentication**: Yelp Business API key required
   117	- **Priority**: 🟢 **MEDIUM** - Additional venue data
   118	
   119	---
   120	
   121	## 6. 🗺️ **Map Services Integration**
   122	
   123	**File Location**: `/src/pages/MapPage.tsx` (lines 87-89)
   124	
   125	### **OpenStreetMap Tiles** (Currently Used):
   126	- **Endpoint**: `https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png`
   127	- **Cost**: Free
   128	- **Attribution**: Required
   129	- **Priority**: ✅ **IMPLEMENTED**
   130	
   131	### **Alternative Map Services** (Available but not active):
   132	- **Google Maps**: `VITE_GOOGLE_MAPS_API_KEY` configured in `.env.example`
   133	  - **Cost**: $7 per 1000 map loads after free tier
   134	  - **Priority**: 🟢 **OPTIONAL** - Better user experience
   135	  
   136	- **Mapbox**: `VITE_MAPBOX_TOKEN` configured in `.env.example` 
   137	  - **Cost**: Free up to 50,000 map loads/month
   138	  - **Priority**: 🟢 **OPTIONAL** - Premium maps
   139	
   140	---
   141	
   142	## 7. 🛠️ **Utility Edge Functions**
   143	
   144	### **Image Proxy Service** (`/img-proxy/index.ts`):
   145	- **Purpose**: Proxy external images to avoid CORS issues
   146	- **Implementation**: Fetches and returns external images with caching
   147	- **Priority**: 🟡 **HIGH** - Image display functionality
   148	
   149	### **ICS Calendar Export** (`/ics/index.ts`):
   150	- **Purpose**: Generate iCalendar files for event export
   151	- **Implementation**: Creates ICS format calendar entries
   152	- **Priority**: 🟢 **MEDIUM** - User convenience feature
   153	
   154	### **Push Notifications** (`/push-send/index.ts`, `/push-subscribe/index.ts`):
   155	- **Current Status**: ❌ Placeholder implementation
   156	- **Real-World Need**: Web Push API integration
   157	- **Priority**: 🟢 **LOW** - Nice-to-have feature
   158	
   159	---
   160	
   161	## 8. 📈 **Analytics and Tracking**
   162	
   163	**File Location**: `.env.example` (line 10)
   164	- **Google Analytics**: `VITE_GA_MEASUREMENT_ID` for user behavior tracking
   165	- **Implementation Status**: Environment variable configured, needs integration
   166	- **Priority**: 🟢 **MEDIUM** - Business intelligence
   167	
   168	---
   169	
   170	## 9. 🤖 **Machine Learning Integration**
   171	
   172	### **Event Hotness Scoring** (`/supabase/functions/hotness_ml/index.ts`):
   173	- **Purpose**: Event popularity scoring algorithm
   174	- **Implementation**: ML-based hotness calculation for event ranking
   175	- **Priority**: 🟢 **MEDIUM** - Recommendation engine
   176	
   177	### **Daily Digest Service** (`/daily_digest/index.ts`):
   178	- **Purpose**: Automated email/notification system for event recommendations
   179	- **Priority**: 🟢 **LOW** - User engagement
   180	
   181	### **Reminder Service** (`/reminders/index.ts`):
   182	- **Purpose**: Send event reminders to users
   183	- **Priority**: 🟢 **LOW** - User retention
   184	
   185	---
   186	
   187	## 10. 🎨 **Content Enhancement Services**
   188	
   189	### **Image Enrichment** (`/enrich_images/index.ts`):
   190	- **Purpose**: Enhance event images using AI/ML services
   191	- **Priority**: 🟢 **LOW** - Visual improvement
   192	
   193	### **OG Event Cards** (`/og-event/index.ts`):
   194	- **Purpose**: Generate Open Graph social sharing cards
   195	- **Priority**: 🟢 **MEDIUM** - Social media sharing
   196	
   197	---
   198	
   199	## 🔐 **Authentication Requirements by Service**
   200	
   201	| Service | Authentication Type | Required Credentials |
   202	|---------|-------------------|---------------------|
   203	| Supabase | Service/Anon Keys | `VITE_SUPABASE_URL`, `VITE_SUPABASE_ANON_KEY` |
   204	| Eventbrite | Bearer Token | `EVENTBRITE_TOKEN` |
   205	| Ticketmaster | API Key | `TICKETMASTER_API_KEY` |
   206	| Meetup | API Key + OAuth | Meetup API credentials |
   207	| Songkick | API Key | `SONGKICK_API_KEY` |
   208	| Google Places | API Key | `VITE_GOOGLE_MAPS_API_KEY` |
   209	| Yelp | API Key | `YELP_API_KEY` |
   210	| Google Analytics | Measurement ID | `VITE_GA_MEASUREMENT_ID` |
   211	
   212	---
   213	
   214	## 📋 **Required Database Schema**
   215	
   216	### **Core Tables Needed**:
   217	- **`events`** - Core event data (39 fields: title, description, dates, pricing, etc.)
   218	- **`venues`** - Venue information with location data, amenities, capacity
   219	- **`cities`** - Geographic organization with timezone support  
   220	- **`profiles`** - User account and subscription management
   221	- **`plans`** - User-created event itineraries
   222	- **`user_events`** - User interactions (saved, attended, ratings)
   223	- **`submissions`** - Content moderation workflow
   224	
   225	### **Required RPC Functions**:
   226	1. `get_featured_events(limit_count integer)`
   227	2. `get_events_by_city(city_slug text)`
   228	3. `get_nearby_events(lat numeric, lng numeric, radius_km integer)`
   229	4. `search_events(query text)`
   230	5. `increment_event_views(event_id text)`
   231	6. `get_plan_details(plan_id text)`
   232	7. `get_user_saved_events(user_id uuid)`
   233	
   234	---
   235	
   236	## 🚦 **Implementation Priority Matrix**
   237	
   238	### 🔴 **CRITICAL (Must Have for MVP)**:
   239	1. Supabase database with core tables and RPC functions
   240	2. Eventbrite API integration for event data
   241	3. Ticketmaster API integration for major events
   242	4. Basic event display and search functionality
   243	
   244	### 🟡 **HIGH (Important for Full Functionality)**:
   245	1. User authentication and saved events
   246	2. Plans/itinerary management
   247	3. Google Places API for venue data
   248	4. Map functionality with OpenStreetMap
   249	
   250	### 🟢 **MEDIUM/LOW (Nice to Have)**:
   251	1. Additional event sources (Meetup, Songkick)
   252	2. Analytics and tracking
   253	3. Push notifications
   254	4. ML-based recommendations
   255	5. Social sharing features
   256	
   257	---
   258	
   259	## 💰 **Estimated Costs (Monthly)**
   260	
   261	| Service | Free Tier | Paid Plans Start | Usage for 10K Users |
   262	|---------|-----------|------------------|-------------------|
   263	| Supabase | 500MB DB, 2GB bandwidth | $25/month | ~$25-100/month |
   264	| Eventbrite API | 1000 requests/hour | $49/month | ~$49/month |
   265	| Ticketmaster API | 5000/day | Contact sales | ~$0-200/month |
   266	| Google Maps API | $200 credit | Pay per use | ~$50-200/month |
   267	| Google Places API | $200 credit | Pay per use | ~$100-300/month |
   268	| **Total Estimated** | **~$0-50/month** | **~$424-849/month** | **For 10K users** |
   269	
   270	---
   271	
   272	## ⚡ **Next Steps for Implementation**
   273	
   274	1. **Set up Supabase project** with database schema
   275	2. **Obtain API keys** for Eventbrite and Ticketmaster
   276	3. **Create Supabase RPC functions** for core queries
   277	4. **Implement event data ingestion** from external APIs
   278	5. **Set up cron jobs** for regular data updates
   279	6. **Configure environment variables** for all services
   280	7. **Test API rate limits** and implement proper error handling
   281	8. **Add monitoring and logging** for all integrations
   282	
   283	This document provides a complete roadmap for transforming SceneScout from a demo into a production-ready event discovery platform.
=== FILE: ./CODEBASE_SUMMARY.md ===
     1	# SceneScout Codebase Summary
     2	
     3	**Project**: SceneScout - Event Discovery and Planning Platform  
     4	**Stack**: Vite + React + TypeScript + Supabase  
     5	**Status**: Feature-complete MVP ready for production deployment
     6	
     7	## 📁 Project Structure Overview
     8	
     9	```
    10	vite-app/
    11	├── public/                          # Static assets
    12	├── src/
    13	│   ├── components/                  # React components
    14	│   │   ├── events/                  # Event-specific components
    15	│   │   ├── layout/                  # Layout components (navigation, etc.)
    16	│   │   └── ui/                      # Reusable UI primitives
    17	│   ├── hooks/                       # Custom React hooks
    18	│   ├── lib/                         # Utility functions and configurations
    19	│   ├── pages/                       # Main application pages
    20	│   ├── services/                    # API service layer
    21	│   └── types/                       # TypeScript type definitions
    22	├── supabase/                        # Supabase configuration and functions
    23	│   ├── functions/                   # Edge Functions for data ingestion
    24	│   └── migrations/                  # Database migrations
    25	└── configuration files              # Vite, TypeScript, Tailwind configs
    26	```
    27	
    28	## 🛠 Tech Stack & Dependencies
    29	
    30	### **Core Framework**
    31	- **Vite** - Build tool and dev server
    32	- **React 18** - UI framework with hooks
    33	- **TypeScript** - Type safety and developer experience
    34	- **Tailwind CSS** - Utility-first styling
    35	
    36	### **Backend & Database**
    37	- **Supabase** - Backend-as-a-Service (PostgreSQL + PostGIS + Edge Functions)
    38	- **PostgreSQL** - Primary database with geospatial extensions
    39	- **Deno** - Runtime for Edge Functions
    40	
    41	### **State Management & Data Fetching**
    42	- **TanStack Query (React Query)** - Server state management, caching, infinite scrolling
    43	- **React Hook Form** - Form handling and validation
    44	
    45	### **UI Components & Styling**
    46	- **Radix UI** - Accessible, unstyled UI primitives
    47	- **Lucide React** - Icon library
    48	- **class-variance-authority** - Component variant management
    49	- **clsx + tailwind-merge** - Conditional class names
    50	
    51	### **Maps & Geospatial**
    52	- **Leaflet** - Open-source mapping library
    53	- **React Leaflet** - React integration for Leaflet maps
    54	
    55	### **Development Tools**
    56	- **ESLint + TypeScript ESLint** - Code linting
    57	- **PostCSS + Autoprefixer** - CSS processing
    58	- **@types packages** - TypeScript definitions
    59	
    60	---
    61	
    62	## 🗄️ Database Architecture
    63	
    64	### **Core Tables Structure**
    65	
    66	```sql
    67	-- User Management
    68	users (uuid, email, created_at)
    69	profiles (id, user_id, username, full_name, avatar_url, subscription_tier)
    70	
    71	-- Geographic Data
    72	cities (id, name, slug, state, country, timezone, latitude, longitude)
    73	venues (id, name, address, city_id, latitude, longitude, capacity, amenities)
    74	
    75	-- Events System
    76	events (39 columns including):
    77	  - Basic: id, title, description, category
    78	  - Timing: date, time, end_date, timezone
    79	  - Location: venue_id, city_id, coordinates
    80	  - Pricing: price_min, price_max, is_free, currency
    81	  - Media: image_url, images, video_url
    82	  - Metadata: tags, age_restrictions, accessibility
    83	  - Analytics: view_count, save_count, hotness_score
    84	
    85	-- User Interactions
    86	user_events (user_id, event_id, status, notes, rating, attended_at)
    87	plans (id, user_id, title, description, is_public, city_id)
    88	plan_events (plan_id, event_id, notes, order_index)
    89	
    90	-- Content Management
    91	submissions (id, type, status, content, submitted_by)
    92	```
    93	
    94	### **Key Database Features**
    95	- **PostGIS Extension** - Geospatial queries for proximity search
    96	- **Row Level Security (RLS)** - User data isolation
    97	- **Custom RPC Functions** - Complex queries and business logic
    98	- **Full-Text Search** - Event discovery across multiple fields
    99	- **Audit Trails** - Created/updated timestamps on all tables
   100	
   101	---
   102	
   103	## 🧩 Component Architecture
   104	
   105	### **Layout Components** (`src/components/layout/`)
   106	
   107	#### **`AppLayout.tsx`** - Main application wrapper
   108	```typescript
   109	export function AppLayout({ children }: { children: React.ReactNode }) {
   110	  return (
   111	    <div className="min-h-screen bg-black text-white">
   112	      <Navigation />
   113	      <main className="flex-1">
   114	        {children}
   115	      </main>
   116	    </div>
   117	  )
   118	}
   119	```
   120	
   121	#### **`Navigation.tsx`** - Main navigation with mobile responsive design
   122	- Logo and brand identity
   123	- Primary navigation links (Home, Map, Discover, Saved, Plan)
   124	- User profile dropdown
   125	- Mobile hamburger menu
   126	- Search functionality
   127	
   128	### **Event Components** (`src/components/events/`)
   129	
   130	#### **`EventCard.tsx`** - Core event display component
   131	**Features:**
   132	- Netflix-style hover effects with video preview
   133	- Save/unsave functionality with real-time updates
   134	- Multiple size variants (small, medium, large)
   135	- Category badges and price formatting
   136	- Click handler for detailed views
   137	
   138	```typescript
   139	interface EventCardProps {
   140	  event: Event
   141	  className?: string
   142	  size?: 'small' | 'medium' | 'large'
   143	  showActions?: boolean
   144	  onClick?: () => void
   145	}
   146	```
   147	
   148	#### **`FeaturedBanner.tsx`** - Hero banner for homepage
   149	**Features:**
   150	- Auto-rotating slideshow of featured events
   151	- Video background support with fallback to images
   152	- Manual navigation controls (previous/next/dots)
   153	- Call-to-action buttons (Watch Preview, Get Tickets)
   154	- Responsive design for mobile/desktop
   155	
   156	#### **`CategoryRow.tsx`** - Horizontal scrolling event categories
   157	**Features:**
   158	- Infinite scroll loading
   159	- Category-based event filtering
   160	- Smooth horizontal scrolling
   161	- Loading states and error handling
   162	
   163	### **UI Primitives** (`src/components/ui/`)
   164	
   165	Built on **Radix UI** with custom Tailwind styling:
   166	- `Button` - Multiple variants (default, ghost, outline, destructive)
   167	- `Input` - Form inputs with validation states
   168	- `Card` - Container component with consistent styling
   169	- `LoadingSpinner` - Consistent loading indicators
   170	- Additional components: Avatar, Badge, Calendar, Checkbox, etc.
   171	
   172	**Design System:**
   173	- **Color Scheme**: Dark theme with purple accents
   174	- **Typography**: Consistent font sizes and line heights
   175	- **Spacing**: 8px grid system (8, 16, 24, 32, 48)
   176	- **Border Radius**: Consistent rounded corners
   177	- **Animations**: Subtle transitions (200-300ms)
   178	
   179	---
   180	
   181	## 📄 Page Components Architecture
   182	
   183	### **`HomePage.tsx`** - Netflix-style discovery experience
   184	```typescript
   185	export function HomePage() {
   186	  const { data: featuredEvents, isLoading, error } = useFeaturedEvents(5)
   187	  
   188	  return (
   189	    <div className="min-h-screen bg-black">
   190	      <FeaturedBanner events={featuredEvents} />
   191	      <section className="px-8 py-8 space-y-8">
   192	        {categories.map((category) => (
   193	          <CategoryRow key={category.id} category={category.id} />
   194	        ))}
   195	      </section>
   196	    </div>
   197	  )
   198	}
   199	```
   200	
   201	### **`MapPage.tsx`** - MLS-style property search interface
   202	**Features:**
   203	- Three view modes: Split (map + list), Map-only, List-only
   204	- Interactive Leaflet map with event markers
   205	- Real-time search and filtering
   206	- Event selection with detailed modal
   207	- Responsive design adapts to screen size
   208	
   209	### **`DiscoverPage.tsx`** - Advanced event discovery
   210	**Features:**
   211	- Category filtering with emoji badges
   212	- Multiple sort options (relevance, date, popularity, distance)
   213	- Advanced filters panel (date range, price, distance)
   214	- Infinite scroll with TanStack Query
   215	- Search functionality across events
   216	
   217	### **`SavedPage.tsx`** - User's saved events management
   218	**Features:**
   219	- Grid and list view toggles
   220	- Bulk selection and actions (remove, share)
   221	- Advanced sorting options
   222	- Search within saved events
   223	- Empty states with compelling CTAs
   224	
   225	---
   226	
   227	## 🔄 Services Layer Architecture
   228	
   229	### **`events.service.ts`** - Core event data operations
   230	
   231	```typescript
   232	class EventsService {
   233	  // Main event retrieval with complex filtering
   234	  async getEvents(params: GetEventsParams): Promise<Event[]> {
   235	    let query = supabase
   236	      .from('events')
   237	      .select(EVENT_SELECT_FIELDS)
   238	    
   239	    // Apply filters: categories, city, date range, price, search
   240	    // Returns paginated results
   241	  }
   242	
   243	  // Supabase RPC functions for complex queries
   244	  async getFeaturedEvents(limit = 10): Promise<Event[]> {
   245	    return supabase.rpc('get_featured_events', { limit_count: limit })
   246	  }
   247	
   248	  async searchEvents(query: string, limit = 20): Promise<Event[]> {
   249	    return supabase.rpc('search_events', { query, limit_count: limit })
   250	  }
   251	
   252	  async getNearbyEvents(lat: number, lng: number, radius = 25): Promise<Event[]> {
   253	    return supabase.rpc('get_nearby_events', { lat, lng, radius_km: radius })
   254	  }
   255	}
   256	```
   257	
   258	### **`plans.service.ts`** - Event planning and itinerary management
   259	
   260	```typescript
   261	class PlansService {
   262	  async createPlan(plan: CreatePlanRequest): Promise<Plan>
   263	  async updatePlan(id: string, updates: UpdatePlanRequest): Promise<Plan>
   264	  async addEventToPlan(planId: string, eventId: string): Promise<void>
   265	  async getPublicPlans(cityId?: string): Promise<Plan[]>
   266	}
   267	```
   268	
   269	### **`user-events.service.ts`** - User personalization
   270	
   271	```typescript
   272	class UserEventsService {
   273	  async saveEvent(eventId: string): Promise<void>
   274	  async unsaveEvent(eventId: string): Promise<void>
   275	  async getSavedEvents(): Promise<Event[]>
   276	  async markAttended(eventId: string, rating?: number): Promise<void>
   277	}
   278	```
   279	
   280	---
   281	
   282	## 🪝 React Hooks Layer
   283	
   284	### **`useEvents.ts`** - Event data fetching and caching
   285	
   286	```typescript
   287	// Featured events with caching
   288	export function useFeaturedEvents(limit = 10) {
   289	  return useQuery({
   290	    queryKey: [...eventKeys.featured(), limit],
   291	    queryFn: () => eventsService.getFeaturedEvents(limit),
   292	    staleTime: 10 * 60 * 1000, // 10 minutes
   293	  })
   294	}
   295	
   296	// Infinite scroll for discovery
   297	export function useInfiniteEvents(params: GetEventsParams) {
   298	  return useInfiniteQuery({
   299	    queryKey: [...eventKeys.list(), params],
   300	    queryFn: ({ pageParam = 1 }) => 
   301	      eventsService.getEvents({ ...params, page: pageParam }),
   302	    getNextPageParam: (lastPage, pages) => 
   303	      lastPage.length === params.limit ? pages.length + 1 : undefined,
   304	  })
   305	}
   306	
   307	// Event mutations with optimistic updates
   308	export function useSaveEvent() {
   309	  const queryClient = useQueryClient()
   310	  
   311	  return useMutation({
   312	    mutationFn: userEventsService.saveEvent,
   313	    onMutate: async (eventId) => {
   314	      // Optimistic update logic
   315	    },
   316	    onError: (err, eventId, context) => {
   317	      // Rollback on error
   318	    }
   319	  })
   320	}
   321	```
   322	
   323	### **Query Key Management**
   324	Centralized query key factory for efficient cache invalidation:
   325	
   326	```typescript
   327	export const eventKeys = {
   328	  all: ['events'] as const,
   329	  lists: () => [...eventKeys.all, 'list'] as const,
   330	  list: (filters: string) => [...eventKeys.lists(), filters] as const,
   331	  details: () => [...eventKeys.all, 'detail'] as const,
   332	  detail: (id: string) => [...eventKeys.details(), id] as const,
   333	  featured: () => [...eventKeys.all, 'featured'] as const,
   334	}
   335	```
   336	
   337	---
   338	
   339	## ⚙️ Configuration Files
   340	
   341	### **`vite.config.ts`** - Build configuration
   342	```typescript
   343	export default defineConfig({
   344	  plugins: [react()],
   345	  resolve: {
   346	    alias: {
   347	      "@": path.resolve(__dirname, "./src"),
   348	    },
   349	  },
   350	})
   351	```
   352	
   353	### **`tailwind.config.js`** - Design system configuration
   354	```javascript
   355	module.exports = {
   356	  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
   357	  theme: {
   358	    extend: {
   359	      colors: {
   360	        // Custom color palette
   361	      },
   362	      fontFamily: {
   363	        // Typography system
   364	      },
   365	    },
   366	  },
   367	  plugins: [require("tailwindcss-animate")],
   368	}
   369	```
   370	
   371	### **`tsconfig.json`** - TypeScript configuration
   372	- Strict type checking enabled
   373	- Path aliases configured (@/ points to src/)
   374	- Modern ECMAScript target
   375	- React JSX support
   376	
   377	---
   378	
   379	## 🌐 External Integrations & Edge Functions
   380	
   381	### **Data Ingestion Functions** (`supabase/functions/`)
   382	
   383	#### **Eventbrite Integration** (`ingest_eventbrite/`)
   384	```typescript
   385	// Scheduled function to pull events from Eventbrite API
   386	const response = await fetch(
   387	  `https://www.eventbriteapi.com/v3/events/search/?location.address=${city}`,
   388	  {
   389	    headers: {
   390	      'Authorization': `Bearer ${EVENTBRITE_TOKEN}`,
   391	    },
   392	  }
   393	)
   394	```
   395	
   396	#### **Ticketmaster Integration** (`ingest_ticketmaster/`)
   397	```typescript
   398	// Major events and concerts from Ticketmaster
   399	const url = new URL('https://app.ticketmaster.com/discovery/v2/events.json')
   400	url.searchParams.set('apikey', TICKETMASTER_API_KEY)
   401	url.searchParams.set('city', city)
   402	```
   403	
   404	#### **Additional Integrations**:
   405	- **Meetup API** - Social events and group gatherings
   406	- **Songkick API** - Music events and concert discovery
   407	- **Google Places API** - Venue information enrichment
   408	- **Yelp API** - Restaurant and business venue data
   409	
   410	### **Utility Functions**
   411	- **Image Proxy** - CORS-friendly image serving
   412	- **ICS Export** - Calendar file generation
   413	- **Push Notifications** - Web push API integration
   414	- **OG Cards** - Social media sharing cards
   415	
   416	---
   417	
   418	## 🔐 Authentication & Security
   419	
   420	### **Supabase Auth Integration**
   421	```typescript
   422	// lib/supabase.ts
   423	export const supabase = createClient<Database>(
   424	  process.env.NEXT_PUBLIC_SUPABASE_URL!,
   425	  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
   426	  {
   427	    auth: {
   428	      persistSession: true,
   429	      autoRefreshToken: true,
   430	    },
   431	  }
   432	)
   433	```
   434	
   435	### **Row Level Security Policies**
   436	- User data isolation across all tables
   437	- Public read access for events and venues
   438	- Authenticated user requirements for personal data
   439	
   440	---
   441	
   442	## 🎨 Styling Approach
   443	
   444	### **Design System**
   445	- **Theme**: Dark mode with glassmorphism effects
   446	- **Primary Colors**: Purple gradient (#8B5CF6 to #A855F7)
   447	- **Typography**: Sans-serif with consistent scaling
   448	- **Components**: Netflix-inspired cards and layouts
   449	- **Animations**: Subtle hover effects and transitions
   450	
   451	### **Responsive Design**
   452	- Mobile-first approach with Tailwind breakpoints
   453	- Adaptive layouts for different screen sizes
   454	- Touch-friendly interface elements (44px minimum)
   455	
   456	---
   457	
   458	## 📊 Current Implementation Status
   459	
   460	### ✅ **Completed Features**
   461	
   462	1. **Frontend Architecture**
   463	   - Complete React component library
   464	   - Responsive design system
   465	   - Navigation and routing
   466	   - State management with React Query
   467	
   468	2. **Database Design**
   469	   - Comprehensive schema with 11 tables
   470	   - Geospatial capabilities with PostGIS
   471	   - Row Level Security implementation
   472	   - Custom RPC functions for complex queries
   473	
   474	3. **Core Functionality**
   475	   - Event discovery and search
   476	   - Map-based event browsing
   477	   - User event saving and planning
   478	   - Category-based filtering
   479	   - Real-time data synchronization
   480	
   481	4. **UI/UX Implementation**
   482	   - Netflix-style homepage with featured content
   483	   - MLS-style map interface with split views
   484	   - Advanced discovery page with filtering
   485	   - Comprehensive saved events management
   486	
   487	### 🚧 **Requires Implementation**
   488	
   489	1. **Authentication System**
   490	   - User registration/login flows
   491	   - Profile management pages
   492	   - Session handling and route protection
   493	
   494	2. **External API Integration**
   495	   - API keys and authentication setup
   496	   - Data ingestion scheduling
   497	   - Error handling and retry logic
   498	
   499	3. **Production Readiness**
   500	   - Environment configuration
   501	   - Security hardening
   502	   - Performance optimization
   503	   - Analytics integration
   504	
   505	### 🔗 **Missing Connections**
   506	
   507	1. **Real Data**: Currently using mock data structure, needs API connections
   508	2. **User Auth**: Authentication flow exists but needs UI components
   509	3. **Payment Integration**: Stripe setup configured but not implemented
   510	4. **Email System**: Resend configuration present but not used
   511	
   512	---
   513	
   514	## 🚀 Deployment Architecture
   515	
   516	### **Frontend Deployment**
   517	- **Platform**: Vercel (optimized for Next.js/Vite)
   518	- **Domain**: Custom domain with SSL
   519	- **CDN**: Global edge network for performance
   520	
   521	### **Backend Services**
   522	- **Database**: Supabase PostgreSQL with global distribution
   523	- **Edge Functions**: Deno runtime for serverless functions
   524	- **File Storage**: Supabase Storage for images and media
   525	
   526	### **Environment Variables Required**
   527	```env
   528	# Database
   529	VITE_SUPABASE_URL=your_supabase_url
   530	VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
   531	
   532	# External APIs
   533	EVENTBRITE_TOKEN=your_eventbrite_token
   534	TICKETMASTER_API_KEY=your_ticketmaster_key
   535	OPENAI_API_KEY=your_openai_key
   536	
   537	# Maps
   538	VITE_GOOGLE_MAPS_API_KEY=your_google_maps_key
   539	VITE_MAPBOX_TOKEN=your_mapbox_token
   540	
   541	# Services
   542	RESEND_API_KEY=your_resend_key
   543	STRIPE_PUBLISHABLE_KEY=your_stripe_key
   544	```
   545	
   546	---
   547	
   548	## 🎯 Architecture Strengths
   549	
   550	1. **Scalable Data Layer**: Supabase provides enterprise-grade PostgreSQL with real-time subscriptions
   551	2. **Modern Frontend**: React 18 with TypeScript provides excellent developer experience
   552	3. **Performance**: TanStack Query handles caching, background updates, and optimistic UI updates
   553	4. **Maintainable**: Clear separation of concerns with services layer and custom hooks
   554	5. **User Experience**: Netflix-inspired UI with smooth interactions and responsive design
   555	6. **Extensible**: Well-structured codebase allows easy feature additions
   556	
   557	---
   558	
   559	## 📈 Next Development Phase
   560	
   561	### **Priority 1: Production Launch**
   562	1. Implement authentication UI components
   563	2. Set up external API integrations with real keys
   564	3. Add seed data for demonstration
   565	4. Configure production deployment pipeline
   566	
   567	### **Priority 2: User Features**
   568	1. User profile management
   569	2. Social features (sharing, following)
   570	3. Advanced planning tools
   571	4. Mobile app development
   572	
   573	### **Priority 3: Business Features**
   574	1. Payment processing integration
   575	2. Event organizer dashboard
   576	3. Analytics and reporting
   577	4. Marketing and growth tools
   578	
   579	---
   580	
   581	This codebase represents a production-ready foundation for an event discovery platform with modern architecture, comprehensive features, and excellent user experience. The main requirement for launch is connecting the existing infrastructure to real data sources and implementing the authentication flow.
=== FILE: ./src/main.tsx ===
     1	import React from 'react'
     2	import ReactDOM from 'react-dom/client'
     3	import { BrowserRouter } from 'react-router-dom'
     4	import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
     5	import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
     6	import App from './App.tsx'
     7	import './styles/globals.css'
     8	
     9	// Create a client
    10	const queryClient = new QueryClient({
    11	  defaultOptions: {
    12	    queries: {
    13	      staleTime: 1000 * 60 * 5, // 5 minutes
    14	      gcTime: 1000 * 60 * 30, // 30 minutes
    15	      retry: 2,
    16	      refetchOnWindowFocus: false,
    17	    },
    18	  },
    19	})
    20	
    21	ReactDOM.createRoot(document.getElementById('root')!).render(
    22	  <React.StrictMode>
    23	    <QueryClientProvider client={queryClient}>
    24	      <BrowserRouter>
    25	        <App />
    26	      </BrowserRouter>
    27	      <ReactQueryDevtools initialIsOpen={false} />
    28	    </QueryClientProvider>
    29	  </React.StrictMode>,
    30	)
=== FILE: ./src/App.tsx ===
     1	import { Routes, Route } from 'react-router-dom'
     2	import { Toaster } from '@/components/ui/toaster'
     3	import { Layout } from '@/components/layout/Layout'
     4	import { HomePage } from '@/pages/HomePage'
     5	import { MapPage } from '@/pages/MapPage'
     6	import { DiscoverPage } from '@/pages/DiscoverPage'
     7	import { SavedPage } from '@/pages/SavedPage'
     8	import { PlanPage } from '@/pages/PlanPage'
     9	import { EventDetailsPage } from '@/pages/EventDetailsPage'
    10	import { ProfilePage } from '@/pages/ProfilePage'
    11	import { AuthGuard } from '@/components/auth/AuthGuard'
    12	
    13	function App() {
    14	  return (
    15	    <>
    16	      <Routes>
    17	        <Route path="/" element={<Layout />}>
    18	          <Route index element={<HomePage />} />
    19	          <Route path="map" element={<MapPage />} />
    20	          <Route path="discover" element={<DiscoverPage />} />
    21	          <Route path="event/:id" element={<EventDetailsPage />} />
    22	          
    23	          {/* Protected routes */}
    24	          <Route element={<AuthGuard />}>
    25	            <Route path="saved" element={<SavedPage />} />
    26	            <Route path="plan" element={<PlanPage />} />
    27	            <Route path="profile" element={<ProfilePage />} />
    28	          </Route>
    29	        </Route>
    30	      </Routes>
    31	      <Toaster />
    32	    </>
    33	  )
    34	}
    35	
    36	export default App
=== FILE: ./src/styles/globals.css ===
     1	@import 'leaflet/dist/leaflet.css';
     2	
     3	@tailwind base;
     4	@tailwind components;
     5	@tailwind utilities;
     6	
     7	@layer base {
     8	  :root {
     9	    --background: 0 0% 100%;
    10	    --foreground: 222.2 84% 4.9%;
    11	    --card: 0 0% 100%;
    12	    --card-foreground: 222.2 84% 4.9%;
    13	    --popover: 0 0% 100%;
    14	    --popover-foreground: 222.2 84% 4.9%;
    15	    --primary: 221.2 83.2% 53.3%;
    16	    --primary-foreground: 210 40% 98%;
    17	    --secondary: 210 40% 96%;
    18	    --secondary-foreground: 222.2 84% 4.9%;
    19	    --muted: 210 40% 96%;
    20	    --muted-foreground: 215.4 16.3% 46.9%;
    21	    --accent: 210 40% 96%;
    22	    --accent-foreground: 222.2 84% 4.9%;
    23	    --destructive: 0 84.2% 60.2%;
    24	    --destructive-foreground: 210 40% 98%;
    25	    --border: 214.3 31.8% 91.4%;
    26	    --input: 214.3 31.8% 91.4%;
    27	    --ring: 221.2 83.2% 53.3%;
    28	    --radius: 0.5rem;
    29	  }
    30	
    31	  .dark {
    32	    --background: 222.2 84% 4.9%;
    33	    --foreground: 210 40% 98%;
    34	    --card: 222.2 84% 4.9%;
    35	    --card-foreground: 210 40% 98%;
    36	    --popover: 222.2 84% 4.9%;
    37	    --popover-foreground: 210 40% 98%;
    38	    --primary: 217.2 91.2% 59.8%;
    39	    --primary-foreground: 222.2 84% 4.9%;
    40	    --secondary: 217.2 32.6% 17.5%;
    41	    --secondary-foreground: 210 40% 98%;
    42	    --muted: 217.2 32.6% 17.5%;
    43	    --muted-foreground: 215 20.2% 65.1%;
    44	    --accent: 217.2 32.6% 17.5%;
    45	    --accent-foreground: 210 40% 98%;
    46	    --destructive: 0 62.8% 30.6%;
    47	    --destructive-foreground: 210 40% 98%;
    48	    --border: 217.2 32.6% 17.5%;
    49	    --input: 217.2 32.6% 17.5%;
    50	    --ring: 224.3 76.3% 94.1%;
    51	  }
    52	}
    53	
    54	@layer base {
    55	  * {
    56	    @apply border-border;
    57	  }
    58	  body {
    59	    @apply bg-background text-foreground;
    60	  }
    61	}
    62	
    63	/* Netflix-style custom styles */
    64	.gradient-bg {
    65	  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    66	}
    67	
    68	.blur-overlay {
    69	  backdrop-filter: blur(10px);
    70	  -webkit-backdrop-filter: blur(10px);
    71	}
    72	
    73	/* Scrollbar styles */
    74	.scrollbar-hide {
    75	  -ms-overflow-style: none;
    76	  scrollbar-width: none;
    77	}
    78	
    79	.scrollbar-hide::-webkit-scrollbar {
    80	  display: none;
    81	}
    82	
    83	/* Custom scrollbar for main content */
    84	::-webkit-scrollbar {
    85	  width: 6px;
    86	}
    87	
    88	::-webkit-scrollbar-track {
    89	  background: rgba(255, 255, 255, 0.05);
    90	}
    91	
    92	::-webkit-scrollbar-thumb {
    93	  background: rgba(255, 255, 255, 0.2);
    94	  border-radius: 3px;
    95	}
    96	
    97	::-webkit-scrollbar-thumb:hover {
    98	  background: rgba(255, 255, 255, 0.3);
    99	}
   100	
   101	/* Glassmorphism effect */
   102	.glass {
   103	  background: rgba(255, 255, 255, 0.05);
   104	  backdrop-filter: blur(20px);
   105	  -webkit-backdrop-filter: blur(20px);
   106	  border: 1px solid rgba(255, 255, 255, 0.1);
   107	}
   108	
   109	.glass-dark {
   110	  background: rgba(0, 0, 0, 0.6);
   111	  backdrop-filter: blur(20px);
   112	  -webkit-backdrop-filter: blur(20px);
   113	  border: 1px solid rgba(255, 255, 255, 0.1);
   114	}
   115	
   116	/* Loading animations */
   117	@keyframes pulse-glow {
   118	  0%, 100% {
   119	    opacity: 1;
   120	    transform: scale(1);
   121	  }
   122	  50% {
   123	    opacity: 0.7;
   124	    transform: scale(1.05);
   125	  }
   126	}
   127	
   128	.pulse-glow {
   129	  animation: pulse-glow 2s ease-in-out infinite;
   130	}
=== FILE: ./src/lib/supabase.ts ===
     1	import { createClient } from '@supabase/supabase-js'
     2	import type { Database } from '@/types/database.types'
     3	
     4	const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
     5	const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY
     6	
     7	if (!supabaseUrl || !supabaseAnonKey) {
     8	  throw new Error('Missing Supabase environment variables')
     9	}
    10	
    11	export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
    12	  auth: {
    13	    persistSession: true,
    14	    autoRefreshToken: true,
    15	  },
    16	})
    17	
    18	// Helper types
    19	export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']
    20	export type Enums<T extends keyof Database['public']['Enums']> = Database['public']['Enums'][T]
    21	export type Functions<T extends keyof Database['public']['Functions']> = Database['public']['Functions'][T]
=== FILE: ./src/lib/utils.ts ===
     1	import { type ClassValue, clsx } from "clsx"
     2	import { twMerge } from "tailwind-merge"
     3	
     4	export function cn(...inputs: ClassValue[]) {
     5	  return twMerge(clsx(inputs))
     6	}
     7	
     8	export function formatDate(dateString: string) {
     9	  const date = new Date(dateString)
    10	  return new Intl.DateTimeFormat('en-US', {
    11	    weekday: 'short',
    12	    year: 'numeric',
    13	    month: 'short',
    14	    day: 'numeric'
    15	  }).format(date)
    16	}
    17	
    18	export function formatTime(timeString: string) {
    19	  const [hours, minutes] = timeString.split(':')
    20	  const hour = parseInt(hours)
    21	  const ampm = hour >= 12 ? 'PM' : 'AM'
    22	  const displayHour = hour % 12 || 12
    23	  return `${displayHour}:${minutes} ${ampm}`
    24	}
    25	
    26	export function formatPrice(priceMin?: number, priceMax?: number, isFree?: boolean, currency = 'USD') {
    27	  if (isFree) return 'Free'
    28	  if (!priceMin) return 'Price varies'
    29	  if (priceMin === priceMax || !priceMax) {
    30	    return new Intl.NumberFormat('en-US', {
    31	      style: 'currency',
    32	      currency
    33	    }).format(priceMin)
    34	  }
    35	  return `${new Intl.NumberFormat('en-US', {
    36	    style: 'currency',
    37	    currency
    38	  }).format(priceMin)} - ${new Intl.NumberFormat('en-US', {
    39	    style: 'currency', 
    40	    currency
    41	  }).format(priceMax)}`
    42	}
    43	
    44	export function slugify(text: string) {
    45	  return text
    46	    .toLowerCase()
    47	    .replace(/\s+/g, '-')
    48	    .replace(/[^\w-]/g, '')
    49	}
    50	
    51	export function capitalize(text: string) {
    52	  return text.charAt(0).toUpperCase() + text.slice(1)
    53	}
    54	
    55	export function truncate(text: string, length = 100) {
    56	  if (text.length <= length) return text
    57	  return text.slice(0, length) + '...'
    58	}
    59	
    60	export function getEventCategoryIcon(category: string) {
    61	  const icons = {
    62	    music: '🎵',
    63	    sports: '⚽',
    64	    arts: '🎨',
    65	    food: '🍽️',
    66	    tech: '💻',
    67	    social: '👥',
    68	    business: '💼',
    69	    education: '📚',
    70	    family: '👨‍👩‍👧‍👦',
    71	    other: '🎉'
    72	  }
    73	  return icons[category as keyof typeof icons] || icons.other
    74	}
    75	
    76	export function getEventCategoryColor(category: string) {
    77	  const colors = {
    78	    music: 'bg-purple-500',
    79	    sports: 'bg-green-500',
    80	    arts: 'bg-orange-500',
    81	    food: 'bg-red-500',
    82	    tech: 'bg-blue-500',
    83	    social: 'bg-yellow-500',
    84	    business: 'bg-indigo-500',
    85	    education: 'bg-teal-500',
    86	    family: 'bg-pink-500',
    87	    other: 'bg-gray-500'
    88	  }
    89	  return colors[category as keyof typeof colors] || colors.other
    90	}
=== FILE: ./src/types/database.types.ts ===
     1	export type Json =
     2	  | string
     3	  | number
     4	  | boolean
     5	  | null
     6	  | { [key: string]: Json | undefined }
     7	  | Json[]
     8	
     9	export interface Database {
    10	  public: {
    11	    Tables: {
    12	      events: {
    13	        Row: {
    14	          id: string
    15	          title: string
    16	          description: string
    17	          venue_id: string
    18	          city_id: string
    19	          category: string
    20	          date: string
    21	          time: string | null
    22	          end_time: string | null
    23	          price_min: number | null
    24	          price_max: number | null
    25	          currency: string
    26	          image_url: string | null
    27	          video_url: string | null
    28	          website_url: string | null
    29	          ticket_url: string | null
    30	          tags: string[] | null
    31	          is_featured: boolean
    32	          is_free: boolean
    33	          is_approved: boolean
    34	          status: 'active' | 'cancelled' | 'postponed'
    35	          view_count: number
    36	          created_at: string
    37	          updated_at: string
    38	          submitted_by: string
    39	        }
    40	        Insert: Omit<Database['public']['Tables']['events']['Row'], 'id' | 'created_at' | 'updated_at' | 'view_count'>
    41	        Update: Partial<Database['public']['Tables']['events']['Insert']>
    42	      }
    43	      venues: {
    44	        Row: {
    45	          id: string
    46	          name: string
    47	          description: string | null
    48	          type: string
    49	          address: string
    50	          city_id: string
    51	          neighborhood: string | null
    52	          latitude: number | null
    53	          longitude: number | null
    54	          phone: string | null
    55	          email: string | null
    56	          website_url: string | null
    57	          capacity: string | null
    58	          amenities: string[] | null
    59	          operating_hours: Json | null
    60	          social_links: Json | null
    61	          images: string[] | null
    62	          is_verified: boolean
    63	          rating: number | null
    64	          created_at: string
    65	          updated_at: string
    66	          submitted_by: string
    67	        }
    68	        Insert: Omit<Database['public']['Tables']['venues']['Row'], 'id' | 'created_at' | 'updated_at' | 'rating'>
    69	        Update: Partial<Database['public']['Tables']['venues']['Insert']>
    70	      }
    71	      cities: {
    72	        Row: {
    73	          id: string
    74	          name: string
    75	          slug: string
    76	          country: string
    77	          description: string | null
    78	          image_url: string | null
    79	          timezone: string
    80	          is_active: boolean
    81	          created_at: string
    82	          updated_at: string
    83	        }
    84	        Insert: Omit<Database['public']['Tables']['cities']['Row'], 'id' | 'created_at' | 'updated_at'>
    85	        Update: Partial<Database['public']['Tables']['cities']['Insert']>
    86	      }
    87	      profiles: {
    88	        Row: {
    89	          id: string
    90	          email: string
    91	          name: string
    92	          username: string | null
    93	          avatar_url: string | null
    94	          bio: string | null
    95	          location: string | null
    96	          subscription_tier: 'free' | 'pro' | 'premium'
    97	          subscription_status: 'active' | 'cancelled' | 'past_due'
    98	          preferences: Json
    99	          created_at: string
   100	          updated_at: string
   101	        }
   102	        Insert: Omit<Database['public']['Tables']['profiles']['Row'], 'created_at' | 'updated_at'>
   103	        Update: Partial<Database['public']['Tables']['profiles']['Insert']>
   104	      }
   105	      plans: {
   106	        Row: {
   107	          id: string
   108	          title: string
   109	          description: string
   110	          city_id: string
   111	          cover_image_url: string | null
   112	          is_public: boolean
   113	          is_template: boolean
   114	          status: 'draft' | 'active' | 'completed'
   115	          tags: string[] | null
   116	          notes: string | null
   117	          created_by: string
   118	          created_at: string
   119	          updated_at: string
   120	        }
   121	        Insert: Omit<Database['public']['Tables']['plans']['Row'], 'id' | 'created_at' | 'updated_at'>
   122	        Update: Partial<Database['public']['Tables']['plans']['Insert']>
   123	      }
   124	      plan_events: {
   125	        Row: {
   126	          id: string
   127	          plan_id: string
   128	          event_id: string
   129	          order_index: number
   130	          notes: string | null
   131	          created_at: string
   132	        }
   133	        Insert: Omit<Database['public']['Tables']['plan_events']['Row'], 'id' | 'created_at'>
   134	        Update: Partial<Database['public']['Tables']['plan_events']['Insert']>
   135	      }
   136	      user_events: {
   137	        Row: {
   138	          id: string
   139	          user_id: string
   140	          event_id: string
   141	          type: 'saved' | 'attended' | 'interested'
   142	          rating: number | null
   143	          notes: string | null
   144	          created_at: string
   145	        }
   146	        Insert: Omit<Database['public']['Tables']['user_events']['Row'], 'id' | 'created_at'>
   147	        Update: Partial<Database['public']['Tables']['user_events']['Insert']>
   148	      }
   149	      submissions: {
   150	        Row: {
   151	          id: string
   152	          type: 'event' | 'venue'
   153	          data: Json
   154	          status: 'pending' | 'approved' | 'rejected'
   155	          reviewer_notes: string | null
   156	          submitted_by: string
   157	          reviewed_by: string | null
   158	          created_at: string
   159	          updated_at: string
   160	        }
   161	        Insert: Omit<Database['public']['Tables']['submissions']['Row'], 'id' | 'created_at' | 'updated_at' | 'reviewed_by'>
   162	        Update: Partial<Database['public']['Tables']['submissions']['Insert']>
   163	      }
   164	    }
   165	    Views: {
   166	      event_details: {
   167	        Row: {
   168	          id: string
   169	          title: string
   170	          description: string
   171	          category: string
   172	          date: string
   173	          time: string | null
   174	          venue_name: string
   175	          venue_address: string
   176	          venue_latitude: number | null
   177	          venue_longitude: number | null
   178	          city_name: string
   179	          city_slug: string
   180	          price_min: number | null
   181	          price_max: number | null
   182	          image_url: string | null
   183	          is_featured: boolean
   184	          is_free: boolean
   185	        }
   186	      }
   187	    }
   188	    Functions: {
   189	      get_events_by_city: {
   190	        Args: { city_slug: string; limit_count?: number }
   191	        Returns: Database['public']['Views']['event_details']['Row'][]
   192	      }
   193	      get_featured_events: {
   194	        Args: { limit_count?: number }
   195	        Returns: Database['public']['Views']['event_details']['Row'][]
   196	      }
   197	      get_nearby_events: {
   198	        Args: { lat: number; lng: number; radius_km?: number }
   199	        Returns: Database['public']['Views']['event_details']['Row'][]
   200	      }
   201	      increment_event_views: {
   202	        Args: { event_id: string }
   203	        Returns: void
   204	      }
   205	      search_events: {
   206	        Args: { search_query: string }
   207	        Returns: Database['public']['Views']['event_details']['Row'][]
   208	      }
   209	      get_user_saved_events: {
   210	        Args: { user_id: string }
   211	        Returns: Database['public']['Views']['event_details']['Row'][]
   212	      }
   213	      get_plan_details: {
   214	        Args: { plan_id: string }
   215	        Returns: {
   216	          plan: Database['public']['Tables']['plans']['Row']
   217	          events: Database['public']['Views']['event_details']['Row'][]
   218	        }
   219	      }
   220	    }
   221	    Enums: {
   222	      event_category: 'music' | 'sports' | 'arts' | 'food' | 'tech' | 'social' | 'business' | 'education' | 'family' | 'other'
   223	      event_status: 'active' | 'cancelled' | 'postponed'
   224	      submission_status: 'pending' | 'approved' | 'rejected'
   225	      subscription_tier: 'free' | 'pro' | 'premium'
   226	      user_event_type: 'saved' | 'attended' | 'interested'
   227	    }
   228	  }
   229	}
=== FILE: ./src/hooks/useEvents.ts ===
     1	import { useQuery, useInfiniteQuery, useMutation, useQueryClient } from '@tanstack/react-query'
     2	import { eventsService, type EventFilters } from '@/services/events.service'
     3	import { userEventsService } from '@/services/user-events.service'
     4	
     5	// Query keys
     6	export const eventKeys = {
     7	  all: ['events'] as const,
     8	  lists: () => [...eventKeys.all, 'list'] as const,
     9	  list: (filters: EventFilters) => [...eventKeys.lists(), filters] as const,
    10	  details: () => [...eventKeys.all, 'detail'] as const,
    11	  detail: (id: string) => [...eventKeys.details(), id] as const,
    12	  featured: () => [...eventKeys.all, 'featured'] as const,
    13	  nearby: (lat: number, lng: number) => [...eventKeys.all, 'nearby', lat, lng] as const,
    14	  search: (query: string) => [...eventKeys.all, 'search', query] as const,
    15	  userSaved: (userId: string) => [...eventKeys.all, 'userSaved', userId] as const,
    16	}
    17	
    18	// Get events with filters
    19	export function useEvents(filters: EventFilters = {}) {
    20	  return useQuery({
    21	    queryKey: eventKeys.list(filters),
    22	    queryFn: () => eventsService.getEvents(filters),
    23	    staleTime: 5 * 60 * 1000, // 5 minutes
    24	  })
    25	}
    26	
    27	// Get featured events
    28	export function useFeaturedEvents(limit = 10) {
    29	  return useQuery({
    30	    queryKey: [...eventKeys.featured(), limit],
    31	    queryFn: () => eventsService.getFeaturedEvents(limit),
    32	    staleTime: 10 * 60 * 1000, // 10 minutes
    33	  })
    34	}
    35	
    36	// Get single event
    37	export function useEvent(id: string) {
    38	  return useQuery({
    39	    queryKey: eventKeys.detail(id),
    40	    queryFn: () => eventsService.getEvent(id),
    41	    enabled: !!id,
    42	  })
    43	}
    44	
    45	// Get nearby events
    46	export function useNearbyEvents(lat?: number, lng?: number, radius = 10) {
    47	  return useQuery({
    48	    queryKey: eventKeys.nearby(lat!, lng!),
    49	    queryFn: () => eventsService.getNearbyEvents(lat!, lng!, radius),
    50	    enabled: lat != null && lng != null,
    51	    staleTime: 5 * 60 * 1000,
    52	  })
    53	}
    54	
    55	// Search events
    56	export function useSearchEvents(query: string) {
    57	  return useQuery({
    58	    queryKey: eventKeys.search(query),
    59	    queryFn: () => eventsService.searchEvents(query),
    60	    enabled: query.length >= 2,
    61	    staleTime: 2 * 60 * 1000, // 2 minutes
    62	  })
    63	}
    64	
    65	// Infinite scroll events
    66	export function useInfiniteEvents(filters: EventFilters = {}) {
    67	  return useInfiniteQuery({
    68	    queryKey: [...eventKeys.list(filters), 'infinite'],
    69	    queryFn: ({ pageParam }) => eventsService.getEventsInfinite(pageParam, filters),
    70	    initialPageParam: 0,
    71	    getNextPageParam: (lastPage) => lastPage.nextCursor,
    72	    staleTime: 5 * 60 * 1000,
    73	  })
    74	}
    75	
    76	// Get user's saved events
    77	export function useSavedEvents(userId: string) {
    78	  return useQuery({
    79	    queryKey: eventKeys.userSaved(userId),
    80	    queryFn: () => userEventsService.getSavedEvents(userId),
    81	    enabled: !!userId,
    82	  })
    83	}
    84	
    85	// Check if event is saved
    86	export function useIsEventSaved(eventId: string) {
    87	  return useQuery({
    88	    queryKey: [...eventKeys.detail(eventId), 'saved'],
    89	    queryFn: () => userEventsService.isEventSaved(eventId),
    90	    enabled: !!eventId,
    91	  })
    92	}
    93	
    94	// Save event mutation
    95	export function useSaveEvent() {
    96	  const queryClient = useQueryClient()
    97	
    98	  return useMutation({
    99	    mutationFn: userEventsService.saveEvent,
   100	    onSuccess: (_, eventId) => {
   101	      // Invalidate saved events queries
   102	      queryClient.invalidateQueries({ queryKey: eventKeys.userSaved('') })
   103	      queryClient.invalidateQueries({ queryKey: [...eventKeys.detail(eventId), 'saved'] })
   104	    },
   105	  })
   106	}
   107	
   108	// Unsave event mutation
   109	export function useUnsaveEvent() {
   110	  const queryClient = useQueryClient()
   111	
   112	  return useMutation({
   113	    mutationFn: userEventsService.unsaveEvent,
   114	    onSuccess: (_, eventId) => {
   115	      // Invalidate saved events queries
   116	      queryClient.invalidateQueries({ queryKey: eventKeys.userSaved('') })
   117	      queryClient.invalidateQueries({ queryKey: [...eventKeys.detail(eventId), 'saved'] })
   118	    },
   119	  })
   120	}
   121	
   122	// Track event view
   123	export function useTrackEventView() {
   124	  return useMutation({
   125	    mutationFn: eventsService.incrementViews,
   126	  })
   127	}
=== FILE: ./src/hooks/useToast.ts ===
     1	import * as React from "react"
     2	import type {
     3	  ToastActionElement,
     4	  ToastProps,
     5	} from "@/components/ui/toast"
     6	
     7	const TOAST_LIMIT = 1
     8	const TOAST_REMOVE_DELAY = 1000000
     9	
    10	type ToasterToast = ToastProps & {
    11	  id: string
    12	  title?: React.ReactNode
    13	  description?: React.ReactNode
    14	  action?: ToastActionElement
    15	}
    16	
    17	const actionTypes = {
    18	  ADD_TOAST: "ADD_TOAST",
    19	  UPDATE_TOAST: "UPDATE_TOAST",
    20	  DISMISS_TOAST: "DISMISS_TOAST",
    21	  REMOVE_TOAST: "REMOVE_TOAST",
    22	} as const
    23	
    24	let count = 0
    25	
    26	function genId() {
    27	  count = (count + 1) % Number.MAX_SAFE_INTEGER
    28	  return count.toString()
    29	}
    30	
    31	type ActionType = typeof actionTypes
    32	
    33	type Action =
    34	  | {
    35	      type: ActionType["ADD_TOAST"]
    36	      toast: ToasterToast
    37	    }
    38	  | {
    39	      type: ActionType["UPDATE_TOAST"]
    40	      toast: Partial<ToasterToast>
    41	    }
    42	  | {
    43	      type: ActionType["DISMISS_TOAST"]
    44	      toastId?: ToasterToast["id"]
    45	    }
    46	  | {
    47	      type: ActionType["REMOVE_TOAST"]
    48	      toastId?: ToasterToast["id"]
    49	    }
    50	
    51	interface State {
    52	  toasts: ToasterToast[]
    53	}
    54	
    55	const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
    56	
    57	const addToRemoveQueue = (toastId: string) => {
    58	  if (toastTimeouts.has(toastId)) {
    59	    return
    60	  }
    61	
    62	  const timeout = setTimeout(() => {
    63	    toastTimeouts.delete(toastId)
    64	    dispatch({
    65	      type: "REMOVE_TOAST",
    66	      toastId: toastId,
    67	    })
    68	  }, TOAST_REMOVE_DELAY)
    69	
    70	  toastTimeouts.set(toastId, timeout)
    71	}
    72	
    73	export const reducer = (state: State, action: Action): State => {
    74	  switch (action.type) {
    75	    case "ADD_TOAST":
    76	      return {
    77	        ...state,
    78	        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
    79	      }
    80	
    81	    case "UPDATE_TOAST":
    82	      return {
    83	        ...state,
    84	        toasts: state.toasts.map((t) =>
    85	          t.id === action.toast.id ? { ...t, ...action.toast } : t
    86	        ),
    87	      }
    88	
    89	    case "DISMISS_TOAST": {
    90	      const { toastId } = action
    91	
    92	      if (toastId) {
    93	        addToRemoveQueue(toastId)
    94	      } else {
    95	        state.toasts.forEach((toast) => {
    96	          addToRemoveQueue(toast.id)
    97	        })
    98	      }
    99	
   100	      return {
   101	        ...state,
   102	        toasts: state.toasts.map((t) =>
   103	          t.id === toastId || toastId === undefined
   104	            ? {
   105	                ...t,
   106	                open: false,
   107	              }
   108	            : t
   109	        ),
   110	      }
   111	    }
   112	    case "REMOVE_TOAST":
   113	      if (action.toastId === undefined) {
   114	        return {
   115	          ...state,
   116	          toasts: [],
   117	        }
   118	      }
   119	      return {
   120	        ...state,
   121	        toasts: state.toasts.filter((t) => t.id !== action.toastId),
   122	      }
   123	  }
   124	}
   125	
   126	const listeners: Array<(state: State) => void> = []
   127	
   128	let memoryState: State = { toasts: [] }
   129	
   130	function dispatch(action: Action) {
   131	  memoryState = reducer(memoryState, action)
   132	  listeners.forEach((listener) => {
   133	    listener(memoryState)
   134	  })
   135	}
   136	
   137	type Toast = Omit<ToasterToast, "id">
   138	
   139	function toast({ ...props }: Toast) {
   140	  const id = genId()
   141	
   142	  const update = (props: ToasterToast) =>
   143	    dispatch({
   144	      type: "UPDATE_TOAST",
   145	      toast: { ...props, id },
   146	    })
   147	  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
   148	
   149	  dispatch({
   150	    type: "ADD_TOAST",
   151	    toast: {
   152	      ...props,
   153	      id,
   154	      open: true,
   155	      onOpenChange: (open) => {
   156	        if (!open) dismiss()
   157	      },
   158	    },
   159	  })
   160	
   161	  return {
   162	    id: id,
   163	    dismiss,
   164	    update,
   165	  }
   166	}
   167	
   168	function useToast() {
   169	  const [state, setState] = React.useState<State>(memoryState)
   170	
   171	  React.useEffect(() => {
   172	    listeners.push(setState)
   173	    return () => {
   174	      const index = listeners.indexOf(setState)
   175	      if (index > -1) {
   176	        listeners.splice(index, 1)
   177	      }
   178	    }
   179	  }, [state])
   180	
   181	  return {
   182	    ...state,
   183	    toast,
   184	    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
   185	  }
   186	}
   187	
   188	export { useToast, toast }
=== FILE: ./src/services/events.service.ts ===
     1	import { supabase } from '@/lib/supabase'
     2	import type { Tables, Enums } from '@/lib/supabase'
     3	
     4	export type Event = Tables<'events'>
     5	export type EventCategory = Enums<'event_category'>
     6	export type EventStatus = Enums<'event_status'>
     7	
     8	export interface EventFilters {
     9	  categories?: EventCategory[]
    10	  city?: string
    11	  dateFrom?: string
    12	  dateTo?: string
    13	  priceMin?: number
    14	  priceMax?: number
    15	  isFree?: boolean
    16	  search?: string
    17	  status?: EventStatus
    18	  limit?: number
    19	  offset?: number
    20	}
    21	
    22	export const eventsService = {
    23	  // Get all events with filters
    24	  async getEvents(filters: EventFilters = {}) {
    25	    let query = supabase
    26	      .from('events')
    27	      .select(`
    28	        *,
    29	        venue:venues(id, name, address, latitude, longitude),
    30	        city:cities(id, name, slug)
    31	      `)
    32	      .eq('is_approved', true)
    33	      .eq('status', filters.status || 'active')
    34	      .gte('date', new Date().toISOString().split('T')[0])
    35	      .order('date', { ascending: true })
    36	
    37	    // Apply filters
    38	    if (filters.categories?.length) {
    39	      query = query.in('category', filters.categories)
    40	    }
    41	
    42	    if (filters.city) {
    43	      query = query.eq('city_id', filters.city)
    44	    }
    45	
    46	    if (filters.dateFrom) {
    47	      query = query.gte('date', filters.dateFrom)
    48	    }
    49	
    50	    if (filters.dateTo) {
    51	      query = query.lte('date', filters.dateTo)
    52	    }
    53	
    54	    if (filters.isFree) {
    55	      query = query.eq('is_free', true)
    56	    } else {
    57	      if (filters.priceMin !== undefined) {
    58	        query = query.gte('price_min', filters.priceMin)
    59	      }
    60	      if (filters.priceMax !== undefined) {
    61	        query = query.lte('price_max', filters.priceMax)
    62	      }
    63	    }
    64	
    65	    if (filters.search) {
    66	      query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`)
    67	    }
    68	
    69	    // Pagination
    70	    const limit = filters.limit || 50
    71	    const offset = filters.offset || 0
    72	    query = query.range(offset, offset + limit - 1)
    73	
    74	    const { data, error } = await query
    75	
    76	    if (error) throw error
    77	    return data
    78	  },
    79	
    80	  // Get featured events
    81	  async getFeaturedEvents(limit = 10) {
    82	    const { data, error } = await supabase
    83	      .rpc('get_featured_events', { limit_count: limit })
    84	    
    85	    if (error) throw error
    86	    return data
    87	  },
    88	
    89	  // Get events by city
    90	  async getEventsByCity(citySlug: string, limit = 50) {
    91	    const { data, error } = await supabase
    92	      .rpc('get_events_by_city', { city_slug: citySlug, limit_count: limit })
    93	    
    94	    if (error) throw error
    95	    return data
    96	  },
    97	
    98	  // Get nearby events
    99	  async getNearbyEvents(lat: number, lng: number, radiusKm = 10) {
   100	    const { data, error } = await supabase
   101	      .rpc('get_nearby_events', { lat, lng, radius_km: radiusKm })
   102	    
   103	    if (error) throw error
   104	    return data
   105	  },
   106	
   107	  // Get single event
   108	  async getEvent(id: string) {
   109	    const { data, error } = await supabase
   110	      .from('events')
   111	      .select(`
   112	        *,
   113	        venue:venues(*),
   114	        city:cities(*)
   115	      `)
   116	      .eq('id', id)
   117	      .single()
   118	
   119	    if (error) throw error
   120	    return data
   121	  },
   122	
   123	  // Search events
   124	  async searchEvents(query: string) {
   125	    const { data, error } = await supabase
   126	      .rpc('search_events', { search_query: query })
   127	    
   128	    if (error) throw error
   129	    return data
   130	  },
   131	
   132	  // Increment event views
   133	  async incrementViews(eventId: string) {
   134	    const { error } = await supabase
   135	      .rpc('increment_event_views', { event_id: eventId })
   136	    
   137	    if (error) throw error
   138	  },
   139	
   140	  // Get events for infinite scroll
   141	  async getEventsInfinite(pageParam = 0, filters: EventFilters = {}) {
   142	    const limit = 20
   143	    const events = await this.getEvents({
   144	      ...filters,
   145	      limit,
   146	      offset: pageParam * limit
   147	    })
   148	
   149	    return {
   150	      events,
   151	      nextCursor: events.length === limit ? pageParam + 1 : null
   152	    }
   153	  }
   154	}
=== FILE: ./src/services/plans.service.ts ===
     1	import { supabase } from '@/lib/supabase'
     2	import type { Tables } from '@/lib/supabase'
     3	
     4	export type Plan = Tables<'plans'>
     5	export type PlanEvent = Tables<'plan_events'>
     6	
     7	interface CreatePlanData {
     8	  title: string
     9	  description: string
    10	  cityId: string
    11	  coverImageUrl?: string
    12	  isPublic?: boolean
    13	  tags?: string[]
    14	  notes?: string
    15	}
    16	
    17	interface UpdatePlanData extends Partial<CreatePlanData> {
    18	  status?: 'draft' | 'active' | 'completed'
    19	}
    20	
    21	export const plansService = {
    22	  // Get user's plans
    23	  async getUserPlans(userId?: string) {
    24	    const { data: { user } } = await supabase.auth.getUser()
    25	    const targetUserId = userId || user?.id
    26	    
    27	    if (!targetUserId) throw new Error('User not authenticated')
    28	
    29	    const { data, error } = await supabase
    30	      .from('plans')
    31	      .select(`
    32	        *,
    33	        city:cities(name, slug),
    34	        plan_events(
    35	          id,
    36	          order_index,
    37	          event:events(
    38	            id,
    39	            title,
    40	            date,
    41	            time,
    42	            image_url,
    43	            venue:venues(name)
    44	          )
    45	        )
    46	      `)
    47	      .eq('created_by', targetUserId)
    48	      .order('updated_at', { ascending: false })
    49	
    50	    if (error) throw error
    51	    return data
    52	  },
    53	
    54	  // Get plan details
    55	  async getPlan(planId: string) {
    56	    const { data, error } = await supabase
    57	      .rpc('get_plan_details', { plan_id: planId })
    58	    
    59	    if (error) throw error
    60	    return data
    61	  },
    62	
    63	  // Create new plan
    64	  async createPlan(planData: CreatePlanData) {
    65	    const { data: { user } } = await supabase.auth.getUser()
    66	    if (!user) throw new Error('User not authenticated')
    67	
    68	    const { data, error } = await supabase
    69	      .from('plans')
    70	      .insert({
    71	        title: planData.title,
    72	        description: planData.description,
    73	        city_id: planData.cityId,
    74	        cover_image_url: planData.coverImageUrl,
    75	        is_public: planData.isPublic || false,
    76	        tags: planData.tags,
    77	        notes: planData.notes,
    78	        created_by: user.id,
    79	        status: 'draft'
    80	      })
    81	      .select()
    82	      .single()
    83	
    84	    if (error) throw error
    85	    return data
    86	  },
    87	
    88	  // Update plan
    89	  async updatePlan(planId: string, updates: UpdatePlanData) {
    90	    const { data, error } = await supabase
    91	      .from('plans')
    92	      .update({
    93	        ...updates,
    94	        city_id: updates.cityId,
    95	        cover_image_url: updates.coverImageUrl,
    96	        is_public: updates.isPublic,
    97	        updated_at: new Date().toISOString()
    98	      })
    99	      .eq('id', planId)
   100	      .select()
   101	      .single()
   102	
   103	    if (error) throw error
   104	    return data
   105	  },
   106	
   107	  // Delete plan
   108	  async deletePlan(planId: string) {
   109	    const { error } = await supabase
   110	      .from('plans')
   111	      .delete()
   112	      .eq('id', planId)
   113	
   114	    if (error) throw error
   115	  },
   116	
   117	  // Add event to plan
   118	  async addEventToPlan(planId: string, eventId: string, orderIndex?: number) {
   119	    // Get current max order index if not provided
   120	    if (orderIndex === undefined) {
   121	      const { data: maxOrder } = await supabase
   122	        .from('plan_events')
   123	        .select('order_index')
   124	        .eq('plan_id', planId)
   125	        .order('order_index', { ascending: false })
   126	        .limit(1)
   127	        .single()
   128	      
   129	      orderIndex = (maxOrder?.order_index || 0) + 1
   130	    }
   131	
   132	    const { error } = await supabase
   133	      .from('plan_events')
   134	      .insert({
   135	        plan_id: planId,
   136	        event_id: eventId,
   137	        order_index: orderIndex
   138	      })
   139	
   140	    if (error && error.code !== '23505') throw error // Ignore duplicate
   141	  },
   142	
   143	  // Remove event from plan
   144	  async removeEventFromPlan(planId: string, eventId: string) {
   145	    const { error } = await supabase
   146	      .from('plan_events')
   147	      .delete()
   148	      .eq('plan_id', planId)
   149	      .eq('event_id', eventId)
   150	
   151	    if (error) throw error
   152	  },
   153	
   154	  // Reorder events in plan
   155	  async reorderPlanEvents(planId: string, eventOrders: { eventId: string; orderIndex: number }[]) {
   156	    const updates = eventOrders.map(({ eventId, orderIndex }) => ({
   157	      plan_id: planId,
   158	      event_id: eventId,
   159	      order_index: orderIndex
   160	    }))
   161	
   162	    const { error } = await supabase
   163	      .from('plan_events')
   164	      .upsert(updates)
   165	
   166	    if (error) throw error
   167	  },
   168	
   169	  // Get public plans
   170	  async getPublicPlans(citySlug?: string, limit = 20) {
   171	    let query = supabase
   172	      .from('plans')
   173	      .select(`
   174	        *,
   175	        city:cities(name, slug),
   176	        creator:profiles!created_by(name, username, avatar_url),
   177	        plan_events(
   178	          event:events(
   179	            id,
   180	            title,
   181	            image_url
   182	          )
   183	        )
   184	      `)
   185	      .eq('is_public', true)
   186	      .eq('status', 'active')
   187	      .order('updated_at', { ascending: false })
   188	      .limit(limit)
   189	
   190	    if (citySlug) {
   191	      query = query.eq('cities.slug', citySlug)
   192	    }
   193	
   194	    const { data, error } = await query
   195	    if (error) throw error
   196	    return data
   197	  }
   198	}
=== FILE: ./src/services/user-events.service.ts ===
     1	import { supabase } from '@/lib/supabase'
     2	import type { Tables, Enums } from '@/lib/supabase'
     3	
     4	export type UserEvent = Tables<'user_events'>
     5	export type UserEventType = Enums<'user_event_type'>
     6	
     7	export const userEventsService = {
     8	  // Get user's saved events
     9	  async getSavedEvents(userId: string) {
    10	    const { data, error } = await supabase
    11	      .rpc('get_user_saved_events', { user_id: userId })
    12	    
    13	    if (error) throw error
    14	    return data
    15	  },
    16	
    17	  // Save an event
    18	  async saveEvent(eventId: string) {
    19	    const { data: { user } } = await supabase.auth.getUser()
    20	    if (!user) throw new Error('User not authenticated')
    21	
    22	    const { error } = await supabase
    23	      .from('user_events')
    24	      .insert({
    25	        user_id: user.id,
    26	        event_id: eventId,
    27	        type: 'saved'
    28	      })
    29	
    30	    if (error && error.code !== '23505') throw error // Ignore duplicate key error
    31	  },
    32	
    33	  // Remove saved event
    34	  async unsaveEvent(eventId: string) {
    35	    const { data: { user } } = await supabase.auth.getUser()
    36	    if (!user) throw new Error('User not authenticated')
    37	
    38	    const { error } = await supabase
    39	      .from('user_events')
    40	      .delete()
    41	      .eq('user_id', user.id)
    42	      .eq('event_id', eventId)
    43	      .eq('type', 'saved')
    44	
    45	    if (error) throw error
    46	  },
    47	
    48	  // Check if event is saved
    49	  async isEventSaved(eventId: string): Promise<boolean> {
    50	    const { data: { user } } = await supabase.auth.getUser()
    51	    if (!user) return false
    52	
    53	    const { data, error } = await supabase
    54	      .from('user_events')
    55	      .select('id')
    56	      .eq('user_id', user.id)
    57	      .eq('event_id', eventId)
    58	      .eq('type', 'saved')
    59	      .single()
    60	
    61	    return !error && !!data
    62	  },
    63	
    64	  // Mark event as attended
    65	  async markAttended(eventId: string, rating?: number, notes?: string) {
    66	    const { data: { user } } = await supabase.auth.getUser()
    67	    if (!user) throw new Error('User not authenticated')
    68	
    69	    const { error } = await supabase
    70	      .from('user_events')
    71	      .upsert({
    72	        user_id: user.id,
    73	        event_id: eventId,
    74	        type: 'attended',
    75	        rating,
    76	        notes
    77	      })
    78	
    79	    if (error) throw error
    80	  },
    81	
    82	  // Get user's event history
    83	  async getUserEventHistory(userId: string, type?: UserEventType) {
    84	    let query = supabase
    85	      .from('user_events')
    86	      .select(`
    87	        *,
    88	        event:events(
    89	          *,
    90	          venue:venues(name, address),
    91	          city:cities(name, slug)
    92	        )
    93	      `)
    94	      .eq('user_id', userId)
    95	      .order('created_at', { ascending: false })
    96	
    97	    if (type) {
    98	      query = query.eq('type', type)
    99	    }
   100	
   101	    const { data, error } = await query
   102	    if (error) throw error
   103	    return data
   104	  }
   105	}
=== FILE: ./src/components/layout/Layout.tsx ===
     1	import { Outlet } from 'react-router-dom'
     2	import { Sidebar } from './Sidebar'
     3	import { Header } from './Header'
     4	
     5	export function Layout() {
     6	  return (
     7	    <div className="min-h-screen bg-black text-white flex">
     8	      {/* Sidebar */}
     9	      <Sidebar />
    10	      
    11	      {/* Main content */}
    12	      <div className="flex-1 flex flex-col">
    13	        <Header />
    14	        <main className="flex-1 overflow-auto">
    15	          <Outlet />
    16	        </main>
    17	      </div>
    18	    </div>
    19	  )
    20	}
=== FILE: ./src/components/layout/Header.tsx ===
     1	import { Search, Bell, Settings } from 'lucide-react'
     2	import { Button } from '@/components/ui/button'
     3	
     4	export function Header() {
     5	  return (
     6	    <header className="h-16 border-b border-white/10 bg-black/50 backdrop-blur-sm">
     7	      <div className="h-full px-6 flex items-center justify-between">
     8	        {/* Search */}
     9	        <div className="flex items-center flex-1 max-w-xl">
    10	          <div className="relative w-full">
    11	            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/40" size={20} />
    12	            <input
    13	              type="text"
    14	              placeholder="Search events, venues, or cities..."
    15	              className="w-full bg-white/10 border border-white/20 rounded-lg pl-10 pr-4 py-2 text-white placeholder:text-white/40 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
    16	            />
    17	          </div>
    18	        </div>
    19	
    20	        {/* Actions */}
    21	        <div className="flex items-center space-x-2">
    22	          <Button variant="ghost" size="icon" className="text-white/60 hover:text-white hover:bg-white/10">
    23	            <Bell size={20} />
    24	          </Button>
    25	          <Button variant="ghost" size="icon" className="text-white/60 hover:text-white hover:bg-white/10">
    26	            <Settings size={20} />
    27	          </Button>
    28	        </div>
    29	      </div>
    30	    </header>
    31	  )
    32	}
=== FILE: ./src/components/layout/Sidebar.tsx ===
     1	import { useState } from 'react'
     2	import { Link, useLocation } from 'react-router-dom'
     3	import { 
     4	  Home, 
     5	  Map, 
     6	  Search, 
     7	  Bookmark, 
     8	  Calendar,
     9	  User,
    10	  Menu,
    11	  X
    12	} from 'lucide-react'
    13	import { cn } from '@/lib/utils'
    14	import { Button } from '@/components/ui/button'
    15	
    16	const navigation = [
    17	  { name: 'Home', href: '/', icon: Home },
    18	  { name: 'Map', href: '/map', icon: Map },
    19	  { name: 'Discover', href: '/discover', icon: Search },
    20	  { name: 'Saved', href: '/saved', icon: Bookmark },
    21	  { name: 'Plan', href: '/plan', icon: Calendar },
    22	  { name: 'Profile', href: '/profile', icon: User },
    23	]
    24	
    25	export function Sidebar() {
    26	  const [isCollapsed, setIsCollapsed] = useState(false)
    27	  const location = useLocation()
    28	
    29	  return (
    30	    <div className={cn(
    31	      "h-screen bg-black/95 backdrop-blur-xl border-r border-white/10 transition-all duration-300 flex flex-col",
    32	      isCollapsed ? "w-16" : "w-64"
    33	    )}>
    34	      {/* Header */}
    35	      <div className="p-4 border-b border-white/10">
    36	        <div className="flex items-center justify-between">
    37	          {!isCollapsed && (
    38	            <div className="flex items-center space-x-2">
    39	              <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
    40	                <span className="text-white font-bold text-sm">S</span>
    41	              </div>
    42	              <span className="text-white font-bold text-xl">SceneScout</span>
    43	            </div>
    44	          )}
    45	          <Button
    46	            variant="ghost"
    47	            size="icon"
    48	            onClick={() => setIsCollapsed(!isCollapsed)}
    49	            className="text-white/60 hover:text-white hover:bg-white/10"
    50	          >
    51	            {isCollapsed ? <Menu size={20} /> : <X size={20} />}
    52	          </Button>
    53	        </div>
    54	      </div>
    55	
    56	      {/* Navigation */}
    57	      <nav className="flex-1 p-4">
    58	        <div className="space-y-2">
    59	          {navigation.map((item) => {
    60	            const isActive = location.pathname === item.href
    61	            const Icon = item.icon
    62	            
    63	            return (
    64	              <Link
    65	                key={item.name}
    66	                to={item.href}
    67	                className={cn(
    68	                  "flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors",
    69	                  isActive
    70	                    ? "bg-white/10 text-white"
    71	                    : "text-white/60 hover:text-white hover:bg-white/5",
    72	                  isCollapsed && "justify-center"
    73	                )}
    74	                title={isCollapsed ? item.name : undefined}
    75	              >
    76	                <Icon size={20} />
    77	                {!isCollapsed && (
    78	                  <span className="font-medium">{item.name}</span>
    79	                )}
    80	              </Link>
    81	            )
    82	          })}
    83	        </div>
    84	      </nav>
    85	
    86	      {/* User section */}
    87	      {!isCollapsed && (
    88	        <div className="p-4 border-t border-white/10">
    89	          <div className="flex items-center space-x-3 px-3 py-2">
    90	            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-green-500 rounded-full flex items-center justify-center">
    91	              <User size={16} className="text-white" />
    92	            </div>
    93	            <div>
    94	              <p className="text-white text-sm font-medium">Guest User</p>
    95	              <p className="text-white/60 text-xs">Sign in for more features</p>
    96	            </div>
    97	          </div>
    98	        </div>
    99	      )}
   100	    </div>
   101	  )
   102	}
=== FILE: ./src/components/events/EventCard.tsx ===
     1	import { useState } from 'react'
     2	import { Heart, Share2, Calendar, MapPin, Play } from 'lucide-react'
     3	import { Button } from '@/components/ui/button'
     4	import { Card, CardContent } from '@/components/ui/card'
     5	import { formatDate, formatTime, formatPrice, cn } from '@/lib/utils'
     6	import { useSaveEvent, useUnsaveEvent, useIsEventSaved } from '@/hooks/useEvents'
     7	
     8	interface Event {
     9	  id: string
    10	  title: string
    11	  description: string
    12	  date: string
    13	  time?: string
    14	  venue_name?: string
    15	  image_url?: string
    16	  video_url?: string
    17	  price_min?: number
    18	  price_max?: number
    19	  is_free?: boolean
    20	  category: string
    21	}
    22	
    23	interface EventCardProps {
    24	  event: Event
    25	  className?: string
    26	  size?: 'small' | 'medium' | 'large'
    27	  showActions?: boolean
    28	  onClick?: () => void
    29	}
    30	
    31	export function EventCard({ 
    32	  event, 
    33	  className, 
    34	  size = 'medium',
    35	  showActions = true,
    36	  onClick 
    37	}: EventCardProps) {
    38	  const [isHovered, setIsHovered] = useState(false)
    39	  const [isVideoPlaying, setIsVideoPlaying] = useState(false)
    40	  
    41	  const { data: isSaved = false } = useIsEventSaved(event.id)
    42	  const saveEventMutation = useSaveEvent()
    43	  const unsaveEventMutation = useUnsaveEvent()
    44	
    45	  const sizeClasses = {
    46	    small: 'w-64',
    47	    medium: 'w-80',
    48	    large: 'w-96'
    49	  }
    50	
    51	  const handleSave = async (e: React.MouseEvent) => {
    52	    e.stopPropagation()
    53	    try {
    54	      if (isSaved) {
    55	        await unsaveEventMutation.mutateAsync(event.id)
    56	      } else {
    57	        await saveEventMutation.mutateAsync(event.id)
    58	      }
    59	    } catch (error) {
    60	      console.error('Error saving/unsaving event:', error)
    61	    }
    62	  }
    63	
    64	  const handleShare = (e: React.MouseEvent) => {
    65	    e.stopPropagation()
    66	    if (navigator.share) {
    67	      navigator.share({
    68	        title: event.title,
    69	        text: event.description,
    70	        url: `/event/${event.id}`
    71	      })
    72	    }
    73	  }
    74	
    75	  return (
    76	    <Card 
    77	      className={cn(
    78	        "group relative overflow-hidden bg-gray-900 border-gray-800 hover:border-gray-700 transition-all duration-300 cursor-pointer",
    79	        sizeClasses[size],
    80	        className
    81	      )}
    82	      onMouseEnter={() => setIsHovered(true)}
    83	      onMouseLeave={() => {
    84	        setIsHovered(false)
    85	        setIsVideoPlaying(false)
    86	      }}
    87	      onClick={onClick}
    88	    >
    89	      {/* Image/Video Container */}
    90	      <div className="relative aspect-video overflow-hidden">
    91	        {isVideoPlaying && event.video_url ? (
    92	          <video
    93	            className="w-full h-full object-cover"
    94	            src={event.video_url}
    95	            autoPlay
    96	            muted
    97	            loop
    98	            onError={() => setIsVideoPlaying(false)}
    99	          />
   100	        ) : (
   101	          <img
   102	            src={event.image_url || '/placeholder-event.jpg'}
   103	            alt={event.title}
   104	            className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
   105	          />
   106	        )}
   107	        
   108	        {/* Overlay */}
   109	        <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
   110	        
   111	        {/* Video Play Button */}
   112	        {event.video_url && isHovered && !isVideoPlaying && (
   113	          <button
   114	            onClick={(e) => {
   115	              e.stopPropagation()
   116	              setIsVideoPlaying(true)
   117	            }}
   118	            className="absolute inset-0 flex items-center justify-center bg-black/20 hover:bg-black/30 transition-colors"
   119	          >
   120	            <div className="w-12 h-12 bg-white/90 rounded-full flex items-center justify-center hover:bg-white transition-colors">
   121	              <Play size={20} className="text-black ml-1" />
   122	            </div>
   123	          </button>
   124	        )}
   125	
   126	        {/* Category Badge */}
   127	        <div className="absolute top-3 left-3">
   128	          <span className="px-2 py-1 bg-black/70 text-white text-xs font-medium rounded-full backdrop-blur-sm">
   129	            {event.category}
   130	          </span>
   131	        </div>
   132	
   133	        {/* Action Buttons */}
   134	        {showActions && (
   135	          <div className={cn(
   136	            "absolute top-3 right-3 flex space-x-2 transition-opacity duration-200",
   137	            isHovered ? "opacity-100" : "opacity-0"
   138	          )}>
   139	            <Button
   140	              size="icon"
   141	              variant="ghost"
   142	              onClick={handleSave}
   143	              disabled={saveEventMutation.isPending || unsaveEventMutation.isPending}
   144	              className="w-8 h-8 bg-black/70 hover:bg-black/80 text-white backdrop-blur-sm"
   145	            >
   146	              <Heart 
   147	                size={16} 
   148	                className={cn(
   149	                  "transition-colors",
   150	                  isSaved ? "fill-red-500 text-red-500" : "text-white"
   151	                )} 
   152	              />
   153	            </Button>
   154	            
   155	            <Button
   156	              size="icon"
   157	              variant="ghost"
   158	              onClick={handleShare}
   159	              className="w-8 h-8 bg-black/70 hover:bg-black/80 text-white backdrop-blur-sm"
   160	            >
   161	              <Share2 size={16} />
   162	            </Button>
   163	          </div>
   164	        )}
   165	      </div>
   166	
   167	      {/* Content */}
   168	      <CardContent className="p-4">
   169	        {/* Title */}
   170	        <h3 className="text-white font-semibold text-lg mb-2 line-clamp-2">
   171	          {event.title}
   172	        </h3>
   173	        
   174	        {/* Event Details */}
   175	        <div className="space-y-2 text-sm text-white/70">
   176	          <div className="flex items-center space-x-2">
   177	            <Calendar size={14} />
   178	            <span>
   179	              {formatDate(event.date)}
   180	              {event.time && ` at ${formatTime(event.time)}`}
   181	            </span>
   182	          </div>
   183	          
   184	          {event.venue_name && (
   185	            <div className="flex items-center space-x-2">
   186	              <MapPin size={14} />
   187	              <span className="truncate">{event.venue_name}</span>
   188	            </div>
   189	          )}
   190	        </div>
   191	
   192	        {/* Price */}
   193	        <div className="mt-3 pt-3 border-t border-gray-800">
   194	          <div className="flex items-center justify-between">
   195	            <span className="text-white font-medium">
   196	              {formatPrice(event.price_min, event.price_max, event.is_free)}
   197	            </span>
   198	            
   199	            <Button size="sm" className="bg-purple-600 hover:bg-purple-700">
   200	              View Details
   201	            </Button>
   202	          </div>
   203	        </div>
   204	      </CardContent>
   205	    </Card>
   206	  )
   207	}
=== FILE: ./src/components/events/CategoryRow.tsx ===
     1	import { useEvents } from '@/hooks/useEvents'
     2	import { EventCard } from './EventCard'
     3	import { LoadingSpinner } from '@/components/ui/loading-spinner'
     4	import type { EventCategory } from '@/services/events.service'
     5	
     6	interface CategoryRowProps {
     7	  category: EventCategory
     8	  title: string
     9	  icon?: string
    10	}
    11	
    12	export function CategoryRow({ category, title, icon }: CategoryRowProps) {
    13	  const { data: events, isLoading, error } = useEvents({ 
    14	    categories: [category],
    15	    limit: 10
    16	  })
    17	
    18	  if (error) {
    19	    return (
    20	      <div className="p-4">
    21	        <h2 className="text-2xl font-bold text-white mb-4">{title}</h2>
    22	        <p className="text-white/60">Failed to load events</p>
    23	      </div>
    24	    )
    25	  }
    26	
    27	  return (
    28	    <section>
    29	      <div className="flex items-center justify-between mb-6">
    30	        <h2 className="text-2xl font-bold text-white flex items-center space-x-2">
    31	          {icon && <span className="text-2xl">{icon}</span>}
    32	          <span>{title}</span>
    33	        </h2>
    34	        
    35	        <button className="text-white/60 hover:text-white transition-colors">
    36	          See all
    37	        </button>
    38	      </div>
    39	
    40	      {isLoading ? (
    41	        <div className="flex justify-center py-12">
    42	          <LoadingSpinner />
    43	        </div>
    44	      ) : events?.length ? (
    45	        <div className="flex space-x-6 overflow-x-auto scrollbar-hide pb-4">
    46	          {events.map((event) => (
    47	            <EventCard
    48	              key={event.id}
    49	              event={event}
    50	              className="flex-shrink-0 w-80"
    51	            />
    52	          ))}
    53	        </div>
    54	      ) : (
    55	        <div className="text-center py-12 text-white/60">
    56	          <p>No events found in this category</p>
    57	        </div>
    58	      )}
    59	    </section>
    60	  )
    61	}
=== FILE: ./src/components/events/FeaturedBanner.tsx ===
     1	import { useState, useEffect } from 'react'
     2	import { ChevronLeft, ChevronRight, Play, Calendar, MapPin, Clock } from 'lucide-react'
     3	import { Button } from '@/components/ui/button'
     4	import { formatDate, formatTime, formatPrice } from '@/lib/utils'
     5	import { cn } from '@/lib/utils'
     6	
     7	interface Event {
     8	  id: string
     9	  title: string
    10	  description: string
    11	  date: string
    12	  time?: string
    13	  venue_name?: string
    14	  image_url?: string
    15	  video_url?: string
    16	  price_min?: number
    17	  price_max?: number
    18	  is_free?: boolean
    19	  category: string
    20	}
    21	
    22	interface FeaturedBannerProps {
    23	  events: Event[]
    24	}
    25	
    26	export function FeaturedBanner({ events }: FeaturedBannerProps) {
    27	  const [currentIndex, setCurrentIndex] = useState(0)
    28	  const [isVideoPlaying, setIsVideoPlaying] = useState(false)
    29	
    30	  const currentEvent = events[currentIndex]
    31	
    32	  // Auto-advance slides
    33	  useEffect(() => {
    34	    if (!isVideoPlaying && events.length > 1) {
    35	      const timer = setInterval(() => {
    36	        setCurrentIndex((prev) => (prev + 1) % events.length)
    37	      }, 8000)
    38	      return () => clearInterval(timer)
    39	    }
    40	  }, [events.length, isVideoPlaying])
    41	
    42	  const goToPrevious = () => {
    43	    setCurrentIndex((prev) => (prev - 1 + events.length) % events.length)
    44	  }
    45	
    46	  const goToNext = () => {
    47	    setCurrentIndex((prev) => (prev + 1) % events.length)
    48	  }
    49	
    50	  if (!currentEvent) return null
    51	
    52	  return (
    53	    <div className="relative h-[70vh] overflow-hidden">
    54	      {/* Background Image/Video */}
    55	      <div className="absolute inset-0">
    56	        {currentEvent.video_url && isVideoPlaying ? (
    57	          <video
    58	            className="w-full h-full object-cover"
    59	            src={currentEvent.video_url}
    60	            autoPlay
    61	            muted
    62	            loop
    63	            onEnded={() => setIsVideoPlaying(false)}
    64	          />
    65	        ) : (
    66	          <img
    67	            src={currentEvent.image_url || '/placeholder-event.jpg'}
    68	            alt={currentEvent.title}
    69	            className="w-full h-full object-cover"
    70	          />
    71	        )}
    72	        
    73	        {/* Overlay */}
    74	        <div className="absolute inset-0 bg-gradient-to-r from-black/80 via-black/40 to-transparent" />
    75	      </div>
    76	
    77	      {/* Content */}
    78	      <div className="relative h-full flex items-center">
    79	        <div className="max-w-7xl mx-auto px-8 w-full">
    80	          <div className="max-w-2xl">
    81	            {/* Category Badge */}
    82	            <div className="mb-4">
    83	              <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-white/20 text-white backdrop-blur-sm">
    84	                {currentEvent.category}
    85	              </span>
    86	            </div>
    87	
    88	            {/* Title */}
    89	            <h1 className="text-5xl md:text-6xl font-bold text-white mb-6 leading-tight">
    90	              {currentEvent.title}
    91	            </h1>
    92	
    93	            {/* Description */}
    94	            <p className="text-xl text-white/90 mb-8 leading-relaxed">
    95	              {currentEvent.description}
    96	            </p>
    97	
    98	            {/* Event Details */}
    99	            <div className="flex flex-wrap items-center gap-6 text-white/90 text-lg mb-8">
   100	              <div className="flex items-center space-x-2">
   101	                <Calendar size={20} />
   102	                <span>{formatDate(currentEvent.date)}</span>
   103	              </div>
   104	              
   105	              {currentEvent.time && (
   106	                <div className="flex items-center space-x-2">
   107	                  <Clock size={20} />
   108	                  <span>{formatTime(currentEvent.time)}</span>
   109	                </div>
   110	              )}
   111	              
   112	              {currentEvent.venue_name && (
   113	                <div className="flex items-center space-x-2">
   114	                  <MapPin size={20} />
   115	                  <span>{currentEvent.venue_name}</span>
   116	                </div>
   117	              )}
   118	            </div>
   119	
   120	            {/* Action Buttons */}
   121	            <div className="flex items-center space-x-4">
   122	              {currentEvent.video_url && !isVideoPlaying && (
   123	                <Button
   124	                  size="lg"
   125	                  onClick={() => setIsVideoPlaying(true)}
   126	                  className="bg-white text-black hover:bg-white/90"
   127	                >
   128	                  <Play size={20} className="mr-2" />
   129	                  Watch Preview
   130	                </Button>
   131	              )}
   132	              
   133	              <Button size="lg" variant="outline" className="border-white/30 text-white hover:bg-white/10">
   134	                Get Tickets
   135	              </Button>
   136	              
   137	              <div className="text-white/80">
   138	                {formatPrice(currentEvent.price_min, currentEvent.price_max, currentEvent.is_free)}
   139	              </div>
   140	            </div>
   141	          </div>
   142	        </div>
   143	      </div>
   144	
   145	      {/* Navigation */}
   146	      {events.length > 1 && (
   147	        <>
   148	          <Button
   149	            variant="ghost"
   150	            size="icon"
   151	            onClick={goToPrevious}
   152	            className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20"
   153	          >
   154	            <ChevronLeft size={24} />
   155	          </Button>
   156	          
   157	          <Button
   158	            variant="ghost"
   159	            size="icon"
   160	            onClick={goToNext}
   161	            className="absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20"
   162	          >
   163	            <ChevronRight size={24} />
   164	          </Button>
   165	        </>
   166	      )}
   167	
   168	      {/* Dots Indicator */}
   169	      {events.length > 1 && (
   170	        <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
   171	          <div className="flex space-x-2">
   172	            {events.map((_, index) => (
   173	              <button
   174	                key={index}
   175	                onClick={() => setCurrentIndex(index)}
   176	                className={cn(
   177	                  "w-3 h-3 rounded-full transition-colors",
   178	                  index === currentIndex
   179	                    ? "bg-white"
   180	                    : "bg-white/40 hover:bg-white/60"
   181	                )}
   182	              />
   183	            ))}
   184	          </div>
   185	        </div>
   186	      )}
   187	    </div>
   188	  )
   189	}
=== FILE: ./src/components/ui/button.tsx ===
     1	import * as React from "react"
     2	import { Slot } from "@radix-ui/react-slot"
     3	import { cva, type VariantProps } from "class-variance-authority"
     4	import { cn } from "@/lib/utils"
     5	
     6	const buttonVariants = cva(
     7	  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
     8	  {
     9	    variants: {
    10	      variant: {
    11	        default: "bg-primary text-primary-foreground hover:bg-primary/90",
    12	        destructive:
    13	          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
    14	        outline:
    15	          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
    16	        secondary:
    17	          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
    18	        ghost: "hover:bg-accent hover:text-accent-foreground",
    19	        link: "text-primary underline-offset-4 hover:underline",
    20	      },
    21	      size: {
    22	        default: "h-10 px-4 py-2",
    23	        sm: "h-9 rounded-md px-3",
    24	        lg: "h-11 rounded-md px-8",
    25	        icon: "h-10 w-10",
    26	      },
    27	    },
    28	    defaultVariants: {
    29	      variant: "default",
    30	      size: "default",
    31	    },
    32	  }
    33	)
    34	
    35	export interface ButtonProps
    36	  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    37	    VariantProps<typeof buttonVariants> {
    38	  asChild?: boolean
    39	}
    40	
    41	const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    42	  ({ className, variant, size, asChild = false, ...props }, ref) => {
    43	    const Comp = asChild ? Slot : "button"
    44	    return (
    45	      <Comp
    46	        className={cn(buttonVariants({ variant, size, className }))}
    47	        ref={ref}
    48	        {...props}
    49	      />
    50	    )
    51	  }
    52	)
    53	Button.displayName = "Button"
    54	
    55	export { Button, buttonVariants }
=== FILE: ./src/components/ui/card.tsx ===
     1	import * as React from "react"
     2	import { cn } from "@/lib/utils"
     3	
     4	const Card = React.forwardRef<
     5	  HTMLDivElement,
     6	  React.HTMLAttributes<HTMLDivElement>
     7	>(({ className, ...props }, ref) => (
     8	  <div
     9	    ref={ref}
    10	    className={cn(
    11	      "rounded-lg border bg-card text-card-foreground shadow-sm",
    12	      className
    13	    )}
    14	    {...props}
    15	  />
    16	))
    17	Card.displayName = "Card"
    18	
    19	const CardHeader = React.forwardRef<
    20	  HTMLDivElement,
    21	  React.HTMLAttributes<HTMLDivElement>
    22	>(({ className, ...props }, ref) => (
    23	  <div
    24	    ref={ref}
    25	    className={cn("flex flex-col space-y-1.5 p-6", className)}
    26	    {...props}
    27	  />
    28	))
    29	CardHeader.displayName = "CardHeader"
    30	
    31	const CardTitle = React.forwardRef<
    32	  HTMLParagraphElement,
    33	  React.HTMLAttributes<HTMLHeadingElement>
    34	>(({ className, ...props }, ref) => (
    35	  <h3
    36	    ref={ref}
    37	    className={cn(
    38	      "text-2xl font-semibold leading-none tracking-tight",
    39	      className
    40	    )}
    41	    {...props}
    42	  />
    43	))
    44	CardTitle.displayName = "CardTitle"
    45	
    46	const CardDescription = React.forwardRef<
    47	  HTMLParagraphElement,
    48	  React.HTMLAttributes<HTMLParagraphElement>
    49	>(({ className, ...props }, ref) => (
    50	  <p
    51	    ref={ref}
    52	    className={cn("text-sm text-muted-foreground", className)}
    53	    {...props}
    54	  />
    55	))
    56	CardDescription.displayName = "CardDescription"
    57	
    58	const CardContent = React.forwardRef<
    59	  HTMLDivElement,
    60	  React.HTMLAttributes<HTMLDivElement>
    61	>(({ className, ...props }, ref) => (
    62	  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
    63	))
    64	CardContent.displayName = "CardContent"
    65	
    66	const CardFooter = React.forwardRef<
    67	  HTMLDivElement,
    68	  React.HTMLAttributes<HTMLDivElement>
    69	>(({ className, ...props }, ref) => (
    70	  <div
    71	    ref={ref}
    72	    className={cn("flex items-center p-6 pt-0", className)}
    73	    {...props}
    74	  />
    75	))
    76	CardFooter.displayName = "CardFooter"
    77	
    78	export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
=== FILE: ./src/components/ui/loading-spinner.tsx ===
     1	import { cn } from '@/lib/utils'
     2	
     3	interface LoadingSpinnerProps {
     4	  size?: 'sm' | 'md' | 'lg'
     5	  className?: string
     6	}
     7	
     8	export function LoadingSpinner({ size = 'md', className }: LoadingSpinnerProps) {
     9	  const sizeClasses = {
    10	    sm: 'w-4 h-4',
    11	    md: 'w-8 h-8',
    12	    lg: 'w-12 h-12'
    13	  }
    14	
    15	  return (
    16	    <div className={cn('flex items-center justify-center', className)}>
    17	      <div className={cn(
    18	        'animate-spin rounded-full border-2 border-white/20 border-t-white',
    19	        sizeClasses[size]
    20	      )} />
    21	    </div>
    22	  )
    23	}
=== FILE: ./src/components/ui/toast.tsx ===
     1	import * as React from "react"
     2	import * as ToastPrimitives from "@radix-ui/react-toast"
     3	import { cva, type VariantProps } from "class-variance-authority"
     4	import { X } from "lucide-react"
     5	import { cn } from "@/lib/utils"
     6	
     7	const ToastProvider = ToastPrimitives.Provider
     8	
     9	const ToastViewport = React.forwardRef<
    10	  React.ElementRef<typeof ToastPrimitives.Viewport>,
    11	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
    12	>(({ className, ...props }, ref) => (
    13	  <ToastPrimitives.Viewport
    14	    ref={ref}
    15	    className={cn(
    16	      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
    17	      className
    18	    )}
    19	    {...props}
    20	  />
    21	))
    22	ToastViewport.displayName = ToastPrimitives.Viewport.displayName
    23	
    24	const toastVariants = cva(
    25	  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
    26	  {
    27	    variants: {
    28	      variant: {
    29	        default: "border bg-background text-foreground",
    30	        destructive:
    31	          "destructive group border-destructive bg-destructive text-destructive-foreground",
    32	      },
    33	    },
    34	    defaultVariants: {
    35	      variant: "default",
    36	    },
    37	  }
    38	)
    39	
    40	const Toast = React.forwardRef<
    41	  React.ElementRef<typeof ToastPrimitives.Root>,
    42	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    43	    VariantProps<typeof toastVariants>
    44	>(({ className, variant, ...props }, ref) => {
    45	  return (
    46	    <ToastPrimitives.Root
    47	      ref={ref}
    48	      className={cn(toastVariants({ variant }), className)}
    49	      {...props}
    50	    />
    51	  )
    52	})
    53	Toast.displayName = ToastPrimitives.Root.displayName
    54	
    55	const ToastAction = React.forwardRef<
    56	  React.ElementRef<typeof ToastPrimitives.Action>,
    57	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
    58	>(({ className, ...props }, ref) => (
    59	  <ToastPrimitives.Action
    60	    ref={ref}
    61	    className={cn(
    62	      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
    63	      className
    64	    )}
    65	    {...props}
    66	  />
    67	))
    68	ToastAction.displayName = ToastPrimitives.Action.displayName
    69	
    70	const ToastClose = React.forwardRef<
    71	  React.ElementRef<typeof ToastPrimitives.Close>,
    72	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
    73	>(({ className, ...props }, ref) => (
    74	  <ToastPrimitives.Close
    75	    ref={ref}
    76	    className={cn(
    77	      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
    78	      className
    79	    )}
    80	    toast-close=""
    81	    {...props}
    82	  >
    83	    <X className="h-4 w-4" />
    84	  </ToastPrimitives.Close>
    85	))
    86	ToastClose.displayName = ToastPrimitives.Close.displayName
    87	
    88	const ToastTitle = React.forwardRef<
    89	  React.ElementRef<typeof ToastPrimitives.Title>,
    90	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
    91	>(({ className, ...props }, ref) => (
    92	  <ToastPrimitives.Title
    93	    ref={ref}
    94	    className={cn("text-sm font-semibold", className)}
    95	    {...props}
    96	  />
    97	))
    98	ToastTitle.displayName = ToastPrimitives.Title.displayName
    99	
   100	const ToastDescription = React.forwardRef<
   101	  React.ElementRef<typeof ToastPrimitives.Description>,
   102	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
   103	>(({ className, ...props }, ref) => (
   104	  <ToastPrimitives.Description
   105	    ref={ref}
   106	    className={cn("text-sm opacity-90", className)}
   107	    {...props}
   108	  />
   109	))
   110	ToastDescription.displayName = ToastPrimitives.Description.displayName
   111	
   112	type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>
   113	
   114	type ToastActionElement = React.ReactElement<typeof ToastAction>
   115	
   116	export {
   117	  type ToastProps,
   118	  type ToastActionElement,
   119	  ToastProvider,
   120	  ToastViewport,
   121	  Toast,
   122	  ToastTitle,
   123	  ToastDescription,
   124	  ToastClose,
   125	  ToastAction,
   126	}
=== FILE: ./src/components/ui/toaster.tsx ===
     1	import {
     2	  Toast,
     3	  ToastClose,
     4	  ToastDescription,
     5	  ToastProvider,
     6	  ToastTitle,
     7	  ToastViewport,
     8	} from "@/components/ui/toast"
     9	import { useToast } from "@/hooks/useToast"
    10	
    11	export function Toaster() {
    12	  const { toasts } = useToast()
    13	
    14	  return (
    15	    <ToastProvider>
    16	      {toasts.map(function ({ id, title, description, action, ...props }) {
    17	        return (
    18	          <Toast key={id} {...props}>
    19	            <div className="grid gap-1">
    20	              {title && <ToastTitle>{title}</ToastTitle>}
    21	              {description && (
    22	                <ToastDescription>{description}</ToastDescription>
    23	              )}
    24	            </div>
    25	            {action}
    26	            <ToastClose />
    27	          </Toast>
    28	        )
    29	      })}
    30	      <ToastViewport />
    31	    </ToastProvider>
    32	  )
    33	}
=== FILE: ./src/pages/HomePage.tsx ===
     1	import { useFeaturedEvents } from '@/hooks/useEvents'
     2	import { FeaturedBanner } from '@/components/events/FeaturedBanner'
     3	import { CategoryRow } from '@/components/events/CategoryRow'
     4	import { LoadingSpinner } from '@/components/ui/loading-spinner'
     5	
     6	const categories = [
     7	  { id: 'music' as const, title: '🎵 Music Events', icon: '🎵' },
     8	  { id: 'sports' as const, title: '⚽ Sports & Recreation', icon: '⚽' },
     9	  { id: 'arts' as const, title: '🎨 Arts & Culture', icon: '🎨' },
    10	  { id: 'food' as const, title: '🍽️ Food & Drink', icon: '🍽️' },
    11	  { id: 'tech' as const, title: '💻 Tech & Innovation', icon: '💻' },
    12	  { id: 'social' as const, title: '👥 Social & Networking', icon: '👥' },
    13	]
    14	
    15	export function HomePage() {
    16	  const { data: featuredEvents, isLoading: featuredLoading, error: featuredError } = useFeaturedEvents(5)
    17	
    18	  if (featuredError) {
    19	    return (
    20	      <div className="p-8 text-center">
    21	        <h2 className="text-2xl font-bold text-white mb-4">Unable to load events</h2>
    22	        <p className="text-white/60">Please check your connection and try again.</p>
    23	      </div>
    24	    )
    25	  }
    26	
    27	  return (
    28	    <div className="min-h-screen bg-black">
    29	      {/* Featured Banner */}
    30	      <section className="relative">
    31	        {featuredLoading ? (
    32	          <div className="h-[70vh] flex items-center justify-center">
    33	            <LoadingSpinner size="lg" />
    34	          </div>
    35	        ) : featuredEvents?.length ? (
    36	          <FeaturedBanner events={featuredEvents} />
    37	        ) : (
    38	          <div className="h-[70vh] flex items-center justify-center bg-gradient-to-r from-purple-900/20 to-pink-900/20">
    39	            <div className="text-center">
    40	              <h2 className="text-4xl font-bold text-white mb-4">Welcome to SceneScout</h2>
    41	              <p className="text-white/80 text-lg">Discover amazing events in your city</p>
    42	            </div>
    43	          </div>
    44	        )}
    45	      </section>
    46	
    47	      {/* Category Rows */}
    48	      <section className="px-8 py-8 space-y-8">
    49	        {categories.map((category) => (
    50	          <CategoryRow
    51	            key={category.id}
    52	            category={category.id}
    53	            title={category.title}
    54	            icon={category.icon}
    55	          />
    56	        ))}
    57	      </section>
    58	    </div>
    59	  )
    60	}
=== FILE: ./src/pages/DiscoverPage.tsx ===
     1	import { useState } from 'react'
     2	import { Search, Filter, Sparkles, TrendingUp, Calendar, MapPin } from 'lucide-react'
     3	import { useEvents, useInfiniteEvents } from '@/hooks/useEvents'
     4	import { EventCard } from '@/components/events/EventCard'
     5	import { Button } from '@/components/ui/button'
     6	import { Input } from '@/components/ui/input'
     7	import { LoadingSpinner } from '@/components/ui/loading-spinner'
     8	import { cn } from '@/lib/utils'
     9	import type { EventCategory } from '@/services/events.service'
    10	
    11	const categories: { id: EventCategory; label: string; icon: string }[] = [
    12	  { id: 'all', label: 'All Events', icon: '🎉' },
    13	  { id: 'music', label: 'Music', icon: '🎵' },
    14	  { id: 'sports', label: 'Sports', icon: '⚽' },
    15	  { id: 'arts', label: 'Arts & Culture', icon: '🎨' },
    16	  { id: 'food', label: 'Food & Drink', icon: '🍽️' },
    17	  { id: 'tech', label: 'Technology', icon: '💻' },
    18	  { id: 'social', label: 'Social', icon: '👥' },
    19	  { id: 'business', label: 'Business', icon: '💼' },
    20	  { id: 'education', label: 'Education', icon: '📚' },
    21	  { id: 'family', label: 'Family', icon: '👨‍👩‍👧‍👦' }
    22	]
    23	
    24	const sortOptions = [
    25	  { id: 'relevance', label: 'Most Relevant', icon: <Sparkles size={16} /> },
    26	  { id: 'date', label: 'Date', icon: <Calendar size={16} /> },
    27	  { id: 'popular', label: 'Most Popular', icon: <TrendingUp size={16} /> },
    28	  { id: 'distance', label: 'Distance', icon: <MapPin size={16} /> }
    29	]
    30	
    31	export function DiscoverPage() {
    32	  const [selectedCategory, setSelectedCategory] = useState<EventCategory>('all')
    33	  const [searchQuery, setSearchQuery] = useState('')
    34	  const [sortBy, setSortBy] = useState('relevance')
    35	  const [showFilters, setShowFilters] = useState(false)
    36	
    37	  const {
    38	    data,
    39	    fetchNextPage,
    40	    hasNextPage,
    41	    isFetchingNextPage,
    42	    isLoading,
    43	    error
    44	  } = useInfiniteEvents({
    45	    categories: selectedCategory === 'all' ? undefined : [selectedCategory],
    46	    search: searchQuery || undefined,
    47	    sortBy: sortBy as any
    48	  })
    49	
    50	  const events = data?.pages.flatMap(page => page) ?? []
    51	
    52	  if (error) {
    53	    return (
    54	      <div className="h-full flex items-center justify-center">
    55	        <div className="text-center">
    56	          <h2 className="text-2xl font-bold text-white mb-4">Unable to load events</h2>
    57	          <p className="text-white/60">Please check your connection and try again.</p>
    58	        </div>
    59	      </div>
    60	    )
    61	  }
    62	
    63	  return (
    64	    <div className="min-h-screen bg-black">
    65	      {/* Hero Section */}
    66	      <div className="relative bg-gradient-to-r from-purple-900/20 to-pink-900/20 py-16">
    67	        <div className="max-w-7xl mx-auto px-8">
    68	          <div className="text-center">
    69	            <h1 className="text-5xl font-bold text-white mb-6">
    70	              Discover Amazing Events
    71	            </h1>
    72	            <p className="text-xl text-white/80 mb-8 max-w-2xl mx-auto">
    73	              Find the perfect events tailored to your interests and location
    74	            </p>
    75	            
    76	            {/* Search Bar */}
    77	            <div className="max-w-2xl mx-auto relative">
    78	              <Search size={24} className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white/40" />
    79	              <Input
    80	                placeholder="Search events, artists, venues..."
    81	                value={searchQuery}
    82	                onChange={(e) => setSearchQuery(e.target.value)}
    83	                className="pl-12 h-14 text-lg bg-white/10 border-white/20 text-white placeholder:text-white/40 backdrop-blur-sm"
    84	              />
    85	            </div>
    86	          </div>
    87	        </div>
    88	      </div>
    89	
    90	      <div className="max-w-7xl mx-auto px-8 py-8">
    91	        {/* Filters & Controls */}
    92	        <div className="mb-8">
    93	          {/* Category Filters */}
    94	          <div className="flex flex-wrap gap-3 mb-6">
    95	            {categories.map((category) => (
    96	              <button
    97	                key={category.id}
    98	                onClick={() => setSelectedCategory(category.id)}
    99	                className={cn(
   100	                  "px-4 py-2 rounded-full text-sm font-medium transition-colors flex items-center space-x-2",
   101	                  selectedCategory === category.id
   102	                    ? "bg-purple-600 text-white"
   103	                    : "bg-gray-800 text-white/70 hover:bg-gray-700 hover:text-white"
   104	                )}
   105	              >
   106	                <span>{category.icon}</span>
   107	                <span>{category.label}</span>
   108	              </button>
   109	            ))}
   110	          </div>
   111	
   112	          {/* Sort & Filter Controls */}
   113	          <div className="flex items-center justify-between">
   114	            <div className="flex items-center space-x-4">
   115	              <div className="flex items-center space-x-2">
   116	                <span className="text-white/60 text-sm">Sort by:</span>
   117	                <div className="flex bg-gray-800 rounded-lg p-1">
   118	                  {sortOptions.map((option) => (
   119	                    <button
   120	                      key={option.id}
   121	                      onClick={() => setSortBy(option.id)}
   122	                      className={cn(
   123	                        "px-3 py-1 rounded text-sm flex items-center space-x-1 transition-colors",
   124	                        sortBy === option.id
   125	                          ? "bg-purple-600 text-white"
   126	                          : "text-white/70 hover:text-white"
   127	                      )}
   128	                    >
   129	                      {option.icon}
   130	                      <span>{option.label}</span>
   131	                    </button>
   132	                  ))}
   133	                </div>
   134	              </div>
   135	
   136	              <Button
   137	                variant="ghost"
   138	                size="sm"
   139	                onClick={() => setShowFilters(!showFilters)}
   140	                className="text-white/60 hover:text-white"
   141	              >
   142	                <Filter size={16} className="mr-2" />
   143	                More Filters
   144	              </Button>
   145	            </div>
   146	
   147	            <div className="text-sm text-white/60">
   148	              {isLoading ? 'Loading...' : `${events.length} events found`}
   149	            </div>
   150	          </div>
   151	
   152	          {/* Advanced Filters (Hidden by default) */}
   153	          {showFilters && (
   154	            <div className="mt-4 p-4 bg-gray-800/50 rounded-lg">
   155	              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   156	                <div>
   157	                  <label className="text-white/60 text-sm mb-2 block">Date Range</label>
   158	                  <div className="flex space-x-2">
   159	                    <Input
   160	                      type="date"
   161	                      className="bg-gray-800 border-gray-700 text-white"
   162	                    />
   163	                    <Input
   164	                      type="date"
   165	                      className="bg-gray-800 border-gray-700 text-white"
   166	                    />
   167	                  </div>
   168	                </div>
   169	                <div>
   170	                  <label className="text-white/60 text-sm mb-2 block">Price Range</label>
   171	                  <div className="flex space-x-2">
   172	                    <Input
   173	                      placeholder="Min"
   174	                      className="bg-gray-800 border-gray-700 text-white"
   175	                    />
   176	                    <Input
   177	                      placeholder="Max"
   178	                      className="bg-gray-800 border-gray-700 text-white"
   179	                    />
   180	                  </div>
   181	                </div>
   182	                <div>
   183	                  <label className="text-white/60 text-sm mb-2 block">Distance</label>
   184	                  <Input
   185	                    placeholder="Within miles"
   186	                    className="bg-gray-800 border-gray-700 text-white"
   187	                  />
   188	                </div>
   189	              </div>
   190	            </div>
   191	          )}
   192	        </div>
   193	
   194	        {/* Events Grid */}
   195	        {isLoading ? (
   196	          <div className="flex justify-center py-12">
   197	            <LoadingSpinner size="lg" />
   198	          </div>
   199	        ) : events.length === 0 ? (
   200	          <div className="text-center py-12 text-white/60">
   201	            <Sparkles size={48} className="mx-auto mb-4" />
   202	            <h3 className="text-xl font-medium mb-2">No events found</h3>
   203	            <p>Try adjusting your search criteria or browse different categories</p>
   204	          </div>
   205	        ) : (
   206	          <>
   207	            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
   208	              {events.map((event) => (
   209	                <EventCard
   210	                  key={event.id}
   211	                  event={event}
   212	                  size="small"
   213	                />
   214	              ))}
   215	            </div>
   216	
   217	            {/* Load More Button */}
   218	            {hasNextPage && (
   219	              <div className="text-center mt-12">
   220	                <Button
   221	                  onClick={() => fetchNextPage()}
   222	                  disabled={isFetchingNextPage}
   223	                  size="lg"
   224	                  className="bg-purple-600 hover:bg-purple-700"
   225	                >
   226	                  {isFetchingNextPage ? (
   227	                    <>
   228	                      <LoadingSpinner size="sm" className="mr-2" />
   229	                      Loading more...
   230	                    </>
   231	                  ) : (
   232	                    'Load More Events'
   233	                  )}
   234	                </Button>
   235	              </div>
   236	            )}
   237	          </>
   238	        )}
   239	      </div>
   240	    </div>
   241	  )
   242	}
=== FILE: ./src/pages/EventDetailsPage.tsx ===
     1	export function EventDetailsPage() {
     2	  return (
     3	    <div className="h-full flex items-center justify-center">
     4	      <div className="text-center">
     5	        <h1 className="text-3xl font-bold text-white mb-4">Event Details</h1>
     6	        <p className="text-white/60">Event details coming soon...</p>
     7	      </div>
     8	    </div>
     9	  )
    10	}
=== FILE: ./src/pages/MapPage.tsx ===
     1	import { useState, useMemo } from 'react'
     2	import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'
     3	import { LatLngExpression } from 'leaflet'
     4	import { Search, Filter, Grid, List, MapPin } from 'lucide-react'
     5	import { useEvents } from '@/hooks/useEvents'
     6	import { EventCard } from '@/components/events/EventCard'
     7	import { Button } from '@/components/ui/button'
     8	import { Input } from '@/components/ui/input'
     9	import { LoadingSpinner } from '@/components/ui/loading-spinner'
    10	import { cn } from '@/lib/utils'
    11	import 'leaflet/dist/leaflet.css'
    12	
    13	// Fix for default markers in react-leaflet
    14	import L from 'leaflet'
    15	import markerIcon from 'leaflet/dist/images/marker-icon.png'
    16	import markerShadow from 'leaflet/dist/images/marker-shadow.png'
    17	
    18	const DefaultIcon = L.icon({
    19	  iconUrl: markerIcon,
    20	  shadowUrl: markerShadow,
    21	  iconSize: [25, 41],
    22	  iconAnchor: [12, 41],
    23	  popupAnchor: [1, -34],
    24	  shadowSize: [41, 41]
    25	})
    26	
    27	L.Marker.prototype.options.icon = DefaultIcon
    28	
    29	interface Event {
    30	  id: string
    31	  title: string
    32	  description: string
    33	  date: string
    34	  time?: string
    35	  venue_name?: string
    36	  venue_address?: string
    37	  latitude?: number
    38	  longitude?: number
    39	  image_url?: string
    40	  video_url?: string
    41	  price_min?: number
    42	  price_max?: number
    43	  is_free?: boolean
    44	  category: string
    45	}
    46	
    47	export function MapPage() {
    48	  const [viewMode, setViewMode] = useState<'split' | 'map' | 'list'>('split')
    49	  const [searchQuery, setSearchQuery] = useState('')
    50	  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null)
    51	  const [mapCenter, setMapCenter] = useState<LatLngExpression>([37.7749, -122.4194]) // San Francisco
    52	  
    53	  const { data: events = [], isLoading, error } = useEvents({ limit: 50 })
    54	
    55	  // Filter events with location data
    56	  const eventsWithLocation = useMemo(() => {
    57	    return events.filter(event => 
    58	      event.latitude && 
    59	      event.longitude && 
    60	      (!searchQuery || 
    61	        event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    62	        event.venue_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    63	        event.description.toLowerCase().includes(searchQuery.toLowerCase())
    64	      )
    65	    )
    66	  }, [events, searchQuery])
    67	
    68	  if (error) {
    69	    return (
    70	      <div className="h-full flex items-center justify-center">
    71	        <div className="text-center">
    72	          <h2 className="text-2xl font-bold text-white mb-4">Unable to load map</h2>
    73	          <p className="text-white/60">Please check your connection and try again.</p>
    74	        </div>
    75	      </div>
    76	    )
    77	  }
    78	
    79	  const renderMapView = () => (
    80	    <div className="h-full relative">
    81	      <MapContainer
    82	        center={mapCenter}
    83	        zoom={12}
    84	        className="h-full w-full"
    85	        zoomControl={true}
    86	      >
    87	        <TileLayer
    88	          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    89	          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
    90	        />
    91	        {eventsWithLocation.map((event) => (
    92	          <Marker
    93	            key={event.id}
    94	            position={[event.latitude!, event.longitude!]}
    95	            eventHandlers={{
    96	              click: () => setSelectedEvent(event)
    97	            }}
    98	          >
    99	            <Popup>
   100	              <div className="p-2 min-w-[200px]">
   101	                <h3 className="font-semibold text-sm mb-1">{event.title}</h3>
   102	                <p className="text-xs text-gray-600 mb-2">{event.venue_name}</p>
   103	                <p className="text-xs text-gray-500 mb-2">{new Date(event.date).toLocaleDateString()}</p>
   104	                <Button 
   105	                  size="sm" 
   106	                  onClick={() => setSelectedEvent(event)}
   107	                  className="w-full"
   108	                >
   109	                  View Details
   110	                </Button>
   111	              </div>
   112	            </Popup>
   113	          </Marker>
   114	        ))}
   115	      </MapContainer>
   116	    </div>
   117	  )
   118	
   119	  const renderListView = () => (
   120	    <div className="h-full overflow-y-auto bg-black p-4">
   121	      {isLoading ? (
   122	        <div className="flex justify-center py-12">
   123	          <LoadingSpinner size="lg" />
   124	        </div>
   125	      ) : eventsWithLocation.length === 0 ? (
   126	        <div className="text-center py-12 text-white/60">
   127	          <MapPin size={48} className="mx-auto mb-4" />
   128	          <p>No events found with location data</p>
   129	          {searchQuery && (
   130	            <p className="text-sm mt-2">Try adjusting your search terms</p>
   131	          )}
   132	        </div>
   133	      ) : (
   134	        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
   135	          {eventsWithLocation.map((event) => (
   136	            <EventCard
   137	              key={event.id}
   138	              event={event}
   139	              size="small"
   140	              className={cn(
   141	                "cursor-pointer transition-all",
   142	                selectedEvent?.id === event.id && "ring-2 ring-purple-500"
   143	              )}
   144	              onClick={() => setSelectedEvent(event)}
   145	            />
   146	          ))}
   147	        </div>
   148	      )}
   149	    </div>
   150	  )
   151	
   152	  return (
   153	    <div className="h-full flex flex-col bg-black">
   154	      {/* Header */}
   155	      <div className="flex-shrink-0 p-4 border-b border-gray-800">
   156	        <div className="flex items-center justify-between">
   157	          {/* Search */}
   158	          <div className="flex items-center space-x-4 flex-1">
   159	            <div className="relative max-w-md">
   160	              <Search size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/40" />
   161	              <Input
   162	                placeholder="Search events, venues..."
   163	                value={searchQuery}
   164	                onChange={(e) => setSearchQuery(e.target.value)}
   165	                className="pl-10 bg-gray-900 border-gray-700 text-white placeholder:text-white/40"
   166	              />
   167	            </div>
   168	            
   169	            <Button variant="ghost" size="sm" className="text-white/60 hover:text-white">
   170	              <Filter size={16} className="mr-2" />
   171	              Filters
   172	            </Button>
   173	          </div>
   174	
   175	          {/* View Mode Toggle */}
   176	          <div className="flex items-center bg-gray-900 rounded-lg p-1">
   177	            <Button
   178	              variant={viewMode === 'list' ? 'default' : 'ghost'}
   179	              size="sm"
   180	              onClick={() => setViewMode('list')}
   181	              className="h-8"
   182	            >
   183	              <List size={16} />
   184	            </Button>
   185	            <Button
   186	              variant={viewMode === 'split' ? 'default' : 'ghost'}
   187	              size="sm"
   188	              onClick={() => setViewMode('split')}
   189	              className="h-8"
   190	            >
   191	              <Grid size={16} />
   192	            </Button>
   193	            <Button
   194	              variant={viewMode === 'map' ? 'default' : 'ghost'}
   195	              size="sm"
   196	              onClick={() => setViewMode('map')}
   197	              className="h-8"
   198	            >
   199	              <MapPin size={16} />
   200	            </Button>
   201	          </div>
   202	        </div>
   203	
   204	        {/* Results Count */}
   205	        <div className="mt-3 text-sm text-white/60">
   206	          {isLoading ? 'Loading...' : `${eventsWithLocation.length} events found`}
   207	        </div>
   208	      </div>
   209	
   210	      {/* Content */}
   211	      <div className="flex-1 overflow-hidden">
   212	        {viewMode === 'map' ? (
   213	          renderMapView()
   214	        ) : viewMode === 'list' ? (
   215	          renderListView()
   216	        ) : (
   217	          // Split view
   218	          <div className="h-full flex">
   219	            {/* List Side */}
   220	            <div className="w-1/2 border-r border-gray-800">
   221	              {renderListView()}
   222	            </div>
   223	            
   224	            {/* Map Side */}
   225	            <div className="w-1/2">
   226	              {renderMapView()}
   227	            </div>
   228	          </div>
   229	        )}
   230	      </div>
   231	
   232	      {/* Selected Event Details Modal */}
   233	      {selectedEvent && (
   234	        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
   235	          <div className="bg-gray-900 rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
   236	            <div className="p-6">
   237	              <div className="flex justify-between items-start mb-4">
   238	                <h2 className="text-2xl font-bold text-white">{selectedEvent.title}</h2>
   239	                <Button
   240	                  variant="ghost"
   241	                  size="sm"
   242	                  onClick={() => setSelectedEvent(null)}
   243	                  className="text-white/60 hover:text-white"
   244	                >
   245	                  ✕
   246	                </Button>
   247	              </div>
   248	              
   249	              {selectedEvent.image_url && (
   250	                <img
   251	                  src={selectedEvent.image_url}
   252	                  alt={selectedEvent.title}
   253	                  className="w-full h-48 object-cover rounded-lg mb-4"
   254	                />
   255	              )}
   256	              
   257	              <div className="space-y-4 text-white">
   258	                <p className="text-white/80">{selectedEvent.description}</p>
   259	                
   260	                <div className="grid grid-cols-2 gap-4 text-sm">
   261	                  <div>
   262	                    <span className="text-white/60">Date:</span>
   263	                    <p>{new Date(selectedEvent.date).toLocaleDateString()}</p>
   264	                  </div>
   265	                  {selectedEvent.time && (
   266	                    <div>
   267	                      <span className="text-white/60">Time:</span>
   268	                      <p>{selectedEvent.time}</p>
   269	                    </div>
   270	                  )}
   271	                  <div>
   272	                    <span className="text-white/60">Venue:</span>
   273	                    <p>{selectedEvent.venue_name}</p>
   274	                  </div>
   275	                  <div>
   276	                    <span className="text-white/60">Category:</span>
   277	                    <p className="capitalize">{selectedEvent.category}</p>
   278	                  </div>
   279	                </div>
   280	
   281	                {selectedEvent.venue_address && (
   282	                  <div>
   283	                    <span className="text-white/60">Address:</span>
   284	                    <p className="text-sm">{selectedEvent.venue_address}</p>
   285	                  </div>
   286	                )}
   287	
   288	                <div className="flex space-x-4 pt-4">
   289	                  <Button className="bg-purple-600 hover:bg-purple-700">
   290	                    Get Tickets
   291	                  </Button>
   292	                  <Button variant="outline" className="border-white/30 text-white hover:bg-white/10">
   293	                    Save Event
   294	                  </Button>
   295	                </div>
   296	              </div>
   297	            </div>
   298	          </div>
   299	        </div>
   300	      )}
   301	    </div>
   302	  )
   303	}
=== FILE: ./src/pages/PlanPage.tsx ===
     1	export function PlanPage() {
     2	  return (
     3	    <div className="h-full flex items-center justify-center">
     4	      <div className="text-center">
     5	        <h1 className="text-3xl font-bold text-white mb-4">Plan</h1>
     6	        <p className="text-white/60">Create and manage your event plans...</p>
     7	      </div>
     8	    </div>
     9	  )
    10	}
=== FILE: ./src/pages/ProfilePage.tsx ===
     1	export function ProfilePage() {
     2	  return (
     3	    <div className="h-full flex items-center justify-center">
     4	      <div className="text-center">
     5	        <h1 className="text-3xl font-bold text-white mb-4">Profile</h1>
     6	        <p className="text-white/60">User profile and settings...</p>
     7	      </div>
     8	    </div>
     9	  )
    10	}
=== FILE: ./src/pages/SavedPage.tsx ===
     1	import { useState } from 'react'
     2	import { Heart, Calendar, MapPin, Share2, Trash2, Filter, Search } from 'lucide-react'
     3	import { useSavedEvents } from '@/hooks/useEvents'
     4	import { EventCard } from '@/components/events/EventCard'
     5	import { Button } from '@/components/ui/button'
     6	import { Input } from '@/components/ui/input'
     7	import { LoadingSpinner } from '@/components/ui/loading-spinner'
     8	import { cn } from '@/lib/utils'
     9	
    10	const viewModes = ['grid', 'list'] as const
    11	type ViewMode = typeof viewModes[number]
    12	
    13	const sortOptions = [
    14	  { id: 'saved_date', label: 'Recently Saved' },
    15	  { id: 'event_date', label: 'Event Date' },
    16	  { id: 'title', label: 'Title' },
    17	  { id: 'category', label: 'Category' }
    18	]
    19	
    20	export function SavedPage() {
    21	  const [viewMode, setViewMode] = useState<ViewMode>('grid')
    22	  const [searchQuery, setSearchQuery] = useState('')
    23	  const [sortBy, setSortBy] = useState('saved_date')
    24	  const [selectedEvents, setSelectedEvents] = useState<string[]>([])
    25	
    26	  const { data: savedEvents = [], isLoading, error } = useSavedEvents()
    27	
    28	  // Filter and sort events
    29	  const filteredEvents = savedEvents
    30	    .filter(event => {
    31	      if (!searchQuery) return true
    32	      return (
    33	        event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    34	        event.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
    35	        event.venue_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    36	        event.category.toLowerCase().includes(searchQuery.toLowerCase())
    37	      )
    38	    })
    39	    .sort((a, b) => {
    40	      switch (sortBy) {
    41	        case 'event_date':
    42	          return new Date(a.date).getTime() - new Date(b.date).getTime()
    43	        case 'title':
    44	          return a.title.localeCompare(b.title)
    45	        case 'category':
    46	          return a.category.localeCompare(b.category)
    47	        default: // saved_date
    48	          return new Date(b.saved_at || b.date).getTime() - new Date(a.saved_at || a.date).getTime()
    49	      }
    50	    })
    51	
    52	  const toggleEventSelection = (eventId: string) => {
    53	    setSelectedEvents(prev => 
    54	      prev.includes(eventId)
    55	        ? prev.filter(id => id !== eventId)
    56	        : [...prev, eventId]
    57	    )
    58	  }
    59	
    60	  const selectAllEvents = () => {
    61	    setSelectedEvents(
    62	      selectedEvents.length === filteredEvents.length 
    63	        ? [] 
    64	        : filteredEvents.map(event => event.id)
    65	    )
    66	  }
    67	
    68	  if (error) {
    69	    return (
    70	      <div className="h-full flex items-center justify-center">
    71	        <div className="text-center">
    72	          <h2 className="text-2xl font-bold text-white mb-4">Unable to load saved events</h2>
    73	          <p className="text-white/60">Please check your connection and try again.</p>
    74	        </div>
    75	      </div>
    76	    )
    77	  }
    78	
    79	  return (
    80	    <div className="min-h-screen bg-black">
    81	      {/* Header */}
    82	      <div className="border-b border-gray-800 bg-black/50 backdrop-blur-sm sticky top-0 z-10">
    83	        <div className="max-w-7xl mx-auto px-8 py-6">
    84	          <div className="flex items-center justify-between mb-6">
    85	            <div>
    86	              <h1 className="text-4xl font-bold text-white flex items-center">
    87	                <Heart className="mr-3 text-red-500" size={32} />
    88	                Saved Events
    89	              </h1>
    90	              <p className="text-white/60 mt-2">
    91	                {isLoading ? 'Loading...' : `${filteredEvents.length} saved events`}
    92	              </p>
    93	            </div>
    94	
    95	            {/* View Mode Toggle */}
    96	            <div className="flex items-center bg-gray-800 rounded-lg p-1">
    97	              <button
    98	                onClick={() => setViewMode('grid')}
    99	                className={cn(
   100	                  "px-3 py-2 rounded text-sm transition-colors",
   101	                  viewMode === 'grid'
   102	                    ? "bg-purple-600 text-white"
   103	                    : "text-white/70 hover:text-white"
   104	                )}
   105	              >
   106	                Grid
   107	              </button>
   108	              <button
   109	                onClick={() => setViewMode('list')}
   110	                className={cn(
   111	                  "px-3 py-2 rounded text-sm transition-colors",
   112	                  viewMode === 'list'
   113	                    ? "bg-purple-600 text-white"
   114	                    : "text-white/70 hover:text-white"
   115	                )}
   116	              >
   117	                List
   118	              </button>
   119	            </div>
   120	          </div>
   121	
   122	          {/* Search and Controls */}
   123	          <div className="flex items-center justify-between">
   124	            <div className="flex items-center space-x-4 flex-1">
   125	              <div className="relative max-w-md">
   126	                <Search size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/40" />
   127	                <Input
   128	                  placeholder="Search saved events..."
   129	                  value={searchQuery}
   130	                  onChange={(e) => setSearchQuery(e.target.value)}
   131	                  className="pl-10 bg-gray-800 border-gray-700 text-white placeholder:text-white/40"
   132	                />
   133	              </div>
   134	
   135	              <div className="flex items-center space-x-2">
   136	                <span className="text-white/60 text-sm">Sort by:</span>
   137	                <select
   138	                  value={sortBy}
   139	                  onChange={(e) => setSortBy(e.target.value)}
   140	                  className="bg-gray-800 border-gray-700 text-white rounded px-3 py-1 text-sm"
   141	                >
   142	                  {sortOptions.map((option) => (
   143	                    <option key={option.id} value={option.id}>
   144	                      {option.label}
   145	                    </option>
   146	                  ))}
   147	                </select>
   148	              </div>
   149	            </div>
   150	
   151	            {/* Bulk Actions */}
   152	            {selectedEvents.length > 0 && (
   153	              <div className="flex items-center space-x-2">
   154	                <span className="text-white/60 text-sm">
   155	                  {selectedEvents.length} selected
   156	                </span>
   157	                <Button
   158	                  variant="outline"
   159	                  size="sm"
   160	                  className="border-red-500 text-red-500 hover:bg-red-500 hover:text-white"
   161	                >
   162	                  <Trash2 size={16} className="mr-2" />
   163	                  Remove Selected
   164	                </Button>
   165	                <Button
   166	                  variant="outline"
   167	                  size="sm"
   168	                  className="border-white/30 text-white hover:bg-white/10"
   169	                >
   170	                  <Share2 size={16} className="mr-2" />
   171	                  Share Selected
   172	                </Button>
   173	              </div>
   174	            )}
   175	          </div>
   176	
   177	          {filteredEvents.length > 0 && (
   178	            <div className="mt-4 flex items-center">
   179	              <button
   180	                onClick={selectAllEvents}
   181	                className="text-sm text-purple-400 hover:text-purple-300 transition-colors"
   182	              >
   183	                {selectedEvents.length === filteredEvents.length ? 'Deselect All' : 'Select All'}
   184	              </button>
   185	            </div>
   186	          )}
   187	        </div>
   188	      </div>
   189	
   190	      {/* Content */}
   191	      <div className="max-w-7xl mx-auto px-8 py-8">
   192	        {isLoading ? (
   193	          <div className="flex justify-center py-12">
   194	            <LoadingSpinner size="lg" />
   195	          </div>
   196	        ) : filteredEvents.length === 0 ? (
   197	          <div className="text-center py-16">
   198	            <Heart size={64} className="mx-auto mb-6 text-gray-600" />
   199	            <h3 className="text-2xl font-bold text-white mb-4">
   200	              {savedEvents.length === 0 ? 'No saved events yet' : 'No events match your search'}
   201	            </h3>
   202	            <p className="text-white/60 mb-8 max-w-md mx-auto">
   203	              {savedEvents.length === 0 
   204	                ? 'Start exploring events and save your favorites to see them here'
   205	                : 'Try adjusting your search terms to find your saved events'
   206	              }
   207	            </p>
   208	            {savedEvents.length === 0 && (
   209	              <Button className="bg-purple-600 hover:bg-purple-700">
   210	                Discover Events
   211	              </Button>
   212	            )}
   213	          </div>
   214	        ) : (
   215	          <>
   216	            {viewMode === 'grid' ? (
   217	              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
   218	                {filteredEvents.map((event) => (
   219	                  <div key={event.id} className="relative">
   220	                    <EventCard
   221	                      event={event}
   222	                      size="small"
   223	                      className={cn(
   224	                        selectedEvents.includes(event.id) && "ring-2 ring-purple-500"
   225	                      )}
   226	                    />
   227	                    <button
   228	                      onClick={() => toggleEventSelection(event.id)}
   229	                      className="absolute top-3 left-3 z-10 w-6 h-6 rounded-full border-2 border-white bg-black/50 backdrop-blur-sm flex items-center justify-center hover:bg-purple-600 transition-colors"
   230	                    >
   231	                      {selectedEvents.includes(event.id) && (
   232	                        <div className="w-3 h-3 bg-purple-600 rounded-full" />
   233	                      )}
   234	                    </button>
   235	                  </div>
   236	                ))}
   237	              </div>
   238	            ) : (
   239	              <div className="space-y-4">
   240	                {filteredEvents.map((event) => (
   241	                  <div
   242	                    key={event.id}
   243	                    className={cn(
   244	                      "flex bg-gray-900 rounded-lg overflow-hidden border border-gray-800 hover:border-gray-700 transition-colors",
   245	                      selectedEvents.includes(event.id) && "border-purple-500"
   246	                    )}
   247	                  >
   248	                    <button
   249	                      onClick={() => toggleEventSelection(event.id)}
   250	                      className="p-4 flex items-center justify-center hover:bg-gray-800 transition-colors"
   251	                    >
   252	                      <div className={cn(
   253	                        "w-5 h-5 rounded-full border-2 border-white/30 flex items-center justify-center",
   254	                        selectedEvents.includes(event.id) && "bg-purple-600 border-purple-600"
   255	                      )}>
   256	                        {selectedEvents.includes(event.id) && (
   257	                          <div className="w-2 h-2 bg-white rounded-full" />
   258	                        )}
   259	                      </div>
   260	                    </button>
   261	
   262	                    <div className="w-48 h-32 flex-shrink-0">
   263	                      <img
   264	                        src={event.image_url || '/placeholder-event.jpg'}
   265	                        alt={event.title}
   266	                        className="w-full h-full object-cover"
   267	                      />
   268	                    </div>
   269	
   270	                    <div className="flex-1 p-4">
   271	                      <div className="flex justify-between items-start mb-2">
   272	                        <h3 className="text-lg font-semibold text-white line-clamp-1">
   273	                          {event.title}
   274	                        </h3>
   275	                        <span className="text-xs text-white/60 bg-gray-800 px-2 py-1 rounded-full">
   276	                          {event.category}
   277	                        </span>
   278	                      </div>
   279	
   280	                      <p className="text-white/70 text-sm mb-3 line-clamp-2">
   281	                        {event.description}
   282	                      </p>
   283	
   284	                      <div className="flex items-center justify-between">
   285	                        <div className="space-y-1">
   286	                          <div className="flex items-center text-white/60 text-sm">
   287	                            <Calendar size={14} className="mr-2" />
   288	                            <span>{new Date(event.date).toLocaleDateString()}</span>
   289	                          </div>
   290	                          {event.venue_name && (
   291	                            <div className="flex items-center text-white/60 text-sm">
   292	                              <MapPin size={14} className="mr-2" />
   293	                              <span className="truncate">{event.venue_name}</span>
   294	                            </div>
   295	                          )}
   296	                        </div>
   297	
   298	                        <div className="flex space-x-2">
   299	                          <Button size="sm" variant="outline" className="border-white/30 text-white hover:bg-white/10">
   300	                            View Details
   301	                          </Button>
   302	                          <Button size="sm" className="bg-purple-600 hover:bg-purple-700">
   303	                            Get Tickets
   304	                          </Button>
   305	                        </div>
   306	                      </div>
   307	                    </div>
   308	                  </div>
   309	                ))}
   310	              </div>
   311	            )}
   312	          </>
   313	        )}
   314	      </div>
   315	    </div>
   316	  )
   317	}
=== FILE: ./public/mockServiceWorker.js ===
     1	/* eslint-disable */
     2	/* tslint:disable */
     3	
     4	/**
     5	 * Mock Service Worker.
     6	 * @see https://github.com/mswjs/msw
     7	 * - Please do NOT modify this file.
     8	 */
     9	
    10	const PACKAGE_VERSION = '2.11.2'
    11	const INTEGRITY_CHECKSUM = '4db4a41e972cec1b64cc569c66952d82'
    12	const IS_MOCKED_RESPONSE = Symbol('isMockedResponse')
    13	const activeClientIds = new Set()
    14	
    15	addEventListener('install', function () {
    16	  self.skipWaiting()
    17	})
    18	
    19	addEventListener('activate', function (event) {
    20	  event.waitUntil(self.clients.claim())
    21	})
    22	
    23	addEventListener('message', async function (event) {
    24	  const clientId = Reflect.get(event.source || {}, 'id')
    25	
    26	  if (!clientId || !self.clients) {
    27	    return
    28	  }
    29	
    30	  const client = await self.clients.get(clientId)
    31	
    32	  if (!client) {
    33	    return
    34	  }
    35	
    36	  const allClients = await self.clients.matchAll({
    37	    type: 'window',
    38	  })
    39	
    40	  switch (event.data) {
    41	    case 'KEEPALIVE_REQUEST': {
    42	      sendToClient(client, {
    43	        type: 'KEEPALIVE_RESPONSE',
    44	      })
    45	      break
    46	    }
    47	
    48	    case 'INTEGRITY_CHECK_REQUEST': {
    49	      sendToClient(client, {
    50	        type: 'INTEGRITY_CHECK_RESPONSE',
    51	        payload: {
    52	          packageVersion: PACKAGE_VERSION,
    53	          checksum: INTEGRITY_CHECKSUM,
    54	        },
    55	      })
    56	      break
    57	    }
    58	
    59	    case 'MOCK_ACTIVATE': {
    60	      activeClientIds.add(clientId)
    61	
    62	      sendToClient(client, {
    63	        type: 'MOCKING_ENABLED',
    64	        payload: {
    65	          client: {
    66	            id: client.id,
    67	            frameType: client.frameType,
    68	          },
    69	        },
    70	      })
    71	      break
    72	    }
    73	
    74	    case 'CLIENT_CLOSED': {
    75	      activeClientIds.delete(clientId)
    76	
    77	      const remainingClients = allClients.filter((client) => {
    78	        return client.id !== clientId
    79	      })
    80	
    81	      // Unregister itself when there are no more clients
    82	      if (remainingClients.length === 0) {
    83	        self.registration.unregister()
    84	      }
    85	
    86	      break
    87	    }
    88	  }
    89	})
    90	
    91	addEventListener('fetch', function (event) {
    92	  const requestInterceptedAt = Date.now()
    93	
    94	  // Bypass navigation requests.
    95	  if (event.request.mode === 'navigate') {
    96	    return
    97	  }
    98	
    99	  // Opening the DevTools triggers the "only-if-cached" request
   100	  // that cannot be handled by the worker. Bypass such requests.
   101	  if (
   102	    event.request.cache === 'only-if-cached' &&
   103	    event.request.mode !== 'same-origin'
   104	  ) {
   105	    return
   106	  }
   107	
   108	  // Bypass all requests when there are no active clients.
   109	  // Prevents the self-unregistered worked from handling requests
   110	  // after it's been terminated (still remains active until the next reload).
   111	  if (activeClientIds.size === 0) {
   112	    return
   113	  }
   114	
   115	  const requestId = crypto.randomUUID()
   116	  event.respondWith(handleRequest(event, requestId, requestInterceptedAt))
   117	})
   118	
   119	/**
   120	 * @param {FetchEvent} event
   121	 * @param {string} requestId
   122	 * @param {number} requestInterceptedAt
   123	 */
   124	async function handleRequest(event, requestId, requestInterceptedAt) {
   125	  const client = await resolveMainClient(event)
   126	  const requestCloneForEvents = event.request.clone()
   127	  const response = await getResponse(
   128	    event,
   129	    client,
   130	    requestId,
   131	    requestInterceptedAt,
   132	  )
   133	
   134	  // Send back the response clone for the "response:*" life-cycle events.
   135	  // Ensure MSW is active and ready to handle the message, otherwise
   136	  // this message will pend indefinitely.
   137	  if (client && activeClientIds.has(client.id)) {
   138	    const serializedRequest = await serializeRequest(requestCloneForEvents)
   139	
   140	    // Clone the response so both the client and the library could consume it.
   141	    const responseClone = response.clone()
   142	
   143	    sendToClient(
   144	      client,
   145	      {
   146	        type: 'RESPONSE',
   147	        payload: {
   148	          isMockedResponse: IS_MOCKED_RESPONSE in response,
   149	          request: {
   150	            id: requestId,
   151	            ...serializedRequest,
   152	          },
   153	          response: {
   154	            type: responseClone.type,
   155	            status: responseClone.status,
   156	            statusText: responseClone.statusText,
   157	            headers: Object.fromEntries(responseClone.headers.entries()),
   158	            body: responseClone.body,
   159	          },
   160	        },
   161	      },
   162	      responseClone.body ? [serializedRequest.body, responseClone.body] : [],
   163	    )
   164	  }
   165	
   166	  return response
   167	}
   168	
   169	/**
   170	 * Resolve the main client for the given event.
   171	 * Client that issues a request doesn't necessarily equal the client
   172	 * that registered the worker. It's with the latter the worker should
   173	 * communicate with during the response resolving phase.
   174	 * @param {FetchEvent} event
   175	 * @returns {Promise<Client | undefined>}
   176	 */
   177	async function resolveMainClient(event) {
   178	  const client = await self.clients.get(event.clientId)
   179	
   180	  if (activeClientIds.has(event.clientId)) {
   181	    return client
   182	  }
   183	
   184	  if (client?.frameType === 'top-level') {
   185	    return client
   186	  }
   187	
   188	  const allClients = await self.clients.matchAll({
   189	    type: 'window',
   190	  })
   191	
   192	  return allClients
   193	    .filter((client) => {
   194	      // Get only those clients that are currently visible.
   195	      return client.visibilityState === 'visible'
   196	    })
   197	    .find((client) => {
   198	      // Find the client ID that's recorded in the
   199	      // set of clients that have registered the worker.
   200	      return activeClientIds.has(client.id)
   201	    })
   202	}
   203	
   204	/**
   205	 * @param {FetchEvent} event
   206	 * @param {Client | undefined} client
   207	 * @param {string} requestId
   208	 * @returns {Promise<Response>}
   209	 */
   210	async function getResponse(event, client, requestId, requestInterceptedAt) {
   211	  // Clone the request because it might've been already used
   212	  // (i.e. its body has been read and sent to the client).
   213	  const requestClone = event.request.clone()
   214	
   215	  function passthrough() {
   216	    // Cast the request headers to a new Headers instance
   217	    // so the headers can be manipulated with.
   218	    const headers = new Headers(requestClone.headers)
   219	
   220	    // Remove the "accept" header value that marked this request as passthrough.
   221	    // This prevents request alteration and also keeps it compliant with the
   222	    // user-defined CORS policies.
   223	    const acceptHeader = headers.get('accept')
   224	    if (acceptHeader) {
   225	      const values = acceptHeader.split(',').map((value) => value.trim())
   226	      const filteredValues = values.filter(
   227	        (value) => value !== 'msw/passthrough',
   228	      )
   229	
   230	      if (filteredValues.length > 0) {
   231	        headers.set('accept', filteredValues.join(', '))
   232	      } else {
   233	        headers.delete('accept')
   234	      }
   235	    }
   236	
   237	    return fetch(requestClone, { headers })
   238	  }
   239	
   240	  // Bypass mocking when the client is not active.
   241	  if (!client) {
   242	    return passthrough()
   243	  }
   244	
   245	  // Bypass initial page load requests (i.e. static assets).
   246	  // The absence of the immediate/parent client in the map of the active clients
   247	  // means that MSW hasn't dispatched the "MOCK_ACTIVATE" event yet
   248	  // and is not ready to handle requests.
   249	  if (!activeClientIds.has(client.id)) {
   250	    return passthrough()
   251	  }
   252	
   253	  // Notify the client that a request has been intercepted.
   254	  const serializedRequest = await serializeRequest(event.request)
   255	  const clientMessage = await sendToClient(
   256	    client,
   257	    {
   258	      type: 'REQUEST',
   259	      payload: {
   260	        id: requestId,
   261	        interceptedAt: requestInterceptedAt,
   262	        ...serializedRequest,
   263	      },
   264	    },
   265	    [serializedRequest.body],
   266	  )
   267	
   268	  switch (clientMessage.type) {
   269	    case 'MOCK_RESPONSE': {
   270	      return respondWithMock(clientMessage.data)
   271	    }
   272	
   273	    case 'PASSTHROUGH': {
   274	      return passthrough()
   275	    }
   276	  }
   277	
   278	  return passthrough()
   279	}
   280	
   281	/**
   282	 * @param {Client} client
   283	 * @param {any} message
   284	 * @param {Array<Transferable>} transferrables
   285	 * @returns {Promise<any>}
   286	 */
   287	function sendToClient(client, message, transferrables = []) {
   288	  return new Promise((resolve, reject) => {
   289	    const channel = new MessageChannel()
   290	
   291	    channel.port1.onmessage = (event) => {
   292	      if (event.data && event.data.error) {
   293	        return reject(event.data.error)
   294	      }
   295	
   296	      resolve(event.data)
   297	    }
   298	
   299	    client.postMessage(message, [
   300	      channel.port2,
   301	      ...transferrables.filter(Boolean),
   302	    ])
   303	  })
   304	}
   305	
   306	/**
   307	 * @param {Response} response
   308	 * @returns {Response}
   309	 */
   310	function respondWithMock(response) {
   311	  // Setting response status code to 0 is a no-op.
   312	  // However, when responding with a "Response.error()", the produced Response
   313	  // instance will have status code set to 0. Since it's not possible to create
   314	  // a Response instance with status code 0, handle that use-case separately.
   315	  if (response.status === 0) {
   316	    return Response.error()
   317	  }
   318	
   319	  const mockedResponse = new Response(response.body, response)
   320	
   321	  Reflect.defineProperty(mockedResponse, IS_MOCKED_RESPONSE, {
   322	    value: true,
   323	    enumerable: true,
   324	  })
   325	
   326	  return mockedResponse
   327	}
   328	
   329	/**
   330	 * @param {Request} request
   331	 */
   332	async function serializeRequest(request) {
   333	  return {
   334	    url: request.url,
   335	    mode: request.mode,
   336	    method: request.method,
   337	    headers: Object.fromEntries(request.headers.entries()),
   338	    cache: request.cache,
   339	    credentials: request.credentials,
   340	    destination: request.destination,
   341	    integrity: request.integrity,
   342	    redirect: request.redirect,
   343	    referrer: request.referrer,
   344	    referrerPolicy: request.referrerPolicy,
   345	    body: await request.arrayBuffer(),
   346	    keepalive: request.keepalive,
   347	  }
   348	}

=== DATABASE FILES ===

=== FILE: ./db/INDEXES.sql ===
     1	-- SceneScout v14 Performance Indexes
     2	-- This file contains all performance indexes for optimized queries
     3	
     4	-- Event indexes for common queries
     5	CREATE INDEX idx_events_date ON events(event_date) WHERE deleted_at IS NULL;
     6	CREATE INDEX idx_events_city_date ON events(city_id, event_date) WHERE deleted_at IS NULL;
     7	CREATE INDEX idx_events_venue ON events(venue_id) WHERE deleted_at IS NULL;
     8	CREATE INDEX idx_events_featured ON events(is_featured) WHERE is_featured = true AND deleted_at IS NULL;
     9	CREATE INDEX idx_events_slug ON events(slug) WHERE deleted_at IS NULL;
    10	CREATE INDEX idx_events_created_by ON events(created_by) WHERE deleted_at IS NULL;
    11	
    12	-- Geospatial indexes for location-based queries
    13	CREATE INDEX idx_events_location ON events USING GIST(location);
    14	CREATE INDEX idx_venues_location ON venues USING GIST(location);
    15	
    16	-- JSONB indexes for array searches
    17	CREATE INDEX idx_events_categories ON events USING GIN(categories);
    18	CREATE INDEX idx_events_tags ON events USING GIN(tags);
    19	CREATE INDEX idx_venues_amenities ON venues USING GIN(amenities);
    20	
    21	-- Text search indexes
    22	CREATE INDEX idx_events_name_trgm ON events USING GIN(name gin_trgm_ops);
    23	CREATE INDEX idx_events_description_trgm ON events USING GIN(description gin_trgm_ops);
    24	CREATE INDEX idx_venues_name_trgm ON venues USING GIN(name gin_trgm_ops);
    25	CREATE INDEX idx_cities_name_trgm ON cities USING GIN(name gin_trgm_ops);
    26	
    27	-- Full text search indexes
    28	CREATE INDEX idx_events_search ON events USING GIN(
    29	    to_tsvector('english', coalesce(name, '') || ' ' || coalesce(description, ''))
    30	);
    31	CREATE INDEX idx_venues_search ON venues USING GIN(
    32	    to_tsvector('english', coalesce(name, '') || ' ' || coalesce(description, ''))
    33	);
    34	
    35	-- User-related indexes
    36	CREATE INDEX idx_users_email ON users(email) WHERE deleted_at IS NULL;
    37	CREATE INDEX idx_users_active ON users(is_active) WHERE is_active = true;
    38	CREATE INDEX idx_profiles_user_id ON profiles(user_id);
    39	CREATE INDEX idx_profiles_username ON profiles(username);
    40	
    41	-- User events (favorites/saved)
    42	CREATE INDEX idx_user_events_user_id ON user_events(user_id);
    43	CREATE INDEX idx_user_events_event_id ON user_events(event_id);
    44	CREATE INDEX idx_user_events_favorites ON user_events(user_id, is_favorite) WHERE is_favorite = true;
    45	CREATE INDEX idx_user_events_attending ON user_events(user_id, is_attending) WHERE is_attending = true;
    46	CREATE INDEX idx_user_events_reminder ON user_events(reminder_time) WHERE reminder_sent = false AND reminder_time IS NOT NULL;
    47	
    48	-- Plans indexes
    49	CREATE INDEX idx_plans_user_id ON plans(user_id) WHERE deleted_at IS NULL;
    50	CREATE INDEX idx_plans_public ON plans(is_public) WHERE is_public = true AND deleted_at IS NULL;
    51	CREATE INDEX idx_plans_city ON plans(city_id) WHERE deleted_at IS NULL;
    52	CREATE INDEX idx_plans_share_token ON plans(share_token) WHERE share_token IS NOT NULL;
    53	CREATE INDEX idx_plan_events_plan_id ON plan_events(plan_id);
    54	CREATE INDEX idx_plan_events_event_id ON plan_events(event_id);
    55	
    56	-- Venue indexes
    57	CREATE INDEX idx_venues_city ON venues(city_id) WHERE deleted_at IS NULL;
    58	CREATE INDEX idx_venues_type ON venues(venue_type) WHERE deleted_at IS NULL;
    59	CREATE INDEX idx_venues_slug ON venues(slug) WHERE deleted_at IS NULL;
    60	CREATE INDEX idx_venues_verified ON venues(is_verified) WHERE is_verified = true AND deleted_at IS NULL;
    61	
    62	-- City indexes
    63	CREATE INDEX idx_cities_slug ON cities(slug) WHERE is_active = true;
    64	CREATE INDEX idx_cities_state ON cities(state_code) WHERE is_active = true;
    65	CREATE INDEX idx_cities_country ON cities(country_code) WHERE is_active = true;
    66	
    67	-- Submission indexes
    68	CREATE INDEX idx_submissions_status ON submissions(status);
    69	CREATE INDEX idx_submissions_user ON submissions(user_id);
    70	CREATE INDEX idx_submissions_type_status ON submissions(submission_type, status);
    71	CREATE INDEX idx_submissions_pending ON submissions(submitted_at) WHERE status = 'pending';
    72	
    73	-- Promotion indexes
    74	CREATE INDEX idx_promotions_active ON promotions(start_date, end_date) WHERE is_active = true;
    75	CREATE INDEX idx_promotions_type ON promotions(promotion_type) WHERE is_active = true;
    76	CREATE INDEX idx_promotions_city ON promotions(city_id) WHERE is_active = true;
    77	CREATE INDEX idx_promotions_entity ON promotions(entity_id) WHERE entity_id IS NOT NULL;
    78	
    79	-- Push subscription indexes
    80	CREATE INDEX idx_push_subscriptions_user ON push_subscriptions(user_id) WHERE is_active = true;
    81	CREATE INDEX idx_push_subscriptions_active ON push_subscriptions(is_active);
    82	
    83	-- Analytics indexes
    84	CREATE INDEX idx_event_views_event ON event_views(event_id);
    85	CREATE INDEX idx_event_views_user ON event_views(user_id) WHERE user_id IS NOT NULL;
    86	CREATE INDEX idx_event_views_date ON event_views(viewed_at);
    87	CREATE INDEX idx_event_views_event_date ON event_views(event_id, viewed_at);
    88	
    89	CREATE INDEX idx_user_activities_user ON user_activities(user_id);
    90	CREATE INDEX idx_user_activities_type ON user_activities(activity_type);
    91	CREATE INDEX idx_user_activities_date ON user_activities(created_at);
    92	CREATE INDEX idx_user_activities_entity ON user_activities(entity_type, entity_id) WHERE entity_id IS NOT NULL;
    93	
    94	-- Composite indexes for common query patterns
    95	CREATE INDEX idx_events_upcoming ON events(city_id, event_date, start_time) 
    96	    WHERE deleted_at IS NULL AND event_date >= CURRENT_DATE;
    97	
    98	CREATE INDEX idx_events_past ON events(city_id, event_date DESC, start_time DESC) 
    99	    WHERE deleted_at IS NULL AND event_date < CURRENT_DATE;
   100	
   101	-- Partial indexes for performance
   102	CREATE INDEX idx_events_today ON events(city_id, start_time) 
   103	    WHERE deleted_at IS NULL AND event_date = CURRENT_DATE;
   104	
   105	CREATE INDEX idx_events_this_week ON events(city_id, event_date, start_time) 
   106	    WHERE deleted_at IS NULL AND event_date >= CURRENT_DATE AND event_date < CURRENT_DATE + INTERVAL '7 days';
   107	
   108	CREATE INDEX idx_events_this_weekend ON events(city_id, event_date, start_time) 
   109	    WHERE deleted_at IS NULL AND EXTRACT(DOW FROM event_date) IN (0, 5, 6);
   110	
   111	-- Index for finding nearby events efficiently
   112	CREATE INDEX idx_events_location_date ON events USING GIST(location, event_date) WHERE deleted_at IS NULL;
=== FILE: ./db/METRICS.sql ===
     1	-- SceneScout v14 Analytics and Metrics Tables
     2	-- This file contains tables for tracking application metrics and analytics
     3	
     4	-- Daily active users
     5	CREATE TABLE daily_active_users (
     6	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     7	    date DATE NOT NULL,
     8	    user_count INTEGER NOT NULL DEFAULT 0,
     9	    new_user_count INTEGER NOT NULL DEFAULT 0,
    10	    returning_user_count INTEGER NOT NULL DEFAULT 0,
    11	    city_breakdown JSONB DEFAULT '{}', -- User counts by city
    12	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    13	    UNIQUE(date)
    14	);
    15	
    16	-- Event engagement metrics
    17	CREATE TABLE event_engagement_metrics (
    18	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    19	    event_id UUID NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    20	    date DATE NOT NULL,
    21	    view_count INTEGER DEFAULT 0,
    22	    unique_viewer_count INTEGER DEFAULT 0,
    23	    favorite_count INTEGER DEFAULT 0,
    24	    attendee_count INTEGER DEFAULT 0,
    25	    share_count INTEGER DEFAULT 0,
    26	    click_through_count INTEGER DEFAULT 0, -- Clicks to external ticket link
    27	    avg_view_duration NUMERIC, -- Average seconds spent viewing
    28	    source_breakdown JSONB DEFAULT '{}', -- Views by traffic source
    29	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    30	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    31	    UNIQUE(event_id, date)
    32	);
    33	
    34	-- Venue performance metrics
    35	CREATE TABLE venue_performance_metrics (
    36	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    37	    venue_id UUID NOT NULL REFERENCES venues(id) ON DELETE CASCADE,
    38	    month DATE NOT NULL, -- First day of month
    39	    total_events INTEGER DEFAULT 0,
    40	    total_event_views INTEGER DEFAULT 0,
    41	    total_attendees INTEGER DEFAULT 0,
    42	    avg_event_rating NUMERIC,
    43	    popular_event_types JSONB DEFAULT '[]', -- Array of popular categories
    44	    peak_days JSONB DEFAULT '[]', -- Days of week with most events
    45	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    46	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    47	    UNIQUE(venue_id, month)
    48	);
    49	
    50	-- Search analytics
    51	CREATE TABLE search_analytics (
    52	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    53	    search_query TEXT NOT NULL,
    54	    user_id UUID REFERENCES users(id),
    55	    session_id VARCHAR(100),
    56	    city_id UUID REFERENCES cities(id),
    57	    result_count INTEGER DEFAULT 0,
    58	    clicked_result_position INTEGER, -- Which result they clicked (1-based)
    59	    clicked_event_id UUID REFERENCES events(id),
    60	    search_filters JSONB DEFAULT '{}', -- Applied filters
    61	    search_type VARCHAR(50), -- text, category, date_range, etc.
    62	    device_type VARCHAR(20), -- mobile, tablet, desktop
    63	    searched_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    64	);
    65	
    66	-- User behavior funnel
    67	CREATE TABLE user_behavior_funnel (
    68	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    69	    user_id UUID REFERENCES users(id),
    70	    session_id VARCHAR(100) NOT NULL,
    71	    funnel_step VARCHAR(50) NOT NULL, -- landing, browse, view_event, save_event, click_ticket
    72	    event_id UUID REFERENCES events(id),
    73	    city_id UUID REFERENCES cities(id),
    74	    metadata JSONB DEFAULT '{}',
    75	    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    76	    INDEX idx_funnel_session (session_id, timestamp)
    77	);
    78	
    79	-- City activity metrics
    80	CREATE TABLE city_activity_metrics (
    81	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    82	    city_id UUID NOT NULL REFERENCES cities(id),
    83	    week_start DATE NOT NULL,
    84	    total_events INTEGER DEFAULT 0,
    85	    total_venues INTEGER DEFAULT 0,
    86	    total_views INTEGER DEFAULT 0,
    87	    total_users INTEGER DEFAULT 0,
    88	    popular_categories JSONB DEFAULT '[]',
    89	    trending_venues JSONB DEFAULT '[]',
    90	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    91	    UNIQUE(city_id, week_start)
    92	);
    93	
    94	-- Feature usage tracking
    95	CREATE TABLE feature_usage (
    96	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    97	    user_id UUID REFERENCES users(id),
    98	    feature_name VARCHAR(100) NOT NULL, -- search, filter, save_event, create_plan, etc.
    99	    feature_category VARCHAR(50), -- discovery, planning, social, etc.
   100	    usage_count INTEGER DEFAULT 1,
   101	    metadata JSONB DEFAULT '{}',
   102	    date DATE NOT NULL DEFAULT CURRENT_DATE,
   103	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   104	    UNIQUE(user_id, feature_name, date)
   105	);
   106	
   107	-- Page performance metrics
   108	CREATE TABLE page_performance_metrics (
   109	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   110	    page_path VARCHAR(255) NOT NULL,
   111	    date DATE NOT NULL,
   112	    view_count INTEGER DEFAULT 0,
   113	    unique_visitor_count INTEGER DEFAULT 0,
   114	    avg_load_time_ms INTEGER,
   115	    avg_time_on_page_seconds INTEGER,
   116	    bounce_rate NUMERIC(5,2), -- Percentage
   117	    exit_rate NUMERIC(5,2), -- Percentage
   118	    device_breakdown JSONB DEFAULT '{}', -- Views by device type
   119	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   120	    UNIQUE(page_path, date)
   121	);
   122	
   123	-- Revenue metrics
   124	CREATE TABLE revenue_metrics (
   125	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   126	    date DATE NOT NULL,
   127	    total_revenue DECIMAL(10, 2) DEFAULT 0,
   128	    subscription_revenue DECIMAL(10, 2) DEFAULT 0,
   129	    promotion_revenue DECIMAL(10, 2) DEFAULT 0,
   130	    new_subscriber_count INTEGER DEFAULT 0,
   131	    churned_subscriber_count INTEGER DEFAULT 0,
   132	    total_active_subscribers INTEGER DEFAULT 0,
   133	    avg_revenue_per_user DECIMAL(10, 2),
   134	    revenue_by_plan JSONB DEFAULT '{}', -- Revenue breakdown by subscription plan
   135	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   136	    UNIQUE(date)
   137	);
   138	
   139	-- Notification metrics
   140	CREATE TABLE notification_metrics (
   141	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   142	    notification_type VARCHAR(50) NOT NULL, -- event_reminder, new_events, plan_shared, etc.
   143	    date DATE NOT NULL,
   144	    sent_count INTEGER DEFAULT 0,
   145	    delivered_count INTEGER DEFAULT 0,
   146	    opened_count INTEGER DEFAULT 0,
   147	    clicked_count INTEGER DEFAULT 0,
   148	    unsubscribed_count INTEGER DEFAULT 0,
   149	    delivery_rate NUMERIC(5,2), -- Percentage
   150	    open_rate NUMERIC(5,2), -- Percentage  
   151	    click_rate NUMERIC(5,2), -- Percentage
   152	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   153	    UNIQUE(notification_type, date)
   154	);
   155	
   156	-- A/B test results
   157	CREATE TABLE ab_test_results (
   158	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   159	    test_name VARCHAR(100) NOT NULL,
   160	    variant VARCHAR(50) NOT NULL, -- control, variant_a, variant_b, etc.
   161	    user_id UUID REFERENCES users(id),
   162	    session_id VARCHAR(100),
   163	    metric_name VARCHAR(100) NOT NULL, -- conversion, engagement, retention, etc.
   164	    metric_value NUMERIC,
   165	    metadata JSONB DEFAULT '{}',
   166	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   167	);
   168	
   169	-- Error tracking
   170	CREATE TABLE error_logs (
   171	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   172	    error_type VARCHAR(100) NOT NULL,
   173	    error_message TEXT,
   174	    error_stack TEXT,
   175	    user_id UUID REFERENCES users(id),
   176	    session_id VARCHAR(100),
   177	    page_path VARCHAR(255),
   178	    user_agent TEXT,
   179	    metadata JSONB DEFAULT '{}',
   180	    occurred_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   181	    resolved BOOLEAN DEFAULT false,
   182	    resolved_at TIMESTAMP WITH TIME ZONE
   183	);
   184	
   185	-- Indexes for metrics tables
   186	CREATE INDEX idx_daily_active_users_date ON daily_active_users(date DESC);
   187	CREATE INDEX idx_event_engagement_date ON event_engagement_metrics(date DESC);
   188	CREATE INDEX idx_event_engagement_event ON event_engagement_metrics(event_id);
   189	CREATE INDEX idx_venue_performance_venue ON venue_performance_metrics(venue_id);
   190	CREATE INDEX idx_venue_performance_month ON venue_performance_metrics(month DESC);
   191	CREATE INDEX idx_search_analytics_query ON search_analytics(search_query);
   192	CREATE INDEX idx_search_analytics_date ON search_analytics(searched_at DESC);
   193	CREATE INDEX idx_search_analytics_user ON search_analytics(user_id) WHERE user_id IS NOT NULL;
   194	CREATE INDEX idx_user_behavior_funnel_user ON user_behavior_funnel(user_id) WHERE user_id IS NOT NULL;
   195	CREATE INDEX idx_city_activity_city ON city_activity_metrics(city_id);
   196	CREATE INDEX idx_feature_usage_user_date ON feature_usage(user_id, date) WHERE user_id IS NOT NULL;
   197	CREATE INDEX idx_feature_usage_feature ON feature_usage(feature_name, date);
   198	CREATE INDEX idx_page_performance_path_date ON page_performance_metrics(page_path, date DESC);
   199	CREATE INDEX idx_revenue_metrics_date ON revenue_metrics(date DESC);
   200	CREATE INDEX idx_notification_metrics_type_date ON notification_metrics(notification_type, date DESC);
   201	CREATE INDEX idx_ab_test_results_test ON ab_test_results(test_name, variant);
   202	CREATE INDEX idx_error_logs_type ON error_logs(error_type, occurred_at DESC) WHERE resolved = false;
   203	
   204	-- Triggers for metrics tables
   205	CREATE TRIGGER update_event_engagement_metrics_updated_at BEFORE UPDATE ON event_engagement_metrics FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   206	CREATE TRIGGER update_venue_performance_metrics_updated_at BEFORE UPDATE ON venue_performance_metrics FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   207	
   208	-- Materialized views for performance
   209	CREATE MATERIALIZED VIEW popular_events_last_7_days AS
   210	SELECT 
   211	    e.id,
   212	    e.name,
   213	    e.event_date,
   214	    e.city_id,
   215	    SUM(eem.view_count) as total_views,
   216	    SUM(eem.favorite_count) as total_favorites,
   217	    AVG(eem.avg_view_duration) as avg_duration
   218	FROM events e
   219	JOIN event_engagement_metrics eem ON e.id = eem.event_id
   220	WHERE eem.date >= CURRENT_DATE - INTERVAL '7 days'
   221	    AND e.deleted_at IS NULL
   222	GROUP BY e.id
   223	ORDER BY total_views DESC;
   224	
   225	CREATE INDEX idx_popular_events_city ON popular_events_last_7_days(city_id);
   226	
   227	-- Function to refresh materialized views
   228	CREATE OR REPLACE FUNCTION refresh_metric_views()
   229	RETURNS void AS $$
   230	BEGIN
   231	    REFRESH MATERIALIZED VIEW CONCURRENTLY popular_events_last_7_days;
   232	END;
   233	$$ LANGUAGE plpgsql;
   234	
   235	-- RLS policies for metrics (admin only)
   236	ALTER TABLE daily_active_users ENABLE ROW LEVEL SECURITY;
   237	ALTER TABLE event_engagement_metrics ENABLE ROW LEVEL SECURITY;
   238	ALTER TABLE venue_performance_metrics ENABLE ROW LEVEL SECURITY;
   239	ALTER TABLE search_analytics ENABLE ROW LEVEL SECURITY;
   240	ALTER TABLE user_behavior_funnel ENABLE ROW LEVEL SECURITY;
   241	ALTER TABLE city_activity_metrics ENABLE ROW LEVEL SECURITY;
   242	ALTER TABLE feature_usage ENABLE ROW LEVEL SECURITY;
   243	ALTER TABLE page_performance_metrics ENABLE ROW LEVEL SECURITY;
   244	ALTER TABLE revenue_metrics ENABLE ROW LEVEL SECURITY;
   245	ALTER TABLE notification_metrics ENABLE ROW LEVEL SECURITY;
   246	ALTER TABLE ab_test_results ENABLE ROW LEVEL SECURITY;
   247	ALTER TABLE error_logs ENABLE ROW LEVEL SECURITY;
   248	
   249	-- Only admins can view metrics
   250	CREATE POLICY metrics_admin_only ON daily_active_users FOR ALL USING (is_admin(auth.uid()));
   251	CREATE POLICY event_engagement_admin_only ON event_engagement_metrics FOR ALL USING (is_admin(auth.uid()));
   252	CREATE POLICY venue_performance_admin_only ON venue_performance_metrics FOR ALL USING (is_admin(auth.uid()));
   253	CREATE POLICY search_analytics_admin_only ON search_analytics FOR ALL USING (is_admin(auth.uid()));
   254	CREATE POLICY user_behavior_admin_only ON user_behavior_funnel FOR ALL USING (is_admin(auth.uid()));
   255	CREATE POLICY city_activity_admin_only ON city_activity_metrics FOR ALL USING (is_admin(auth.uid()));
   256	CREATE POLICY feature_usage_admin_only ON feature_usage FOR ALL USING (is_admin(auth.uid()));
   257	CREATE POLICY page_performance_admin_only ON page_performance_metrics FOR ALL USING (is_admin(auth.uid()));
   258	CREATE POLICY revenue_metrics_admin_only ON revenue_metrics FOR ALL USING (is_admin(auth.uid()));
   259	CREATE POLICY notification_metrics_admin_only ON notification_metrics FOR ALL USING (is_admin(auth.uid()));
   260	CREATE POLICY ab_test_admin_only ON ab_test_results FOR ALL USING (is_admin(auth.uid()));
   261	CREATE POLICY error_logs_admin_only ON error_logs FOR ALL USING (is_admin(auth.uid()));
=== FILE: ./db/PLANS.sql ===
     1	-- SceneScout v14 Event Planning Features
     2	-- This file contains advanced tables for event planning and collaboration
     3	
     4	-- Plan collaborators
     5	CREATE TABLE plan_collaborators (
     6	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     7	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
     8	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
     9	    role VARCHAR(20) DEFAULT 'viewer' CHECK (role IN ('owner', 'editor', 'viewer')),
    10	    invited_by UUID REFERENCES users(id),
    11	    invited_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    12	    accepted_at TIMESTAMP WITH TIME ZONE,
    13	    permissions JSONB DEFAULT '{}', -- Specific permissions
    14	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    15	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    16	    UNIQUE(plan_id, user_id)
    17	);
    18	
    19	-- Plan invitations (for non-users)
    20	CREATE TABLE plan_invitations (
    21	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    22	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
    23	    email VARCHAR(255) NOT NULL,
    24	    invited_by UUID NOT NULL REFERENCES users(id),
    25	    invitation_token VARCHAR(100) UNIQUE NOT NULL,
    26	    role VARCHAR(20) DEFAULT 'viewer' CHECK (role IN ('editor', 'viewer')),
    27	    message TEXT,
    28	    expires_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP + INTERVAL '7 days',
    29	    accepted_at TIMESTAMP WITH TIME ZONE,
    30	    accepted_by_user_id UUID REFERENCES users(id),
    31	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    32	);
    33	
    34	-- Plan templates library
    35	CREATE TABLE plan_templates (
    36	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    37	    created_by UUID REFERENCES users(id),
    38	    name VARCHAR(255) NOT NULL,
    39	    description TEXT,
    40	    category VARCHAR(50), -- date_night, weekend_trip, bar_crawl, etc.
    41	    city_id UUID REFERENCES cities(id),
    42	    tags JSONB DEFAULT '[]',
    43	    event_count INTEGER DEFAULT 0,
    44	    use_count INTEGER DEFAULT 0,
    45	    rating NUMERIC(3,2),
    46	    is_featured BOOLEAN DEFAULT false,
    47	    is_public BOOLEAN DEFAULT true,
    48	    template_data JSONB NOT NULL, -- Stores event criteria, not specific events
    49	    preview_image_url TEXT,
    50	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    51	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    52	);
    53	
    54	-- Plan template usage
    55	CREATE TABLE plan_template_usage (
    56	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    57	    template_id UUID NOT NULL REFERENCES plan_templates(id) ON DELETE CASCADE,
    58	    user_id UUID NOT NULL REFERENCES users(id),
    59	    plan_id UUID REFERENCES plans(id),
    60	    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    61	    feedback TEXT,
    62	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    63	);
    64	
    65	-- Plan activities (audit log)
    66	CREATE TABLE plan_activities (
    67	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    68	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
    69	    user_id UUID REFERENCES users(id),
    70	    activity_type VARCHAR(50) NOT NULL, -- created, updated, event_added, event_removed, shared, etc.
    71	    entity_type VARCHAR(50), -- event, collaborator, etc.
    72	    entity_id UUID,
    73	    details JSONB DEFAULT '{}',
    74	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    75	);
    76	
    77	-- Plan comments
    78	CREATE TABLE plan_comments (
    79	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    80	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
    81	    plan_event_id UUID REFERENCES plan_events(id) ON DELETE CASCADE,
    82	    user_id UUID NOT NULL REFERENCES users(id),
    83	    parent_comment_id UUID REFERENCES plan_comments(id),
    84	    comment_text TEXT NOT NULL,
    85	    is_edited BOOLEAN DEFAULT false,
    86	    edited_at TIMESTAMP WITH TIME ZONE,
    87	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    88	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    89	    deleted_at TIMESTAMP WITH TIME ZONE
    90	);
    91	
    92	-- Plan votes (for group decision making)
    93	CREATE TABLE plan_votes (
    94	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    95	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
    96	    plan_event_id UUID NOT NULL REFERENCES plan_events(id) ON DELETE CASCADE,
    97	    user_id UUID NOT NULL REFERENCES users(id),
    98	    vote_type VARCHAR(20) NOT NULL CHECK (vote_type IN ('yes', 'no', 'maybe')),
    99	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   100	    UNIQUE(plan_event_id, user_id)
   101	);
   102	
   103	-- Plan check-ins
   104	CREATE TABLE plan_checkins (
   105	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   106	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
   107	    plan_event_id UUID NOT NULL REFERENCES plan_events(id) ON DELETE CASCADE,
   108	    user_id UUID NOT NULL REFERENCES users(id),
   109	    checked_in_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   110	    location GEOGRAPHY(Point, 4326),
   111	    photo_url TEXT,
   112	    notes TEXT,
   113	    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
   114	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   115	);
   116	
   117	-- Plan routes (optimized paths between events)
   118	CREATE TABLE plan_routes (
   119	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   120	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
   121	    route_data JSONB NOT NULL, -- GeoJSON or routing data
   122	    total_distance_km NUMERIC(10, 2),
   123	    total_duration_minutes INTEGER,
   124	    transport_mode VARCHAR(20) DEFAULT 'driving', -- driving, walking, transit, cycling
   125	    waypoint_order JSONB DEFAULT '[]', -- Ordered array of plan_event_ids
   126	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   127	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   128	    UNIQUE(plan_id)
   129	);
   130	
   131	-- Plan exports (calendar, PDF, etc.)
   132	CREATE TABLE plan_exports (
   133	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   134	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
   135	    user_id UUID NOT NULL REFERENCES users(id),
   136	    export_type VARCHAR(20) NOT NULL CHECK (export_type IN ('ics', 'pdf', 'image', 'link')),
   137	    export_url TEXT NOT NULL,
   138	    expires_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP + INTERVAL '30 days',
   139	    download_count INTEGER DEFAULT 0,
   140	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   141	);
   142	
   143	-- Suggested events for plans
   144	CREATE TABLE plan_suggestions (
   145	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   146	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
   147	    event_id UUID NOT NULL REFERENCES events(id) ON DELETE CASCADE,
   148	    suggested_by UUID REFERENCES users(id), -- NULL for system suggestions
   149	    suggestion_reason TEXT,
   150	    score NUMERIC(5, 2), -- Relevance score
   151	    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'rejected', 'expired')),
   152	    responded_by UUID REFERENCES users(id),
   153	    responded_at TIMESTAMP WITH TIME ZONE,
   154	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   155	);
   156	
   157	-- Functions for plan management
   158	CREATE OR REPLACE FUNCTION get_plan_summary(plan_id_param UUID)
   159	RETURNS TABLE (
   160	    plan_name VARCHAR,
   161	    event_count BIGINT,
   162	    collaborator_count BIGINT,
   163	    total_duration_hours NUMERIC,
   164	    date_range JSONB,
   165	    status VARCHAR
   166	) AS $$
   167	BEGIN
   168	    RETURN QUERY
   169	    SELECT 
   170	        p.name as plan_name,
   171	        COUNT(DISTINCT pe.id) as event_count,
   172	        COUNT(DISTINCT pc.user_id) + 1 as collaborator_count, -- +1 for owner
   173	        SUM(EXTRACT(EPOCH FROM (e.end_time - e.start_time)) / 3600)::NUMERIC as total_duration_hours,
   174	        jsonb_build_object(
   175	            'start_date', MIN(e.event_date),
   176	            'end_date', MAX(e.event_date)
   177	        ) as date_range,
   178	        CASE 
   179	            WHEN MIN(e.event_date) < CURRENT_DATE THEN 'past'
   180	            WHEN MIN(e.event_date) = CURRENT_DATE THEN 'today'
   181	            ELSE 'upcoming'
   182	        END as status
   183	    FROM plans p
   184	    LEFT JOIN plan_events pe ON p.id = pe.plan_id
   185	    LEFT JOIN events e ON pe.event_id = e.id
   186	    LEFT JOIN plan_collaborators pc ON p.id = pc.plan_id
   187	    WHERE p.id = plan_id_param
   188	    GROUP BY p.id, p.name;
   189	END;
   190	$$ LANGUAGE plpgsql;
   191	
   192	-- Generate plan from template
   193	CREATE OR REPLACE FUNCTION generate_plan_from_template(
   194	    template_id_param UUID,
   195	    user_id_param UUID,
   196	    plan_date DATE DEFAULT NULL
   197	)
   198	RETURNS UUID AS $$
   199	DECLARE
   200	    new_plan_id UUID;
   201	    template_record RECORD;
   202	BEGIN
   203	    -- Get template details
   204	    SELECT * INTO template_record FROM plan_templates WHERE id = template_id_param;
   205	    
   206	    IF NOT FOUND THEN
   207	        RAISE EXCEPTION 'Template not found';
   208	    END IF;
   209	    
   210	    -- Create new plan
   211	    INSERT INTO plans (user_id, name, description, date, city_id, metadata)
   212	    VALUES (
   213	        user_id_param,
   214	        template_record.name || ' - ' || COALESCE(TO_CHAR(plan_date, 'Mon DD'), 'Custom'),
   215	        template_record.description,
   216	        plan_date,
   217	        template_record.city_id,
   218	        jsonb_build_object('template_id', template_id_param)
   219	    )
   220	    RETURNING id INTO new_plan_id;
   221	    
   222	    -- Update template usage count
   223	    UPDATE plan_templates SET use_count = use_count + 1 WHERE id = template_id_param;
   224	    
   225	    -- Record usage
   226	    INSERT INTO plan_template_usage (template_id, user_id, plan_id)
   227	    VALUES (template_id_param, user_id_param, new_plan_id);
   228	    
   229	    RETURN new_plan_id;
   230	END;
   231	$$ LANGUAGE plpgsql;
   232	
   233	-- Indexes
   234	CREATE INDEX idx_plan_collaborators_plan ON plan_collaborators(plan_id);
   235	CREATE INDEX idx_plan_collaborators_user ON plan_collaborators(user_id);
   236	CREATE INDEX idx_plan_invitations_plan ON plan_invitations(plan_id);
   237	CREATE INDEX idx_plan_invitations_token ON plan_invitations(invitation_token) WHERE accepted_at IS NULL;
   238	CREATE INDEX idx_plan_templates_category ON plan_templates(category) WHERE is_public = true;
   239	CREATE INDEX idx_plan_templates_featured ON plan_templates(is_featured) WHERE is_featured = true;
   240	CREATE INDEX idx_plan_template_usage_template ON plan_template_usage(template_id);
   241	CREATE INDEX idx_plan_activities_plan ON plan_activities(plan_id, created_at DESC);
   242	CREATE INDEX idx_plan_comments_plan ON plan_comments(plan_id) WHERE deleted_at IS NULL;
   243	CREATE INDEX idx_plan_votes_event ON plan_votes(plan_event_id);
   244	CREATE INDEX idx_plan_checkins_plan ON plan_checkins(plan_id);
   245	CREATE INDEX idx_plan_checkins_user ON plan_checkins(user_id);
   246	CREATE INDEX idx_plan_suggestions_plan ON plan_suggestions(plan_id) WHERE status = 'pending';
   247	CREATE INDEX idx_plan_exports_plan ON plan_exports(plan_id);
   248	
   249	-- Triggers
   250	CREATE TRIGGER update_plan_collaborators_updated_at BEFORE UPDATE ON plan_collaborators FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   251	CREATE TRIGGER update_plan_templates_updated_at BEFORE UPDATE ON plan_templates FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   252	CREATE TRIGGER update_plan_comments_updated_at BEFORE UPDATE ON plan_comments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   253	CREATE TRIGGER update_plan_routes_updated_at BEFORE UPDATE ON plan_routes FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   254	
   255	-- RLS Policies
   256	ALTER TABLE plan_collaborators ENABLE ROW LEVEL SECURITY;
   257	ALTER TABLE plan_invitations ENABLE ROW LEVEL SECURITY;
   258	ALTER TABLE plan_templates ENABLE ROW LEVEL SECURITY;
   259	ALTER TABLE plan_template_usage ENABLE ROW LEVEL SECURITY;
   260	ALTER TABLE plan_activities ENABLE ROW LEVEL SECURITY;
   261	ALTER TABLE plan_comments ENABLE ROW LEVEL SECURITY;
   262	ALTER TABLE plan_votes ENABLE ROW LEVEL SECURITY;
   263	ALTER TABLE plan_checkins ENABLE ROW LEVEL SECURITY;
   264	ALTER TABLE plan_routes ENABLE ROW LEVEL SECURITY;
   265	ALTER TABLE plan_exports ENABLE ROW LEVEL SECURITY;
   266	ALTER TABLE plan_suggestions ENABLE ROW LEVEL SECURITY;
   267	
   268	-- Plan collaborators can view plan data
   269	CREATE POLICY plan_collaborators_view ON plan_collaborators FOR SELECT
   270	    USING (
   271	        user_id = auth.uid() OR 
   272	        EXISTS (
   273	            SELECT 1 FROM plan_collaborators pc2 
   274	            WHERE pc2.plan_id = plan_collaborators.plan_id 
   275	            AND pc2.user_id = auth.uid()
   276	        ) OR
   277	        EXISTS (
   278	            SELECT 1 FROM plans WHERE id = plan_id AND user_id = auth.uid()
   279	        )
   280	    );
   281	
   282	CREATE POLICY plan_collaborators_manage ON plan_collaborators FOR ALL
   283	    USING (
   284	        EXISTS (
   285	            SELECT 1 FROM plans WHERE id = plan_id AND user_id = auth.uid()
   286	        ) OR is_admin(auth.uid())
   287	    );
   288	
   289	-- Templates policies
   290	CREATE POLICY plan_templates_select ON plan_templates FOR SELECT
   291	    USING (is_public = true OR created_by = auth.uid() OR is_admin(auth.uid()));
   292	
   293	CREATE POLICY plan_templates_insert ON plan_templates FOR INSERT
   294	    WITH CHECK (created_by = auth.uid() OR is_admin(auth.uid()));
   295	
   296	CREATE POLICY plan_templates_update ON plan_templates FOR UPDATE
   297	    USING (created_by = auth.uid() OR is_admin(auth.uid()));
   298	
   299	-- Comments policies
   300	CREATE POLICY plan_comments_select ON plan_comments FOR SELECT
   301	    USING (
   302	        EXISTS (
   303	            SELECT 1 FROM plans p
   304	            LEFT JOIN plan_collaborators pc ON p.id = pc.plan_id
   305	            WHERE p.id = plan_comments.plan_id
   306	            AND (p.user_id = auth.uid() OR pc.user_id = auth.uid() OR p.is_public = true)
   307	        )
   308	    );
   309	
   310	CREATE POLICY plan_comments_insert ON plan_comments FOR INSERT
   311	    WITH CHECK (
   312	        EXISTS (
   313	            SELECT 1 FROM plans p
   314	            LEFT JOIN plan_collaborators pc ON p.id = pc.plan_id
   315	            WHERE p.id = plan_id
   316	            AND (p.user_id = auth.uid() OR pc.user_id = auth.uid())
   317	        ) AND user_id = auth.uid()
   318	    );
   319	
   320	CREATE POLICY plan_comments_update ON plan_comments FOR UPDATE
   321	    USING (user_id = auth.uid());
   322	
   323	-- Similar patterns for other tables...
=== FILE: ./db/PROFILES.sql ===
     1	-- SceneScout v14 Extended User Profiles
     2	-- This file contains tables for enhanced user profiles and social features
     3	
     4	-- User interests and preferences
     5	CREATE TABLE user_interests (
     6	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     7	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
     8	    category VARCHAR(100) NOT NULL, -- music, food, art, sports, etc.
     9	    subcategory VARCHAR(100), -- rock, jazz, italian, etc.
    10	    interest_level INTEGER DEFAULT 3 CHECK (interest_level BETWEEN 1 AND 5), -- 1=low, 5=high
    11	    source VARCHAR(50) DEFAULT 'manual', -- manual, inferred, imported
    12	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    13	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    14	    UNIQUE(user_id, category, subcategory)
    15	);
    16	
    17	-- User following relationships
    18	CREATE TABLE user_follows (
    19	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    20	    follower_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    21	    following_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    22	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    23	    UNIQUE(follower_id, following_id),
    24	    CHECK (follower_id != following_id)
    25	);
    26	
    27	-- User achievements/badges
    28	CREATE TABLE user_achievements (
    29	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    30	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    31	    achievement_type VARCHAR(50) NOT NULL, -- early_adopter, event_explorer, super_planner, etc.
    32	    achievement_name VARCHAR(255) NOT NULL,
    33	    description TEXT,
    34	    icon_url TEXT,
    35	    badge_color VARCHAR(20),
    36	    points INTEGER DEFAULT 0,
    37	    rarity VARCHAR(20) DEFAULT 'common' CHECK (rarity IN ('common', 'uncommon', 'rare', 'legendary')),
    38	    earned_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    39	    metadata JSONB DEFAULT '{}'
    40	);
    41	
    42	-- User reviews/ratings
    43	CREATE TABLE user_reviews (
    44	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    45	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    46	    entity_type VARCHAR(20) NOT NULL CHECK (entity_type IN ('event', 'venue', 'plan')),
    47	    entity_id UUID NOT NULL,
    48	    rating INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5),
    49	    review_text TEXT,
    50	    photos JSONB DEFAULT '[]', -- Array of photo URLs
    51	    helpful_count INTEGER DEFAULT 0,
    52	    is_verified_attendance BOOLEAN DEFAULT false,
    53	    is_featured BOOLEAN DEFAULT false,
    54	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    55	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    56	    UNIQUE(user_id, entity_type, entity_id)
    57	);
    58	
    59	-- Review helpfulness votes
    60	CREATE TABLE review_votes (
    61	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    62	    review_id UUID NOT NULL REFERENCES user_reviews(id) ON DELETE CASCADE,
    63	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    64	    is_helpful BOOLEAN NOT NULL,
    65	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    66	    UNIQUE(review_id, user_id)
    67	);
    68	
    69	-- User privacy settings
    70	CREATE TABLE user_privacy_settings (
    71	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    72	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    73	    profile_visibility VARCHAR(20) DEFAULT 'public' CHECK (profile_visibility IN ('public', 'friends', 'private')),
    74	    show_activity BOOLEAN DEFAULT true,
    75	    show_events BOOLEAN DEFAULT true,
    76	    show_plans BOOLEAN DEFAULT false,
    77	    show_followers BOOLEAN DEFAULT true,
    78	    show_location BOOLEAN DEFAULT false,
    79	    allow_messages BOOLEAN DEFAULT true,
    80	    allow_friend_requests BOOLEAN DEFAULT true,
    81	    newsletter_subscribed BOOLEAN DEFAULT true,
    82	    marketing_emails BOOLEAN DEFAULT false,
    83	    event_recommendations BOOLEAN DEFAULT true,
    84	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    85	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    86	    UNIQUE(user_id)
    87	);
    88	
    89	-- User statistics
    90	CREATE TABLE user_stats (
    91	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    92	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    93	    events_attended INTEGER DEFAULT 0,
    94	    events_saved INTEGER DEFAULT 0,
    95	    plans_created INTEGER DEFAULT 0,
    96	    reviews_written INTEGER DEFAULT 0,
    97	    followers_count INTEGER DEFAULT 0,
    98	    following_count INTEGER DEFAULT 0,
    99	    points_total INTEGER DEFAULT 0,
   100	    streak_days INTEGER DEFAULT 0, -- Consecutive days using app
   101	    last_activity_date DATE DEFAULT CURRENT_DATE,
   102	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   103	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   104	    UNIQUE(user_id)
   105	);
   106	
   107	-- User levels/tiers
   108	CREATE TABLE user_levels (
   109	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   110	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   111	    level INTEGER DEFAULT 1,
   112	    level_name VARCHAR(50) DEFAULT 'Newbie',
   113	    points_required INTEGER DEFAULT 0,
   114	    points_current INTEGER DEFAULT 0,
   115	    tier VARCHAR(20) DEFAULT 'bronze' CHECK (tier IN ('bronze', 'silver', 'gold', 'platinum')),
   116	    perks JSONB DEFAULT '[]', -- Array of perks/benefits
   117	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   118	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   119	    UNIQUE(user_id)
   120	);
   121	
   122	-- Friend requests
   123	CREATE TABLE friend_requests (
   124	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   125	    sender_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   126	    receiver_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   127	    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'rejected', 'cancelled')),
   128	    message TEXT,
   129	    responded_at TIMESTAMP WITH TIME ZONE,
   130	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   131	    UNIQUE(sender_id, receiver_id),
   132	    CHECK (sender_id != receiver_id)
   133	);
   134	
   135	-- User device/session tracking
   136	CREATE TABLE user_devices (
   137	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   138	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   139	    device_id VARCHAR(255) NOT NULL,
   140	    device_type VARCHAR(20), -- mobile, tablet, desktop
   141	    device_name VARCHAR(255),
   142	    os VARCHAR(50),
   143	    browser VARCHAR(50),
   144	    app_version VARCHAR(20),
   145	    is_active BOOLEAN DEFAULT true,
   146	    last_used_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   147	    push_token TEXT,
   148	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   149	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   150	    UNIQUE(user_id, device_id)
   151	);
   152	
   153	-- User blocked/hidden content
   154	CREATE TABLE user_blocks (
   155	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   156	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   157	    blocked_entity_type VARCHAR(20) NOT NULL CHECK (blocked_entity_type IN ('user', 'venue', 'event', 'category')),
   158	    blocked_entity_id UUID NOT NULL,
   159	    reason VARCHAR(100),
   160	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   161	    UNIQUE(user_id, blocked_entity_type, blocked_entity_id)
   162	);
   163	
   164	-- Functions for profile management
   165	CREATE OR REPLACE FUNCTION update_user_stats_on_event_save()
   166	RETURNS TRIGGER AS $$
   167	BEGIN
   168	    IF TG_OP = 'INSERT' AND NEW.is_favorite = true THEN
   169	        INSERT INTO user_stats (user_id, events_saved)
   170	        VALUES (NEW.user_id, 1)
   171	        ON CONFLICT (user_id)
   172	        DO UPDATE SET 
   173	            events_saved = user_stats.events_saved + 1,
   174	            updated_at = CURRENT_TIMESTAMP;
   175	    ELSIF TG_OP = 'UPDATE' THEN
   176	        -- Favorite status changed
   177	        IF OLD.is_favorite != NEW.is_favorite THEN
   178	            INSERT INTO user_stats (user_id, events_saved)
   179	            VALUES (
   180	                NEW.user_id, 
   181	                CASE WHEN NEW.is_favorite THEN 1 ELSE -1 END
   182	            )
   183	            ON CONFLICT (user_id)
   184	            DO UPDATE SET 
   185	                events_saved = GREATEST(0, user_stats.events_saved + 
   186	                    CASE WHEN NEW.is_favorite THEN 1 ELSE -1 END
   187	                ),
   188	                updated_at = CURRENT_TIMESTAMP;
   189	        END IF;
   190	    END IF;
   191	    
   192	    RETURN COALESCE(NEW, OLD);
   193	END;
   194	$$ LANGUAGE plpgsql;
   195	
   196	CREATE TRIGGER update_user_stats_on_event_save_trigger
   197	    AFTER INSERT OR UPDATE ON user_events
   198	    FOR EACH ROW
   199	    EXECUTE FUNCTION update_user_stats_on_event_save();
   200	
   201	-- Update follower counts
   202	CREATE OR REPLACE FUNCTION update_follower_counts()
   203	RETURNS TRIGGER AS $$
   204	BEGIN
   205	    IF TG_OP = 'INSERT' THEN
   206	        -- Increment following count for follower
   207	        UPDATE user_stats SET 
   208	            following_count = following_count + 1,
   209	            updated_at = CURRENT_TIMESTAMP
   210	        WHERE user_id = NEW.follower_id;
   211	        
   212	        -- Increment followers count for followed user
   213	        UPDATE user_stats SET 
   214	            followers_count = followers_count + 1,
   215	            updated_at = CURRENT_TIMESTAMP
   216	        WHERE user_id = NEW.following_id;
   217	        
   218	    ELSIF TG_OP = 'DELETE' THEN
   219	        -- Decrement counts
   220	        UPDATE user_stats SET 
   221	            following_count = GREATEST(0, following_count - 1),
   222	            updated_at = CURRENT_TIMESTAMP
   223	        WHERE user_id = OLD.follower_id;
   224	        
   225	        UPDATE user_stats SET 
   226	            followers_count = GREATEST(0, followers_count - 1),
   227	            updated_at = CURRENT_TIMESTAMP
   228	        WHERE user_id = OLD.following_id;
   229	    END IF;
   230	    
   231	    RETURN COALESCE(NEW, OLD);
   232	END;
   233	$$ LANGUAGE plpgsql;
   234	
   235	CREATE TRIGGER update_follower_counts_trigger
   236	    AFTER INSERT OR DELETE ON user_follows
   237	    FOR EACH ROW
   238	    EXECUTE FUNCTION update_follower_counts();
   239	
   240	-- Calculate user level based on points
   241	CREATE OR REPLACE FUNCTION update_user_level(user_id_param UUID)
   242	RETURNS void AS $$
   243	DECLARE
   244	    total_points INTEGER;
   245	    new_level INTEGER;
   246	    new_level_name VARCHAR(50);
   247	    new_tier VARCHAR(20);
   248	BEGIN
   249	    -- Get total points from achievements and other sources
   250	    SELECT COALESCE(SUM(points), 0) INTO total_points
   251	    FROM user_achievements
   252	    WHERE user_id = user_id_param;
   253	    
   254	    -- Calculate level (every 100 points = 1 level)
   255	    new_level := GREATEST(1, total_points / 100 + 1);
   256	    
   257	    -- Determine level name and tier
   258	    new_level_name := CASE 
   259	        WHEN new_level >= 50 THEN 'Legend'
   260	        WHEN new_level >= 25 THEN 'Expert'
   261	        WHEN new_level >= 10 THEN 'Explorer'
   262	        WHEN new_level >= 5 THEN 'Regular'
   263	        ELSE 'Newbie'
   264	    END;
   265	    
   266	    new_tier := CASE 
   267	        WHEN new_level >= 50 THEN 'platinum'
   268	        WHEN new_level >= 25 THEN 'gold'
   269	        WHEN new_level >= 10 THEN 'silver'
   270	        ELSE 'bronze'
   271	    END;
   272	    
   273	    -- Update user level
   274	    INSERT INTO user_levels (user_id, level, level_name, points_current, tier)
   275	    VALUES (user_id_param, new_level, new_level_name, total_points, new_tier)
   276	    ON CONFLICT (user_id)
   277	    DO UPDATE SET 
   278	        level = new_level,
   279	        level_name = new_level_name,
   280	        points_current = total_points,
   281	        tier = new_tier,
   282	        updated_at = CURRENT_TIMESTAMP;
   283	END;
   284	$$ LANGUAGE plpgsql;
   285	
   286	-- Indexes
   287	CREATE INDEX idx_user_interests_user ON user_interests(user_id);
   288	CREATE INDEX idx_user_interests_category ON user_interests(category, subcategory);
   289	CREATE INDEX idx_user_follows_follower ON user_follows(follower_id);
   290	CREATE INDEX idx_user_follows_following ON user_follows(following_id);
   291	CREATE INDEX idx_user_achievements_user ON user_achievements(user_id);
   292	CREATE INDEX idx_user_achievements_type ON user_achievements(achievement_type);
   293	CREATE INDEX idx_user_reviews_user ON user_reviews(user_id);
   294	CREATE INDEX idx_user_reviews_entity ON user_reviews(entity_type, entity_id);
   295	CREATE INDEX idx_user_reviews_rating ON user_reviews(rating, created_at DESC);
   296	CREATE INDEX idx_review_votes_review ON review_votes(review_id);
   297	CREATE INDEX idx_user_privacy_user ON user_privacy_settings(user_id);
   298	CREATE INDEX idx_user_stats_user ON user_stats(user_id);
   299	CREATE INDEX idx_user_levels_user ON user_levels(user_id);
   300	CREATE INDEX idx_friend_requests_receiver ON friend_requests(receiver_id) WHERE status = 'pending';
   301	CREATE INDEX idx_user_devices_user ON user_devices(user_id) WHERE is_active = true;
   302	CREATE INDEX idx_user_blocks_user ON user_blocks(user_id);
   303	
   304	-- Triggers
   305	CREATE TRIGGER update_user_interests_updated_at BEFORE UPDATE ON user_interests FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   306	CREATE TRIGGER update_user_reviews_updated_at BEFORE UPDATE ON user_reviews FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   307	CREATE TRIGGER update_user_privacy_updated_at BEFORE UPDATE ON user_privacy_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   308	CREATE TRIGGER update_user_stats_updated_at BEFORE UPDATE ON user_stats FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   309	CREATE TRIGGER update_user_levels_updated_at BEFORE UPDATE ON user_levels FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   310	CREATE TRIGGER update_user_devices_updated_at BEFORE UPDATE ON user_devices FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   311	
   312	-- RLS Policies
   313	ALTER TABLE user_interests ENABLE ROW LEVEL SECURITY;
   314	ALTER TABLE user_follows ENABLE ROW LEVEL SECURITY;
   315	ALTER TABLE user_achievements ENABLE ROW LEVEL SECURITY;
   316	ALTER TABLE user_reviews ENABLE ROW LEVEL SECURITY;
   317	ALTER TABLE review_votes ENABLE ROW LEVEL SECURITY;
   318	ALTER TABLE user_privacy_settings ENABLE ROW LEVEL SECURITY;
   319	ALTER TABLE user_stats ENABLE ROW LEVEL SECURITY;
   320	ALTER TABLE user_levels ENABLE ROW LEVEL SECURITY;
   321	ALTER TABLE friend_requests ENABLE ROW LEVEL SECURITY;
   322	ALTER TABLE user_devices ENABLE ROW LEVEL SECURITY;
   323	ALTER TABLE user_blocks ENABLE ROW LEVEL SECURITY;
   324	
   325	-- User interests - private to user
   326	CREATE POLICY user_interests_select ON user_interests FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   327	CREATE POLICY user_interests_all ON user_interests FOR ALL USING (user_id = auth.uid());
   328	
   329	-- User follows - public read
   330	CREATE POLICY user_follows_select ON user_follows FOR SELECT USING (true);
   331	CREATE POLICY user_follows_manage ON user_follows FOR ALL USING (follower_id = auth.uid());
   332	
   333	-- Achievements - public read based on privacy settings
   334	CREATE POLICY user_achievements_select ON user_achievements FOR SELECT USING (
   335	    user_id = auth.uid() 
   336	    OR is_admin(auth.uid())
   337	    OR EXISTS (
   338	        SELECT 1 FROM user_privacy_settings ups 
   339	        WHERE ups.user_id = user_achievements.user_id 
   340	        AND ups.profile_visibility IN ('public', 'friends')
   341	    )
   342	);
   343	
   344	-- Reviews - public read
   345	CREATE POLICY user_reviews_select ON user_reviews FOR SELECT USING (true);
   346	CREATE POLICY user_reviews_manage ON user_reviews FOR ALL USING (user_id = auth.uid());
   347	
   348	-- Review votes
   349	CREATE POLICY review_votes_select ON review_votes FOR SELECT USING (true);
   350	CREATE POLICY review_votes_manage ON review_votes FOR ALL USING (user_id = auth.uid());
   351	
   352	-- Privacy settings - private to user
   353	CREATE POLICY user_privacy_select ON user_privacy_settings FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   354	CREATE POLICY user_privacy_manage ON user_privacy_settings FOR ALL USING (user_id = auth.uid());
   355	
   356	-- Stats - public read based on privacy
   357	CREATE POLICY user_stats_select ON user_stats FOR SELECT USING (
   358	    user_id = auth.uid()
   359	    OR is_admin(auth.uid())
   360	    OR EXISTS (
   361	        SELECT 1 FROM user_privacy_settings ups 
   362	        WHERE ups.user_id = user_stats.user_id 
   363	        AND ups.show_activity = true
   364	        AND ups.profile_visibility IN ('public', 'friends')
   365	    )
   366	);
   367	
   368	-- Levels - public read
   369	CREATE POLICY user_levels_select ON user_levels FOR SELECT USING (true);
   370	
   371	-- Friend requests
   372	CREATE POLICY friend_requests_select ON friend_requests FOR SELECT 
   373	    USING (sender_id = auth.uid() OR receiver_id = auth.uid() OR is_admin(auth.uid()));
   374	CREATE POLICY friend_requests_manage ON friend_requests FOR ALL 
   375	    USING (sender_id = auth.uid() OR receiver_id = auth.uid());
   376	
   377	-- Devices - private to user
   378	CREATE POLICY user_devices_select ON user_devices FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   379	CREATE POLICY user_devices_manage ON user_devices FOR ALL USING (user_id = auth.uid());
   380	
   381	-- Blocks - private to user
   382	CREATE POLICY user_blocks_select ON user_blocks FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   383	CREATE POLICY user_blocks_manage ON user_blocks FOR ALL USING (user_id = auth.uid());
=== FILE: ./db/PURGE_SEED.sql ===
     1	-- SceneScout v14 Seed Data Purge Script
     2	-- This script removes all development seed data from the database
     3	-- *** USE WITH CAUTION - THIS WILL DELETE DATA ***
     4	
     5	-- Confirmation check - uncomment the line below to enable purging
     6	-- SET session_replication_role = replica; -- Disable triggers temporarily if needed
     7	
     8	DO $$
     9	DECLARE
    10	    rec RECORD;
    11	    table_count INTEGER := 0;
    12	BEGIN
    13	    -- Check if this looks like seed data (look for our known seed IDs)
    14	    IF NOT EXISTS (
    15	        SELECT 1 FROM users 
    16	        WHERE id IN (
    17	            '550e8400-e29b-41d4-a716-446655440100',
    18	            '550e8400-e29b-41d4-a716-446655440101'
    19	        )
    20	    ) THEN
    21	        RAISE EXCEPTION 'No seed data detected. This script only removes seed data with known UUIDs starting with 550e8400.';
    22	    END IF;
    23	
    24	    RAISE NOTICE 'Starting seed data purge...';
    25	    
    26	    -- Delete in reverse dependency order to avoid foreign key violations
    27	    
    28	    -- Analytics and tracking data
    29	    DELETE FROM event_views WHERE event_id IN (
    30	        SELECT id FROM events WHERE id::text LIKE '550e8400%'
    31	    );
    32	    GET DIAGNOSTICS table_count = ROW_COUNT;
    33	    RAISE NOTICE 'Deleted % event_views records', table_count;
    34	    
    35	    DELETE FROM user_activities WHERE user_id IN (
    36	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    37	    );
    38	    GET DIAGNOSTICS table_count = ROW_COUNT;
    39	    RAISE NOTICE 'Deleted % user_activities records', table_count;
    40	    
    41	    DELETE FROM search_analytics WHERE user_id IN (
    42	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    43	    );
    44	    GET DIAGNOSTICS table_count = ROW_COUNT;
    45	    RAISE NOTICE 'Deleted % search_analytics records', table_count;
    46	    
    47	    -- Reviews and social features
    48	    DELETE FROM review_votes WHERE review_id IN (
    49	        SELECT id FROM user_reviews WHERE user_id IN (
    50	            SELECT id FROM users WHERE id::text LIKE '550e8400%'
    51	        )
    52	    );
    53	    GET DIAGNOSTICS table_count = ROW_COUNT;
    54	    RAISE NOTICE 'Deleted % review_votes records', table_count;
    55	    
    56	    DELETE FROM user_reviews WHERE user_id IN (
    57	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    58	    );
    59	    GET DIAGNOSTICS table_count = ROW_COUNT;
    60	    RAISE NOTICE 'Deleted % user_reviews records', table_count;
    61	    
    62	    DELETE FROM user_follows WHERE follower_id IN (
    63	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    64	    ) OR following_id IN (
    65	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    66	    );
    67	    GET DIAGNOSTICS table_count = ROW_COUNT;
    68	    RAISE NOTICE 'Deleted % user_follows records', table_count;
    69	    
    70	    -- User profile data
    71	    DELETE FROM user_achievements WHERE user_id IN (
    72	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    73	    );
    74	    GET DIAGNOSTICS table_count = ROW_COUNT;
    75	    RAISE NOTICE 'Deleted % user_achievements records', table_count;
    76	    
    77	    DELETE FROM user_interests WHERE user_id IN (
    78	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    79	    );
    80	    GET DIAGNOSTICS table_count = ROW_COUNT;
    81	    RAISE NOTICE 'Deleted % user_interests records', table_count;
    82	    
    83	    DELETE FROM user_stats WHERE user_id IN (
    84	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    85	    );
    86	    GET DIAGNOSTICS table_count = ROW_COUNT;
    87	    RAISE NOTICE 'Deleted % user_stats records', table_count;
    88	    
    89	    DELETE FROM user_levels WHERE user_id IN (
    90	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    91	    );
    92	    GET DIAGNOSTICS table_count = ROW_COUNT;
    93	    RAISE NOTICE 'Deleted % user_levels records', table_count;
    94	    
    95	    DELETE FROM user_privacy_settings WHERE user_id IN (
    96	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
    97	    );
    98	    GET DIAGNOSTICS table_count = ROW_COUNT;
    99	    RAISE NOTICE 'Deleted % user_privacy_settings records', table_count;
   100	    
   101	    -- Notification data
   102	    DELETE FROM push_notification_interactions WHERE user_id IN (
   103	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   104	    );
   105	    GET DIAGNOSTICS table_count = ROW_COUNT;
   106	    RAISE NOTICE 'Deleted % push_notification_interactions records', table_count;
   107	    
   108	    DELETE FROM push_notification_queue WHERE user_id IN (
   109	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   110	    );
   111	    GET DIAGNOSTICS table_count = ROW_COUNT;
   112	    RAISE NOTICE 'Deleted % push_notification_queue records', table_count;
   113	    
   114	    DELETE FROM push_subscriptions WHERE user_id IN (
   115	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   116	    );
   117	    GET DIAGNOSTICS table_count = ROW_COUNT;
   118	    RAISE NOTICE 'Deleted % push_subscriptions records', table_count;
   119	    
   120	    -- Submission data
   121	    DELETE FROM submission_rewards WHERE user_id IN (
   122	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   123	    );
   124	    GET DIAGNOSTICS table_count = ROW_COUNT;
   125	    RAISE NOTICE 'Deleted % submission_rewards records', table_count;
   126	    
   127	    DELETE FROM submission_attachments WHERE submission_id IN (
   128	        SELECT id FROM submissions WHERE id::text LIKE '550e8400%'
   129	    );
   130	    GET DIAGNOSTICS table_count = ROW_COUNT;
   131	    RAISE NOTICE 'Deleted % submission_attachments records', table_count;
   132	    
   133	    DELETE FROM submission_comments WHERE submission_id IN (
   134	        SELECT id FROM submissions WHERE id::text LIKE '550e8400%'
   135	    );
   136	    GET DIAGNOSTICS table_count = ROW_COUNT;
   137	    RAISE NOTICE 'Deleted % submission_comments records', table_count;
   138	    
   139	    DELETE FROM submission_status_history WHERE submission_id IN (
   140	        SELECT id FROM submissions WHERE id::text LIKE '550e8400%'
   141	    );
   142	    GET DIAGNOSTICS table_count = ROW_COUNT;
   143	    RAISE NOTICE 'Deleted % submission_status_history records', table_count;
   144	    
   145	    DELETE FROM submissions WHERE id::text LIKE '550e8400%';
   146	    GET DIAGNOSTICS table_count = ROW_COUNT;
   147	    RAISE NOTICE 'Deleted % submissions records', table_count;
   148	    
   149	    -- Plan data
   150	    DELETE FROM plan_exports WHERE plan_id IN (
   151	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   152	    );
   153	    GET DIAGNOSTICS table_count = ROW_COUNT;
   154	    RAISE NOTICE 'Deleted % plan_exports records', table_count;
   155	    
   156	    DELETE FROM plan_suggestions WHERE plan_id IN (
   157	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   158	    );
   159	    GET DIAGNOSTICS table_count = ROW_COUNT;
   160	    RAISE NOTICE 'Deleted % plan_suggestions records', table_count;
   161	    
   162	    DELETE FROM plan_checkins WHERE plan_id IN (
   163	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   164	    );
   165	    GET DIAGNOSTICS table_count = ROW_COUNT;
   166	    RAISE NOTICE 'Deleted % plan_checkins records', table_count;
   167	    
   168	    DELETE FROM plan_votes WHERE plan_id IN (
   169	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   170	    );
   171	    GET DIAGNOSTICS table_count = ROW_COUNT;
   172	    RAISE NOTICE 'Deleted % plan_votes records', table_count;
   173	    
   174	    DELETE FROM plan_comments WHERE plan_id IN (
   175	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   176	    );
   177	    GET DIAGNOSTICS table_count = ROW_COUNT;
   178	    RAISE NOTICE 'Deleted % plan_comments records', table_count;
   179	    
   180	    DELETE FROM plan_activities WHERE plan_id IN (
   181	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   182	    );
   183	    GET DIAGNOSTICS table_count = ROW_COUNT;
   184	    RAISE NOTICE 'Deleted % plan_activities records', table_count;
   185	    
   186	    DELETE FROM plan_template_usage WHERE template_id IN (
   187	        SELECT id FROM plan_templates WHERE id::text LIKE '550e8400%'
   188	    ) OR user_id IN (
   189	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   190	    );
   191	    GET DIAGNOSTICS table_count = ROW_COUNT;
   192	    RAISE NOTICE 'Deleted % plan_template_usage records', table_count;
   193	    
   194	    DELETE FROM plan_templates WHERE id::text LIKE '550e8400%';
   195	    GET DIAGNOSTICS table_count = ROW_COUNT;
   196	    RAISE NOTICE 'Deleted % plan_templates records', table_count;
   197	    
   198	    DELETE FROM plan_invitations WHERE plan_id IN (
   199	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   200	    );
   201	    GET DIAGNOSTICS table_count = ROW_COUNT;
   202	    RAISE NOTICE 'Deleted % plan_invitations records', table_count;
   203	    
   204	    DELETE FROM plan_collaborators WHERE plan_id IN (
   205	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   206	    );
   207	    GET DIAGNOSTICS table_count = ROW_COUNT;
   208	    RAISE NOTICE 'Deleted % plan_collaborators records', table_count;
   209	    
   210	    DELETE FROM plan_events WHERE plan_id IN (
   211	        SELECT id FROM plans WHERE id::text LIKE '550e8400%'
   212	    );
   213	    GET DIAGNOSTICS table_count = ROW_COUNT;
   214	    RAISE NOTICE 'Deleted % plan_events records', table_count;
   215	    
   216	    DELETE FROM plans WHERE id::text LIKE '550e8400%';
   217	    GET DIAGNOSTICS table_count = ROW_COUNT;
   218	    RAISE NOTICE 'Deleted % plans records', table_count;
   219	    
   220	    -- User events (favorites/saved)
   221	    DELETE FROM user_events WHERE user_id IN (
   222	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   223	    );
   224	    GET DIAGNOSTICS table_count = ROW_COUNT;
   225	    RAISE NOTICE 'Deleted % user_events records', table_count;
   226	    
   227	    -- Events
   228	    DELETE FROM events WHERE id::text LIKE '550e8400%';
   229	    GET DIAGNOSTICS table_count = ROW_COUNT;
   230	    RAISE NOTICE 'Deleted % events records', table_count;
   231	    
   232	    -- Venues
   233	    DELETE FROM venues WHERE id::text LIKE '550e8400%';
   234	    GET DIAGNOSTICS table_count = ROW_COUNT;
   235	    RAISE NOTICE 'Deleted % venues records', table_count;
   236	    
   237	    -- Payment/subscription data (if any seed data exists)
   238	    DELETE FROM payments WHERE user_id IN (
   239	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   240	    );
   241	    GET DIAGNOSTICS table_count = ROW_COUNT;
   242	    RAISE NOTICE 'Deleted % payments records', table_count;
   243	    
   244	    DELETE FROM subscriptions WHERE user_id IN (
   245	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   246	    );
   247	    GET DIAGNOSTICS table_count = ROW_COUNT;
   248	    RAISE NOTICE 'Deleted % subscriptions records', table_count;
   249	    
   250	    DELETE FROM subscription_plans WHERE id::text LIKE '550e8400%';
   251	    GET DIAGNOSTICS table_count = ROW_COUNT;
   252	    RAISE NOTICE 'Deleted % subscription_plans records', table_count;
   253	    
   254	    -- Notification templates (if they are seed data)
   255	    DELETE FROM push_notification_templates WHERE created_by IN (
   256	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   257	    ) OR name IN ('event_reminder', 'new_events_weekly', 'plan_shared');
   258	    GET DIAGNOSTICS table_count = ROW_COUNT;
   259	    RAISE NOTICE 'Deleted % push_notification_templates records', table_count;
   260	    
   261	    -- User profiles and users
   262	    DELETE FROM profiles WHERE user_id IN (
   263	        SELECT id FROM users WHERE id::text LIKE '550e8400%'
   264	    );
   265	    GET DIAGNOSTICS table_count = ROW_COUNT;
   266	    RAISE NOTICE 'Deleted % profiles records', table_count;
   267	    
   268	    DELETE FROM users WHERE id::text LIKE '550e8400%';
   269	    GET DIAGNOSTICS table_count = ROW_COUNT;
   270	    RAISE NOTICE 'Deleted % users records', table_count;
   271	    
   272	    -- Cities (careful - only delete seed cities)
   273	    DELETE FROM cities WHERE id::text LIKE '550e8400%';
   274	    GET DIAGNOSTICS table_count = ROW_COUNT;
   275	    RAISE NOTICE 'Deleted % cities records', table_count;
   276	    
   277	    -- Clean up any orphaned records that might reference deleted data
   278	    DELETE FROM promotions WHERE entity_id::text LIKE '550e8400%';
   279	    GET DIAGNOSTICS table_count = ROW_COUNT;
   280	    RAISE NOTICE 'Deleted % promotions records', table_count;
   281	    
   282	    -- Remove table comments that indicate seed data
   283	    COMMENT ON TABLE cities IS NULL;
   284	    COMMENT ON TABLE users IS NULL;
   285	    COMMENT ON TABLE events IS NULL;
   286	    
   287	    RAISE NOTICE '';
   288	    RAISE NOTICE '✅ Seed data purge completed successfully!';
   289	    RAISE NOTICE 'All development seed data has been removed from the database.';
   290	    RAISE NOTICE 'The database is now clean and ready for production use.';
   291	    
   292	END $$;
   293	
   294	-- Reset any sequences if needed (uncomment if you want to reset auto-incrementing values)
   295	-- ALTER SEQUENCE IF EXISTS some_sequence_name RESTART WITH 1;
   296	
   297	-- Re-enable triggers if they were disabled
   298	-- SET session_replication_role = DEFAULT;
=== FILE: ./db/PUSH.sql ===
     1	-- SceneScout v14 Push Notification Tables
     2	-- This file contains tables for managing push notifications
     3	
     4	-- Push notification queue
     5	CREATE TABLE push_notification_queue (
     6	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     7	    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
     8	    subscription_id UUID REFERENCES push_subscriptions(id) ON DELETE CASCADE,
     9	    notification_type VARCHAR(50) NOT NULL, -- event_reminder, new_events, plan_invite, etc.
    10	    title VARCHAR(255) NOT NULL,
    11	    body TEXT NOT NULL,
    12	    icon_url TEXT,
    13	    badge_url TEXT,
    14	    image_url TEXT,
    15	    action_url TEXT,
    16	    data JSONB DEFAULT '{}', -- Additional notification data
    17	    priority VARCHAR(20) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
    18	    ttl INTEGER DEFAULT 86400, -- Time to live in seconds
    19	    scheduled_for TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    20	    expires_at TIMESTAMP WITH TIME ZONE,
    21	    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'sending', 'sent', 'failed', 'expired', 'cancelled')),
    22	    sent_at TIMESTAMP WITH TIME ZONE,
    23	    delivered_at TIMESTAMP WITH TIME ZONE,
    24	    clicked_at TIMESTAMP WITH TIME ZONE,
    25	    error_message TEXT,
    26	    retry_count INTEGER DEFAULT 0,
    27	    max_retries INTEGER DEFAULT 3,
    28	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    29	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    30	);
    31	
    32	-- Push notification templates
    33	CREATE TABLE push_notification_templates (
    34	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    35	    name VARCHAR(100) UNIQUE NOT NULL,
    36	    notification_type VARCHAR(50) NOT NULL,
    37	    title_template TEXT NOT NULL, -- Supports variables like {{event_name}}
    38	    body_template TEXT NOT NULL,
    39	    icon_url TEXT,
    40	    badge_url TEXT,
    41	    action_url_template TEXT,
    42	    default_data JSONB DEFAULT '{}',
    43	    variables JSONB DEFAULT '[]', -- Expected variables for template
    44	    is_active BOOLEAN DEFAULT true,
    45	    created_by UUID REFERENCES users(id),
    46	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    47	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    48	);
    49	
    50	-- Batch notification jobs
    51	CREATE TABLE push_notification_batches (
    52	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    53	    name VARCHAR(255),
    54	    description TEXT,
    55	    notification_type VARCHAR(50) NOT NULL,
    56	    template_id UUID REFERENCES push_notification_templates(id),
    57	    target_criteria JSONB NOT NULL, -- Criteria for selecting users
    58	    total_recipients INTEGER DEFAULT 0,
    59	    notifications_created INTEGER DEFAULT 0,
    60	    notifications_sent INTEGER DEFAULT 0,
    61	    notifications_failed INTEGER DEFAULT 0,
    62	    status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'scheduled', 'processing', 'completed', 'cancelled')),
    63	    scheduled_for TIMESTAMP WITH TIME ZONE,
    64	    started_at TIMESTAMP WITH TIME ZONE,
    65	    completed_at TIMESTAMP WITH TIME ZONE,
    66	    created_by UUID REFERENCES users(id),
    67	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    68	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    69	);
    70	
    71	-- Push notification delivery logs
    72	CREATE TABLE push_delivery_logs (
    73	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    74	    notification_id UUID REFERENCES push_notification_queue(id) ON DELETE CASCADE,
    75	    subscription_id UUID REFERENCES push_subscriptions(id),
    76	    endpoint TEXT NOT NULL,
    77	    status_code INTEGER,
    78	    response_body TEXT,
    79	    response_headers JSONB,
    80	    delivery_attempt INTEGER DEFAULT 1,
    81	    delivered BOOLEAN DEFAULT false,
    82	    delivery_time_ms INTEGER, -- Time taken to deliver in milliseconds
    83	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    84	);
    85	
    86	-- Push notification interactions
    87	CREATE TABLE push_notification_interactions (
    88	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    89	    notification_id UUID REFERENCES push_notification_queue(id) ON DELETE CASCADE,
    90	    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    91	    interaction_type VARCHAR(20) NOT NULL CHECK (interaction_type IN ('delivered', 'opened', 'clicked', 'dismissed', 'action')),
    92	    action_name VARCHAR(50), -- For custom actions
    93	    metadata JSONB DEFAULT '{}',
    94	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    95	);
    96	
    97	-- User notification preferences
    98	CREATE TABLE user_notification_preferences (
    99	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   100	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   101	    notification_type VARCHAR(50) NOT NULL,
   102	    channel VARCHAR(20) NOT NULL DEFAULT 'push' CHECK (channel IN ('push', 'email', 'sms', 'in_app')),
   103	    enabled BOOLEAN DEFAULT true,
   104	    frequency VARCHAR(20) DEFAULT 'immediate' CHECK (frequency IN ('immediate', 'daily', 'weekly', 'never')),
   105	    quiet_hours_start TIME,
   106	    quiet_hours_end TIME,
   107	    timezone VARCHAR(50) DEFAULT 'America/New_York',
   108	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   109	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   110	    UNIQUE(user_id, notification_type, channel)
   111	);
   112	
   113	-- Topic subscriptions for broadcast notifications
   114	CREATE TABLE push_topics (
   115	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   116	    topic_key VARCHAR(100) UNIQUE NOT NULL, -- e.g., 'city:nyc', 'category:music'
   117	    topic_name VARCHAR(255) NOT NULL,
   118	    description TEXT,
   119	    subscriber_count INTEGER DEFAULT 0,
   120	    is_active BOOLEAN DEFAULT true,
   121	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   122	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   123	);
   124	
   125	CREATE TABLE push_topic_subscriptions (
   126	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   127	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   128	    topic_id UUID NOT NULL REFERENCES push_topics(id) ON DELETE CASCADE,
   129	    subscribed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   130	    UNIQUE(user_id, topic_id)
   131	);
   132	
   133	-- Scheduled notification rules
   134	CREATE TABLE push_notification_rules (
   135	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   136	    name VARCHAR(255) NOT NULL,
   137	    description TEXT,
   138	    rule_type VARCHAR(50) NOT NULL, -- event_reminder, weekly_digest, etc.
   139	    trigger_conditions JSONB NOT NULL, -- Conditions that trigger the notification
   140	    template_id UUID REFERENCES push_notification_templates(id),
   141	    target_criteria JSONB DEFAULT '{}', -- Who receives the notification
   142	    schedule_config JSONB DEFAULT '{}', -- Cron expression or time-based config
   143	    is_active BOOLEAN DEFAULT true,
   144	    last_run_at TIMESTAMP WITH TIME ZONE,
   145	    next_run_at TIMESTAMP WITH TIME ZONE,
   146	    created_by UUID REFERENCES users(id),
   147	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   148	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   149	);
   150	
   151	-- Functions for push notifications
   152	CREATE OR REPLACE FUNCTION schedule_event_reminders()
   153	RETURNS INTEGER AS $$
   154	DECLARE
   155	    notifications_created INTEGER := 0;
   156	BEGIN
   157	    -- Create reminder notifications for events happening soon
   158	    INSERT INTO push_notification_queue (
   159	        user_id,
   160	        subscription_id,
   161	        notification_type,
   162	        title,
   163	        body,
   164	        action_url,
   165	        data,
   166	        scheduled_for,
   167	        priority
   168	    )
   169	    SELECT 
   170	        ps.user_id,
   171	        ps.id as subscription_id,
   172	        'event_reminder' as notification_type,
   173	        'Event Reminder: ' || e.name as title,
   174	        'Your saved event "' || e.name || '" is happening ' || 
   175	        CASE 
   176	            WHEN e.event_date = CURRENT_DATE THEN 'today'
   177	            WHEN e.event_date = CURRENT_DATE + INTERVAL '1 day' THEN 'tomorrow'
   178	            ELSE 'on ' || TO_CHAR(e.event_date, 'Mon DD')
   179	        END || 
   180	        COALESCE(' at ' || TO_CHAR(e.start_time, 'HH12:MI AM'), ''),
   181	        '/events/' || e.slug as action_url,
   182	        jsonb_build_object(
   183	            'event_id', e.id,
   184	            'event_name', e.name,
   185	            'event_date', e.event_date,
   186	            'venue_name', v.name
   187	        ) as data,
   188	        ue.reminder_time as scheduled_for,
   189	        'high' as priority
   190	    FROM user_events ue
   191	    JOIN events e ON ue.event_id = e.id
   192	    LEFT JOIN venues v ON e.venue_id = v.id
   193	    JOIN push_subscriptions ps ON ps.user_id = ue.user_id AND ps.is_active = true
   194	    WHERE ue.reminder_time IS NOT NULL
   195	        AND ue.reminder_sent = false
   196	        AND ue.reminder_time <= CURRENT_TIMESTAMP + INTERVAL '1 hour'
   197	        AND e.deleted_at IS NULL
   198	        AND NOT EXISTS (
   199	            SELECT 1 FROM push_notification_queue pnq
   200	            WHERE pnq.user_id = ue.user_id
   201	                AND pnq.data->>'event_id' = e.id::text
   202	                AND pnq.notification_type = 'event_reminder'
   203	                AND pnq.status IN ('pending', 'sent')
   204	        );
   205	    
   206	    GET DIAGNOSTICS notifications_created = ROW_COUNT;
   207	    
   208	    -- Mark reminders as sent
   209	    UPDATE user_events
   210	    SET reminder_sent = true
   211	    WHERE reminder_time <= CURRENT_TIMESTAMP + INTERVAL '1 hour'
   212	        AND reminder_sent = false;
   213	    
   214	    RETURN notifications_created;
   215	END;
   216	$$ LANGUAGE plpgsql;
   217	
   218	-- Indexes for push notification tables
   219	CREATE INDEX idx_push_queue_status ON push_notification_queue(status) WHERE status IN ('pending', 'sending');
   220	CREATE INDEX idx_push_queue_scheduled ON push_notification_queue(scheduled_for) WHERE status = 'pending';
   221	CREATE INDEX idx_push_queue_user ON push_notification_queue(user_id);
   222	CREATE INDEX idx_push_queue_type ON push_notification_queue(notification_type);
   223	CREATE INDEX idx_push_queue_batch ON push_notification_queue(data->>'batch_id') WHERE data->>'batch_id' IS NOT NULL;
   224	
   225	CREATE INDEX idx_push_delivery_notification ON push_delivery_logs(notification_id);
   226	CREATE INDEX idx_push_delivery_subscription ON push_delivery_logs(subscription_id);
   227	
   228	CREATE INDEX idx_push_interactions_notification ON push_notification_interactions(notification_id);
   229	CREATE INDEX idx_push_interactions_user ON push_notification_interactions(user_id);
   230	CREATE INDEX idx_push_interactions_type ON push_notification_interactions(interaction_type);
   231	
   232	CREATE INDEX idx_user_notif_prefs_user ON user_notification_preferences(user_id);
   233	CREATE INDEX idx_user_notif_prefs_type ON user_notification_preferences(notification_type, channel) WHERE enabled = true;
   234	
   235	CREATE INDEX idx_push_topics_key ON push_topics(topic_key) WHERE is_active = true;
   236	CREATE INDEX idx_push_topic_subs_user ON push_topic_subscriptions(user_id);
   237	CREATE INDEX idx_push_topic_subs_topic ON push_topic_subscriptions(topic_id);
   238	
   239	CREATE INDEX idx_push_rules_active ON push_notification_rules(next_run_at) WHERE is_active = true;
   240	
   241	-- Triggers
   242	CREATE TRIGGER update_push_queue_updated_at BEFORE UPDATE ON push_notification_queue FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   243	CREATE TRIGGER update_push_templates_updated_at BEFORE UPDATE ON push_notification_templates FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   244	CREATE TRIGGER update_push_batches_updated_at BEFORE UPDATE ON push_notification_batches FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   245	CREATE TRIGGER update_user_notif_prefs_updated_at BEFORE UPDATE ON user_notification_preferences FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   246	CREATE TRIGGER update_push_topics_updated_at BEFORE UPDATE ON push_topics FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   247	CREATE TRIGGER update_push_rules_updated_at BEFORE UPDATE ON push_notification_rules FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   248	
   249	-- RLS Policies
   250	ALTER TABLE push_notification_queue ENABLE ROW LEVEL SECURITY;
   251	ALTER TABLE push_notification_templates ENABLE ROW LEVEL SECURITY;
   252	ALTER TABLE push_notification_batches ENABLE ROW LEVEL SECURITY;
   253	ALTER TABLE push_delivery_logs ENABLE ROW LEVEL SECURITY;
   254	ALTER TABLE push_notification_interactions ENABLE ROW LEVEL SECURITY;
   255	ALTER TABLE user_notification_preferences ENABLE ROW LEVEL SECURITY;
   256	ALTER TABLE push_topics ENABLE ROW LEVEL SECURITY;
   257	ALTER TABLE push_topic_subscriptions ENABLE ROW LEVEL SECURITY;
   258	ALTER TABLE push_notification_rules ENABLE ROW LEVEL SECURITY;
   259	
   260	-- Users can see their own notifications
   261	CREATE POLICY push_queue_user_select ON push_notification_queue FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   262	CREATE POLICY push_interactions_user_select ON push_notification_interactions FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   263	
   264	-- Users can manage their preferences
   265	CREATE POLICY user_notif_prefs_select ON user_notification_preferences FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   266	CREATE POLICY user_notif_prefs_insert ON user_notification_preferences FOR INSERT WITH CHECK (user_id = auth.uid());
   267	CREATE POLICY user_notif_prefs_update ON user_notification_preferences FOR UPDATE USING (user_id = auth.uid());
   268	CREATE POLICY user_notif_prefs_delete ON user_notification_preferences FOR DELETE USING (user_id = auth.uid());
   269	
   270	-- Users can manage their topic subscriptions
   271	CREATE POLICY push_topics_select ON push_topics FOR SELECT USING (is_active = true OR is_admin(auth.uid()));
   272	CREATE POLICY push_topic_subs_select ON push_topic_subscriptions FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   273	CREATE POLICY push_topic_subs_insert ON push_topic_subscriptions FOR INSERT WITH CHECK (user_id = auth.uid());
   274	CREATE POLICY push_topic_subs_delete ON push_topic_subscriptions FOR DELETE USING (user_id = auth.uid());
   275	
   276	-- Admin only policies
   277	CREATE POLICY push_templates_admin ON push_notification_templates FOR ALL USING (is_admin(auth.uid()));
   278	CREATE POLICY push_batches_admin ON push_notification_batches FOR ALL USING (is_admin(auth.uid()));
   279	CREATE POLICY push_delivery_admin ON push_delivery_logs FOR ALL USING (is_admin(auth.uid()));
   280	CREATE POLICY push_rules_admin ON push_notification_rules FOR ALL USING (is_admin(auth.uid()));
=== FILE: ./db/RLS.sql ===
     1	-- SceneScout v14 Row Level Security (RLS) Policies
     2	-- This file contains security policies for data access control
     3	
     4	-- Enable RLS on all tables
     5	ALTER TABLE users ENABLE ROW LEVEL SECURITY;
     6	ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
     7	ALTER TABLE cities ENABLE ROW LEVEL SECURITY;
     8	ALTER TABLE venues ENABLE ROW LEVEL SECURITY;
     9	ALTER TABLE events ENABLE ROW LEVEL SECURITY;
    10	ALTER TABLE user_events ENABLE ROW LEVEL SECURITY;
    11	ALTER TABLE plans ENABLE ROW LEVEL SECURITY;
    12	ALTER TABLE plan_events ENABLE ROW LEVEL SECURITY;
    13	ALTER TABLE submissions ENABLE ROW LEVEL SECURITY;
    14	ALTER TABLE promotions ENABLE ROW LEVEL SECURITY;
    15	ALTER TABLE push_subscriptions ENABLE ROW LEVEL SECURITY;
    16	ALTER TABLE event_views ENABLE ROW LEVEL SECURITY;
    17	ALTER TABLE metrics ENABLE ROW LEVEL SECURITY;
    18	ALTER TABLE user_activities ENABLE ROW LEVEL SECURITY;
    19	
    20	-- Helper function to check if user is admin
    21	CREATE OR REPLACE FUNCTION is_admin(user_id UUID)
    22	RETURNS BOOLEAN AS $$
    23	BEGIN
    24	    RETURN EXISTS (
    25	        SELECT 1 FROM users WHERE id = user_id AND is_admin = true
    26	    );
    27	END;
    28	$$ LANGUAGE plpgsql SECURITY DEFINER;
    29	
    30	-- Users table policies
    31	CREATE POLICY users_select ON users FOR SELECT
    32	    USING (true); -- Public can see basic user info
    33	
    34	CREATE POLICY users_update ON users FOR UPDATE
    35	    USING (id = auth.uid() OR is_admin(auth.uid()));
    36	
    37	CREATE POLICY users_delete ON users FOR DELETE
    38	    USING (is_admin(auth.uid()));
    39	
    40	-- Profiles table policies
    41	CREATE POLICY profiles_select ON profiles FOR SELECT
    42	    USING (true); -- Public profiles
    43	
    44	CREATE POLICY profiles_insert ON profiles FOR INSERT
    45	    WITH CHECK (user_id = auth.uid());
    46	
    47	CREATE POLICY profiles_update ON profiles FOR UPDATE
    48	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
    49	
    50	CREATE POLICY profiles_delete ON profiles FOR DELETE
    51	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
    52	
    53	-- Cities table policies (read-only for non-admins)
    54	CREATE POLICY cities_select ON cities FOR SELECT
    55	    USING (is_active = true OR is_admin(auth.uid()));
    56	
    57	CREATE POLICY cities_insert ON cities FOR INSERT
    58	    WITH CHECK (is_admin(auth.uid()));
    59	
    60	CREATE POLICY cities_update ON cities FOR UPDATE
    61	    USING (is_admin(auth.uid()));
    62	
    63	CREATE POLICY cities_delete ON cities FOR DELETE
    64	    USING (is_admin(auth.uid()));
    65	
    66	-- Venues table policies
    67	CREATE POLICY venues_select ON venues FOR SELECT
    68	    USING (deleted_at IS NULL AND (is_active = true OR is_admin(auth.uid())));
    69	
    70	CREATE POLICY venues_insert ON venues FOR INSERT
    71	    WITH CHECK (auth.uid() IS NOT NULL); -- Authenticated users can submit
    72	
    73	CREATE POLICY venues_update ON venues FOR UPDATE
    74	    USING (is_admin(auth.uid()));
    75	
    76	CREATE POLICY venues_delete ON venues FOR DELETE
    77	    USING (is_admin(auth.uid()));
    78	
    79	-- Events table policies
    80	CREATE POLICY events_select ON events FOR SELECT
    81	    USING (deleted_at IS NULL OR is_admin(auth.uid()));
    82	
    83	CREATE POLICY events_insert ON events FOR INSERT
    84	    WITH CHECK (auth.uid() IS NOT NULL); -- Authenticated users can submit
    85	
    86	CREATE POLICY events_update ON events FOR UPDATE
    87	    USING (created_by = auth.uid() OR is_admin(auth.uid()));
    88	
    89	CREATE POLICY events_delete ON events FOR DELETE
    90	    USING (is_admin(auth.uid()));
    91	
    92	-- User events policies (private to user)
    93	CREATE POLICY user_events_select ON user_events FOR SELECT
    94	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
    95	
    96	CREATE POLICY user_events_insert ON user_events FOR INSERT
    97	    WITH CHECK (user_id = auth.uid());
    98	
    99	CREATE POLICY user_events_update ON user_events FOR UPDATE
   100	    USING (user_id = auth.uid());
   101	
   102	CREATE POLICY user_events_delete ON user_events FOR DELETE
   103	    USING (user_id = auth.uid());
   104	
   105	-- Plans policies
   106	CREATE POLICY plans_select ON plans FOR SELECT
   107	    USING (
   108	        deleted_at IS NULL AND (
   109	            is_public = true OR 
   110	            user_id = auth.uid() OR 
   111	            is_admin(auth.uid()) OR
   112	            EXISTS (
   113	                SELECT 1 FROM plans WHERE id = plans.id AND share_token IS NOT NULL
   114	            )
   115	        )
   116	    );
   117	
   118	CREATE POLICY plans_insert ON plans FOR INSERT
   119	    WITH CHECK (user_id = auth.uid());
   120	
   121	CREATE POLICY plans_update ON plans FOR UPDATE
   122	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
   123	
   124	CREATE POLICY plans_delete ON plans FOR DELETE
   125	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
   126	
   127	-- Plan events policies (inherit from plan)
   128	CREATE POLICY plan_events_select ON plan_events FOR SELECT
   129	    USING (
   130	        EXISTS (
   131	            SELECT 1 FROM plans p 
   132	            WHERE p.id = plan_id 
   133	            AND (p.is_public = true OR p.user_id = auth.uid() OR is_admin(auth.uid()))
   134	        )
   135	    );
   136	
   137	CREATE POLICY plan_events_insert ON plan_events FOR INSERT
   138	    WITH CHECK (
   139	        EXISTS (
   140	            SELECT 1 FROM plans WHERE id = plan_id AND user_id = auth.uid()
   141	        )
   142	    );
   143	
   144	CREATE POLICY plan_events_update ON plan_events FOR UPDATE
   145	    USING (
   146	        EXISTS (
   147	            SELECT 1 FROM plans WHERE id = plan_id AND user_id = auth.uid()
   148	        ) OR is_admin(auth.uid())
   149	    );
   150	
   151	CREATE POLICY plan_events_delete ON plan_events FOR DELETE
   152	    USING (
   153	        EXISTS (
   154	            SELECT 1 FROM plans WHERE id = plan_id AND user_id = auth.uid()
   155	        ) OR is_admin(auth.uid())
   156	    );
   157	
   158	-- Submissions policies
   159	CREATE POLICY submissions_select ON submissions FOR SELECT
   160	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
   161	
   162	CREATE POLICY submissions_insert ON submissions FOR INSERT
   163	    WITH CHECK (user_id = auth.uid() OR user_id IS NULL); -- Allow anonymous submissions
   164	
   165	CREATE POLICY submissions_update ON submissions FOR UPDATE
   166	    USING (is_admin(auth.uid())); -- Only admins can review
   167	
   168	CREATE POLICY submissions_delete ON submissions FOR DELETE
   169	    USING (is_admin(auth.uid()));
   170	
   171	-- Promotions policies
   172	CREATE POLICY promotions_select ON promotions FOR SELECT
   173	    USING (
   174	        is_active = true AND 
   175	        start_date <= CURRENT_TIMESTAMP AND 
   176	        end_date >= CURRENT_TIMESTAMP
   177	        OR is_admin(auth.uid())
   178	    );
   179	
   180	CREATE POLICY promotions_insert ON promotions FOR INSERT
   181	    WITH CHECK (is_admin(auth.uid()));
   182	
   183	CREATE POLICY promotions_update ON promotions FOR UPDATE
   184	    USING (is_admin(auth.uid()));
   185	
   186	CREATE POLICY promotions_delete ON promotions FOR DELETE
   187	    USING (is_admin(auth.uid()));
   188	
   189	-- Push subscriptions policies (private to user)
   190	CREATE POLICY push_subscriptions_select ON push_subscriptions FOR SELECT
   191	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
   192	
   193	CREATE POLICY push_subscriptions_insert ON push_subscriptions FOR INSERT
   194	    WITH CHECK (user_id = auth.uid());
   195	
   196	CREATE POLICY push_subscriptions_update ON push_subscriptions FOR UPDATE
   197	    USING (user_id = auth.uid());
   198	
   199	CREATE POLICY push_subscriptions_delete ON push_subscriptions FOR DELETE
   200	    USING (user_id = auth.uid());
   201	
   202	-- Event views policies
   203	CREATE POLICY event_views_select ON event_views FOR SELECT
   204	    USING (is_admin(auth.uid())); -- Only admins can view analytics
   205	
   206	CREATE POLICY event_views_insert ON event_views FOR INSERT
   207	    WITH CHECK (true); -- Anyone can create view records
   208	
   209	-- Metrics policies
   210	CREATE POLICY metrics_select ON metrics FOR SELECT
   211	    USING (is_admin(auth.uid())); -- Only admins can view metrics
   212	
   213	CREATE POLICY metrics_insert ON metrics FOR INSERT
   214	    WITH CHECK (is_admin(auth.uid()));
   215	
   216	-- User activities policies
   217	CREATE POLICY user_activities_select ON user_activities FOR SELECT
   218	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
   219	
   220	CREATE POLICY user_activities_insert ON user_activities FOR INSERT
   221	    WITH CHECK (user_id = auth.uid() OR user_id IS NULL); -- Allow anonymous activity
   222	
   223	-- Grant necessary permissions to authenticated users
   224	GRANT USAGE ON SCHEMA public TO authenticated;
   225	GRANT ALL ON ALL TABLES IN SCHEMA public TO authenticated;
   226	GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO authenticated;
   227	GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO authenticated;
   228	
   229	-- Grant read access to anonymous users for public content
   230	GRANT USAGE ON SCHEMA public TO anon;
   231	GRANT SELECT ON cities, venues, events, promotions TO anon;
   232	GRANT INSERT ON event_views, user_activities TO anon;
   233	GRANT EXECUTE ON FUNCTION find_nearby_events TO anon;
   234	GRANT EXECUTE ON FUNCTION get_trending_events TO anon;
   235	GRANT EXECUTE ON FUNCTION search_events TO anon;
   236	GRANT EXECUTE ON FUNCTION get_city_calendar TO anon;
   237	
   238	-- Create service role for backend operations
   239	CREATE ROLE service_role NOINHERIT;
   240	GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
   241	GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;
   242	GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO service_role;
=== FILE: ./db/RPC.sql ===
     1	-- SceneScout v14 Remote Procedure Calls (RPC)
     2	-- Complex queries and aggregations
     3	
     4	-- Find events near a location
     5	CREATE OR REPLACE FUNCTION find_nearby_events(
     6	    lat DECIMAL,
     7	    lon DECIMAL,
     8	    radius_km INTEGER DEFAULT 10,
     9	    limit_count INTEGER DEFAULT 50,
    10	    event_date_filter DATE DEFAULT NULL
    11	)
    12	RETURNS TABLE (
    13	    id UUID,
    14	    name VARCHAR,
    15	    event_date DATE,
    16	    start_time TIME,
    17	    venue_name VARCHAR,
    18	    distance_km NUMERIC,
    19	    location GEOGRAPHY,
    20	    featured_image_url TEXT,
    21	    categories JSONB
    22	) AS $$
    23	BEGIN
    24	    RETURN QUERY
    25	    SELECT 
    26	        e.id,
    27	        e.name,
    28	        e.event_date,
    29	        e.start_time,
    30	        COALESCE(v.name, e.location_name) as venue_name,
    31	        ST_Distance(e.location, ST_MakePoint(lon, lat)::geography) / 1000 as distance_km,
    32	        e.location,
    33	        e.featured_image_url,
    34	        e.categories
    35	    FROM events e
    36	    LEFT JOIN venues v ON e.venue_id = v.id
    37	    WHERE e.deleted_at IS NULL
    38	        AND e.location IS NOT NULL
    39	        AND ST_DWithin(e.location, ST_MakePoint(lon, lat)::geography, radius_km * 1000)
    40	        AND (event_date_filter IS NULL OR e.event_date >= event_date_filter)
    41	        AND e.event_date >= CURRENT_DATE
    42	    ORDER BY e.event_date, distance_km
    43	    LIMIT limit_count;
    44	END;
    45	$$ LANGUAGE plpgsql;
    46	
    47	-- Get trending events based on views and favorites
    48	CREATE OR REPLACE FUNCTION get_trending_events(
    49	    city_id_filter UUID DEFAULT NULL,
    50	    days_back INTEGER DEFAULT 7,
    51	    limit_count INTEGER DEFAULT 20
    52	)
    53	RETURNS TABLE (
    54	    id UUID,
    55	    name VARCHAR,
    56	    event_date DATE,
    57	    venue_name VARCHAR,
    58	    trending_score NUMERIC,
    59	    view_count INTEGER,
    60	    favorite_count BIGINT,
    61	    featured_image_url TEXT
    62	) AS $$
    63	BEGIN
    64	    RETURN QUERY
    65	    WITH event_stats AS (
    66	        SELECT 
    67	            e.id,
    68	            COUNT(DISTINCT ev.id) as recent_views,
    69	            COUNT(DISTINCT ue.id) FILTER (WHERE ue.is_favorite = true) as favorites
    70	        FROM events e
    71	        LEFT JOIN event_views ev ON e.id = ev.event_id 
    72	            AND ev.viewed_at >= CURRENT_TIMESTAMP - INTERVAL '1 day' * days_back
    73	        LEFT JOIN user_events ue ON e.id = ue.event_id
    74	        WHERE e.deleted_at IS NULL
    75	            AND e.event_date >= CURRENT_DATE
    76	            AND (city_id_filter IS NULL OR e.city_id = city_id_filter)
    77	        GROUP BY e.id
    78	    )
    79	    SELECT 
    80	        e.id,
    81	        e.name,
    82	        e.event_date,
    83	        COALESCE(v.name, e.location_name) as venue_name,
    84	        (es.recent_views * 2 + es.favorites * 5 + e.view_count * 0.1)::NUMERIC as trending_score,
    85	        e.view_count,
    86	        es.favorites as favorite_count,
    87	        e.featured_image_url
    88	    FROM events e
    89	    JOIN event_stats es ON e.id = es.id
    90	    LEFT JOIN venues v ON e.venue_id = v.id
    91	    WHERE (es.recent_views > 0 OR es.favorites > 0 OR e.is_featured = true)
    92	    ORDER BY trending_score DESC
    93	    LIMIT limit_count;
    94	END;
    95	$$ LANGUAGE plpgsql;
    96	
    97	-- Search events by text
    98	CREATE OR REPLACE FUNCTION search_events(
    99	    search_query TEXT,
   100	    city_id_filter UUID DEFAULT NULL,
   101	    category_filter TEXT[] DEFAULT NULL,
   102	    date_from DATE DEFAULT NULL,
   103	    date_to DATE DEFAULT NULL,
   104	    limit_count INTEGER DEFAULT 50
   105	)
   106	RETURNS TABLE (
   107	    id UUID,
   108	    name VARCHAR,
   109	    description TEXT,
   110	    event_date DATE,
   111	    venue_name VARCHAR,
   112	    city_name VARCHAR,
   113	    categories JSONB,
   114	    relevance REAL
   115	) AS $$
   116	BEGIN
   117	    RETURN QUERY
   118	    SELECT 
   119	        e.id,
   120	        e.name,
   121	        e.description,
   122	        e.event_date,
   123	        COALESCE(v.name, e.location_name) as venue_name,
   124	        c.name as city_name,
   125	        e.categories,
   126	        ts_rank(
   127	            to_tsvector('english', coalesce(e.name, '') || ' ' || coalesce(e.description, '')),
   128	            plainto_tsquery('english', search_query)
   129	        ) as relevance
   130	    FROM events e
   131	    LEFT JOIN venues v ON e.venue_id = v.id
   132	    LEFT JOIN cities c ON e.city_id = c.id
   133	    WHERE e.deleted_at IS NULL
   134	        AND (
   135	            to_tsvector('english', coalesce(e.name, '') || ' ' || coalesce(e.description, '')) 
   136	            @@ plainto_tsquery('english', search_query)
   137	            OR e.name ILIKE '%' || search_query || '%'
   138	        )
   139	        AND (city_id_filter IS NULL OR e.city_id = city_id_filter)
   140	        AND (category_filter IS NULL OR e.categories ?| category_filter)
   141	        AND (date_from IS NULL OR e.event_date >= date_from)
   142	        AND (date_to IS NULL OR e.event_date <= date_to)
   143	    ORDER BY relevance DESC, e.event_date
   144	    LIMIT limit_count;
   145	END;
   146	$$ LANGUAGE plpgsql;
   147	
   148	-- Get user's upcoming events
   149	CREATE OR REPLACE FUNCTION get_user_upcoming_events(
   150	    user_id_param UUID,
   151	    include_favorites BOOLEAN DEFAULT true,
   152	    include_attending BOOLEAN DEFAULT true
   153	)
   154	RETURNS TABLE (
   155	    event_id UUID,
   156	    event_name VARCHAR,
   157	    event_date DATE,
   158	    start_time TIME,
   159	    venue_name VARCHAR,
   160	    is_favorite BOOLEAN,
   161	    is_attending BOOLEAN,
   162	    reminder_time TIMESTAMP WITH TIME ZONE
   163	) AS $$
   164	BEGIN
   165	    RETURN QUERY
   166	    SELECT 
   167	        e.id as event_id,
   168	        e.name as event_name,
   169	        e.event_date,
   170	        e.start_time,
   171	        COALESCE(v.name, e.location_name) as venue_name,
   172	        ue.is_favorite,
   173	        ue.is_attending,
   174	        ue.reminder_time
   175	    FROM user_events ue
   176	    JOIN events e ON ue.event_id = e.id
   177	    LEFT JOIN venues v ON e.venue_id = v.id
   178	    WHERE ue.user_id = user_id_param
   179	        AND e.deleted_at IS NULL
   180	        AND e.event_date >= CURRENT_DATE
   181	        AND (
   182	            (include_favorites AND ue.is_favorite = true) OR
   183	            (include_attending AND ue.is_attending = true)
   184	        )
   185	    ORDER BY e.event_date, e.start_time;
   186	END;
   187	$$ LANGUAGE plpgsql;
   188	
   189	-- Get similar events
   190	CREATE OR REPLACE FUNCTION get_similar_events(
   191	    event_id_param UUID,
   192	    limit_count INTEGER DEFAULT 10
   193	)
   194	RETURNS TABLE (
   195	    id UUID,
   196	    name VARCHAR,
   197	    event_date DATE,
   198	    similarity_score NUMERIC
   199	) AS $$
   200	DECLARE
   201	    source_event RECORD;
   202	BEGIN
   203	    -- Get source event details
   204	    SELECT categories, tags, venue_id, city_id, event_date
   205	    INTO source_event
   206	    FROM events
   207	    WHERE id = event_id_param AND deleted_at IS NULL;
   208	    
   209	    IF NOT FOUND THEN
   210	        RETURN;
   211	    END IF;
   212	    
   213	    RETURN QUERY
   214	    SELECT 
   215	        e.id,
   216	        e.name,
   217	        e.event_date,
   218	        (
   219	            -- Category similarity
   220	            CASE WHEN e.categories ?| ARRAY(SELECT jsonb_array_elements_text(source_event.categories)) 
   221	                THEN 5 ELSE 0 END +
   222	            -- Tag similarity
   223	            CASE WHEN e.tags ?| ARRAY(SELECT jsonb_array_elements_text(source_event.tags)) 
   224	                THEN 3 ELSE 0 END +
   225	            -- Same venue bonus
   226	            CASE WHEN e.venue_id = source_event.venue_id THEN 4 ELSE 0 END +
   227	            -- Same city bonus
   228	            CASE WHEN e.city_id = source_event.city_id THEN 2 ELSE 0 END +
   229	            -- Date proximity bonus (events close in time)
   230	            CASE WHEN ABS(e.event_date - source_event.event_date) <= 7 THEN 1 ELSE 0 END
   231	        )::NUMERIC as similarity_score
   232	    FROM events e
   233	    WHERE e.id != event_id_param
   234	        AND e.deleted_at IS NULL
   235	        AND e.event_date >= CURRENT_DATE
   236	        AND (
   237	            e.categories ?| ARRAY(SELECT jsonb_array_elements_text(source_event.categories))
   238	            OR e.tags ?| ARRAY(SELECT jsonb_array_elements_text(source_event.tags))
   239	            OR e.venue_id = source_event.venue_id
   240	        )
   241	    ORDER BY similarity_score DESC, e.event_date
   242	    LIMIT limit_count;
   243	END;
   244	$$ LANGUAGE plpgsql;
   245	
   246	-- Get event recommendations for user
   247	CREATE OR REPLACE FUNCTION get_user_recommendations(
   248	    user_id_param UUID,
   249	    limit_count INTEGER DEFAULT 20
   250	)
   251	RETURNS TABLE (
   252	    id UUID,
   253	    name VARCHAR,
   254	    event_date DATE,
   255	    recommendation_score NUMERIC,
   256	    reason TEXT
   257	) AS $$
   258	BEGIN
   259	    RETURN QUERY
   260	    WITH user_preferences AS (
   261	        -- Get user's preferred categories and venues from their history
   262	        SELECT 
   263	            jsonb_agg(DISTINCT cat) as preferred_categories,
   264	            array_agg(DISTINCT e.venue_id) FILTER (WHERE e.venue_id IS NOT NULL) as preferred_venues,
   265	            array_agg(DISTINCT e.city_id) as preferred_cities
   266	        FROM user_events ue
   267	        JOIN events e ON ue.event_id = e.id
   268	        CROSS JOIN jsonb_array_elements_text(e.categories) as cat
   269	        WHERE ue.user_id = user_id_param
   270	            AND (ue.is_favorite = true OR ue.is_attending = true)
   271	    )
   272	    SELECT 
   273	        e.id,
   274	        e.name,
   275	        e.event_date,
   276	        (
   277	            -- Category match
   278	            CASE WHEN e.categories ?| ARRAY(SELECT jsonb_array_elements_text(up.preferred_categories))
   279	                THEN 5 ELSE 0 END +
   280	            -- Venue match
   281	            CASE WHEN e.venue_id = ANY(up.preferred_venues) THEN 4 ELSE 0 END +
   282	            -- City match
   283	            CASE WHEN e.city_id = ANY(up.preferred_cities) THEN 3 ELSE 0 END +
   284	            -- Featured bonus
   285	            CASE WHEN e.is_featured THEN 2 ELSE 0 END +
   286	            -- Trending bonus
   287	            CASE WHEN e.view_count > 100 THEN 1 ELSE 0 END
   288	        )::NUMERIC as recommendation_score,
   289	        CASE 
   290	            WHEN e.categories ?| ARRAY(SELECT jsonb_array_elements_text(up.preferred_categories))
   291	                THEN 'Based on your interests'
   292	            WHEN e.venue_id = ANY(up.preferred_venues) 
   293	                THEN 'At a venue you like'
   294	            WHEN e.city_id = ANY(up.preferred_cities)
   295	                THEN 'In your preferred city'
   296	            ELSE 'Trending event'
   297	        END as reason
   298	    FROM events e
   299	    CROSS JOIN user_preferences up
   300	    WHERE e.deleted_at IS NULL
   301	        AND e.event_date >= CURRENT_DATE
   302	        AND e.id NOT IN (
   303	            SELECT event_id FROM user_events WHERE user_id = user_id_param
   304	        )
   305	    ORDER BY recommendation_score DESC, e.event_date
   306	    LIMIT limit_count;
   307	END;
   308	$$ LANGUAGE plpgsql;
   309	
   310	-- Aggregate venue statistics
   311	CREATE OR REPLACE FUNCTION get_venue_stats(venue_id_param UUID)
   312	RETURNS TABLE (
   313	    total_events BIGINT,
   314	    upcoming_events BIGINT,
   315	    total_views BIGINT,
   316	    avg_event_attendance NUMERIC,
   317	    popular_categories JSONB
   318	) AS $$
   319	BEGIN
   320	    RETURN QUERY
   321	    SELECT 
   322	        COUNT(DISTINCT e.id) as total_events,
   323	        COUNT(DISTINCT e.id) FILTER (WHERE e.event_date >= CURRENT_DATE) as upcoming_events,
   324	        SUM(e.view_count) as total_views,
   325	        AVG(e.attendee_count)::NUMERIC as avg_event_attendance,
   326	        jsonb_agg(DISTINCT cat ORDER BY cat) as popular_categories
   327	    FROM events e
   328	    CROSS JOIN LATERAL jsonb_array_elements_text(e.categories) as cat
   329	    WHERE e.venue_id = venue_id_param
   330	        AND e.deleted_at IS NULL
   331	    GROUP BY e.venue_id;
   332	END;
   333	$$ LANGUAGE plpgsql;
   334	
   335	-- Get city event calendar
   336	CREATE OR REPLACE FUNCTION get_city_calendar(
   337	    city_id_param UUID,
   338	    start_date DATE,
   339	    end_date DATE
   340	)
   341	RETURNS TABLE (
   342	    event_date DATE,
   343	    event_count BIGINT,
   344	    featured_event JSONB
   345	) AS $$
   346	BEGIN
   347	    RETURN QUERY
   348	    WITH daily_events AS (
   349	        SELECT 
   350	            e.event_date,
   351	            COUNT(*) as event_count,
   352	            jsonb_build_object(
   353	                'id', (ARRAY_AGG(e.id ORDER BY e.is_featured DESC, e.view_count DESC))[1],
   354	                'name', (ARRAY_AGG(e.name ORDER BY e.is_featured DESC, e.view_count DESC))[1],
   355	                'image', (ARRAY_AGG(e.featured_image_url ORDER BY e.is_featured DESC, e.view_count DESC))[1]
   356	            ) as featured_event
   357	        FROM events e
   358	        WHERE e.city_id = city_id_param
   359	            AND e.deleted_at IS NULL
   360	            AND e.event_date BETWEEN start_date AND end_date
   361	        GROUP BY e.event_date
   362	    )
   363	    SELECT * FROM daily_events
   364	    ORDER BY event_date;
   365	END;
   366	$$ LANGUAGE plpgsql;
=== FILE: ./db/RPC_COUNTS.sql ===
     1	-- SceneScout v14 Count Functions for Pagination
     2	-- This file contains RPC functions that return counts for efficient pagination
     3	
     4	-- Get total count of events with filters
     5	CREATE OR REPLACE FUNCTION count_events(
     6	    city_id_filter UUID DEFAULT NULL,
     7	    category_filter TEXT[] DEFAULT NULL,
     8	    date_from DATE DEFAULT NULL,
     9	    date_to DATE DEFAULT NULL,
    10	    venue_id_filter UUID DEFAULT NULL,
    11	    search_query TEXT DEFAULT NULL,
    12	    is_featured_only BOOLEAN DEFAULT NULL
    13	)
    14	RETURNS INTEGER AS $$
    15	BEGIN
    16	    RETURN (
    17	        SELECT COUNT(*)::INTEGER
    18	        FROM events e
    19	        LEFT JOIN venues v ON e.venue_id = v.id
    20	        WHERE e.deleted_at IS NULL
    21	            AND (city_id_filter IS NULL OR e.city_id = city_id_filter)
    22	            AND (category_filter IS NULL OR e.categories ?| category_filter)
    23	            AND (date_from IS NULL OR e.event_date >= date_from)
    24	            AND (date_to IS NULL OR e.event_date <= date_to)
    25	            AND (venue_id_filter IS NULL OR e.venue_id = venue_id_filter)
    26	            AND (is_featured_only IS NULL OR e.is_featured = is_featured_only)
    27	            AND (
    28	                search_query IS NULL OR
    29	                to_tsvector('english', coalesce(e.name, '') || ' ' || coalesce(e.description, '')) 
    30	                @@ plainto_tsquery('english', search_query)
    31	                OR e.name ILIKE '%' || search_query || '%'
    32	            )
    33	    );
    34	END;
    35	$$ LANGUAGE plpgsql;
    36	
    37	-- Get total count of venues with filters
    38	CREATE OR REPLACE FUNCTION count_venues(
    39	    city_id_filter UUID DEFAULT NULL,
    40	    venue_type_filter VARCHAR DEFAULT NULL,
    41	    is_verified_only BOOLEAN DEFAULT NULL,
    42	    search_query TEXT DEFAULT NULL
    43	)
    44	RETURNS INTEGER AS $$
    45	BEGIN
    46	    RETURN (
    47	        SELECT COUNT(*)::INTEGER
    48	        FROM venues v
    49	        WHERE v.deleted_at IS NULL
    50	            AND v.is_active = true
    51	            AND (city_id_filter IS NULL OR v.city_id = city_id_filter)
    52	            AND (venue_type_filter IS NULL OR v.venue_type = venue_type_filter)
    53	            AND (is_verified_only IS NULL OR v.is_verified = is_verified_only)
    54	            AND (
    55	                search_query IS NULL OR
    56	                to_tsvector('english', coalesce(v.name, '') || ' ' || coalesce(v.description, '')) 
    57	                @@ plainto_tsquery('english', search_query)
    58	                OR v.name ILIKE '%' || search_query || '%'
    59	            )
    60	    );
    61	END;
    62	$$ LANGUAGE plpgsql;
    63	
    64	-- Count user's events (favorites/saved)
    65	CREATE OR REPLACE FUNCTION count_user_events(
    66	    user_id_param UUID,
    67	    is_favorite_filter BOOLEAN DEFAULT NULL,
    68	    is_attending_filter BOOLEAN DEFAULT NULL,
    69	    date_from DATE DEFAULT NULL,
    70	    date_to DATE DEFAULT NULL
    71	)
    72	RETURNS INTEGER AS $$
    73	BEGIN
    74	    RETURN (
    75	        SELECT COUNT(*)::INTEGER
    76	        FROM user_events ue
    77	        JOIN events e ON ue.event_id = e.id
    78	        WHERE ue.user_id = user_id_param
    79	            AND e.deleted_at IS NULL
    80	            AND (is_favorite_filter IS NULL OR ue.is_favorite = is_favorite_filter)
    81	            AND (is_attending_filter IS NULL OR ue.is_attending = is_attending_filter)
    82	            AND (date_from IS NULL OR e.event_date >= date_from)
    83	            AND (date_to IS NULL OR e.event_date <= date_to)
    84	    );
    85	END;
    86	$$ LANGUAGE plpgsql;
    87	
    88	-- Count user's plans
    89	CREATE OR REPLACE FUNCTION count_user_plans(
    90	    user_id_param UUID,
    91	    is_public_filter BOOLEAN DEFAULT NULL,
    92	    city_id_filter UUID DEFAULT NULL
    93	)
    94	RETURNS INTEGER AS $$
    95	BEGIN
    96	    RETURN (
    97	        SELECT COUNT(*)::INTEGER
    98	        FROM plans p
    99	        WHERE p.user_id = user_id_param
   100	            AND p.deleted_at IS NULL
   101	            AND (is_public_filter IS NULL OR p.is_public = is_public_filter)
   102	            AND (city_id_filter IS NULL OR p.city_id = city_id_filter)
   103	    );
   104	END;
   105	$$ LANGUAGE plpgsql;
   106	
   107	-- Count public plans
   108	CREATE OR REPLACE FUNCTION count_public_plans(
   109	    city_id_filter UUID DEFAULT NULL,
   110	    date_filter DATE DEFAULT NULL
   111	)
   112	RETURNS INTEGER AS $$
   113	BEGIN
   114	    RETURN (
   115	        SELECT COUNT(*)::INTEGER
   116	        FROM plans p
   117	        WHERE p.is_public = true
   118	            AND p.deleted_at IS NULL
   119	            AND (city_id_filter IS NULL OR p.city_id = city_id_filter)
   120	            AND (date_filter IS NULL OR p.date = date_filter)
   121	    );
   122	END;
   123	$$ LANGUAGE plpgsql;
   124	
   125	-- Count submissions by status
   126	CREATE OR REPLACE FUNCTION count_submissions(
   127	    status_filter VARCHAR DEFAULT NULL,
   128	    submission_type_filter VARCHAR DEFAULT NULL,
   129	    user_id_filter UUID DEFAULT NULL,
   130	    date_from TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   131	    date_to TIMESTAMP WITH TIME ZONE DEFAULT NULL
   132	)
   133	RETURNS INTEGER AS $$
   134	BEGIN
   135	    RETURN (
   136	        SELECT COUNT(*)::INTEGER
   137	        FROM submissions s
   138	        WHERE (status_filter IS NULL OR s.status = status_filter)
   139	            AND (submission_type_filter IS NULL OR s.submission_type = submission_type_filter)
   140	            AND (user_id_filter IS NULL OR s.user_id = user_id_filter)
   141	            AND (date_from IS NULL OR s.submitted_at >= date_from)
   142	            AND (date_to IS NULL OR s.submitted_at <= date_to)
   143	    );
   144	END;
   145	$$ LANGUAGE plpgsql;
   146	
   147	-- Count user reviews
   148	CREATE OR REPLACE FUNCTION count_user_reviews(
   149	    user_id_param UUID,
   150	    entity_type_filter VARCHAR DEFAULT NULL,
   151	    rating_filter INTEGER DEFAULT NULL
   152	)
   153	RETURNS INTEGER AS $$
   154	BEGIN
   155	    RETURN (
   156	        SELECT COUNT(*)::INTEGER
   157	        FROM user_reviews ur
   158	        WHERE ur.user_id = user_id_param
   159	            AND (entity_type_filter IS NULL OR ur.entity_type = entity_type_filter)
   160	            AND (rating_filter IS NULL OR ur.rating = rating_filter)
   161	    );
   162	END;
   163	$$ LANGUAGE plpgsql;
   164	
   165	-- Count reviews for entity
   166	CREATE OR REPLACE FUNCTION count_entity_reviews(
   167	    entity_type_param VARCHAR,
   168	    entity_id_param UUID,
   169	    rating_filter INTEGER DEFAULT NULL
   170	)
   171	RETURNS INTEGER AS $$
   172	BEGIN
   173	    RETURN (
   174	        SELECT COUNT(*)::INTEGER
   175	        FROM user_reviews ur
   176	        WHERE ur.entity_type = entity_type_param
   177	            AND ur.entity_id = entity_id_param
   178	            AND (rating_filter IS NULL OR ur.rating = rating_filter)
   179	    );
   180	END;
   181	$$ LANGUAGE plpgsql;
   182	
   183	-- Count nearby events
   184	CREATE OR REPLACE FUNCTION count_nearby_events(
   185	    lat DECIMAL,
   186	    lon DECIMAL,
   187	    radius_km INTEGER DEFAULT 10,
   188	    event_date_filter DATE DEFAULT NULL
   189	)
   190	RETURNS INTEGER AS $$
   191	BEGIN
   192	    RETURN (
   193	        SELECT COUNT(*)::INTEGER
   194	        FROM events e
   195	        WHERE e.deleted_at IS NULL
   196	            AND e.location IS NOT NULL
   197	            AND ST_DWithin(e.location, ST_MakePoint(lon, lat)::geography, radius_km * 1000)
   198	            AND (event_date_filter IS NULL OR e.event_date >= event_date_filter)
   199	            AND e.event_date >= CURRENT_DATE
   200	    );
   201	END;
   202	$$ LANGUAGE plpgsql;
   203	
   204	-- Count events by venue
   205	CREATE OR REPLACE FUNCTION count_venue_events(
   206	    venue_id_param UUID,
   207	    date_from DATE DEFAULT NULL,
   208	    date_to DATE DEFAULT NULL,
   209	    include_past BOOLEAN DEFAULT false
   210	)
   211	RETURNS INTEGER AS $$
   212	BEGIN
   213	    RETURN (
   214	        SELECT COUNT(*)::INTEGER
   215	        FROM events e
   216	        WHERE e.venue_id = venue_id_param
   217	            AND e.deleted_at IS NULL
   218	            AND (date_from IS NULL OR e.event_date >= date_from)
   219	            AND (date_to IS NULL OR e.event_date <= date_to)
   220	            AND (include_past OR e.event_date >= CURRENT_DATE)
   221	    );
   222	END;
   223	$$ LANGUAGE plpgsql;
   224	
   225	-- Count user followers
   226	CREATE OR REPLACE FUNCTION count_user_followers(user_id_param UUID)
   227	RETURNS INTEGER AS $$
   228	BEGIN
   229	    RETURN (
   230	        SELECT COUNT(*)::INTEGER
   231	        FROM user_follows uf
   232	        WHERE uf.following_id = user_id_param
   233	    );
   234	END;
   235	$$ LANGUAGE plpgsql;
   236	
   237	-- Count user following
   238	CREATE OR REPLACE FUNCTION count_user_following(user_id_param UUID)
   239	RETURNS INTEGER AS $$
   240	BEGIN
   241	    RETURN (
   242	        SELECT COUNT(*)::INTEGER
   243	        FROM user_follows uf
   244	        WHERE uf.follower_id = user_id_param
   245	    );
   246	END;
   247	$$ LANGUAGE plpgsql;
   248	
   249	-- Count notifications
   250	CREATE OR REPLACE FUNCTION count_user_notifications(
   251	    user_id_param UUID,
   252	    status_filter VARCHAR DEFAULT NULL,
   253	    notification_type_filter VARCHAR DEFAULT NULL
   254	)
   255	RETURNS INTEGER AS $$
   256	BEGIN
   257	    RETURN (
   258	        SELECT COUNT(*)::INTEGER
   259	        FROM push_notification_queue pnq
   260	        WHERE pnq.user_id = user_id_param
   261	            AND (status_filter IS NULL OR pnq.status = status_filter)
   262	            AND (notification_type_filter IS NULL OR pnq.notification_type = notification_type_filter)
   263	    );
   264	END;
   265	$$ LANGUAGE plpgsql;
   266	
   267	-- Count plan collaborators
   268	CREATE OR REPLACE FUNCTION count_plan_collaborators(
   269	    plan_id_param UUID,
   270	    role_filter VARCHAR DEFAULT NULL
   271	)
   272	RETURNS INTEGER AS $$
   273	BEGIN
   274	    RETURN (
   275	        SELECT COUNT(*)::INTEGER
   276	        FROM plan_collaborators pc
   277	        WHERE pc.plan_id = plan_id_param
   278	            AND pc.accepted_at IS NOT NULL
   279	            AND (role_filter IS NULL OR pc.role = role_filter)
   280	    );
   281	END;
   282	$$ LANGUAGE plpgsql;
   283	
   284	-- Count events in date range for city
   285	CREATE OR REPLACE FUNCTION count_city_events_by_date_range(
   286	    city_id_param UUID,
   287	    start_date DATE,
   288	    end_date DATE
   289	)
   290	RETURNS INTEGER AS $$
   291	BEGIN
   292	    RETURN (
   293	        SELECT COUNT(*)::INTEGER
   294	        FROM events e
   295	        WHERE e.city_id = city_id_param
   296	            AND e.deleted_at IS NULL
   297	            AND e.event_date BETWEEN start_date AND end_date
   298	    );
   299	END;
   300	$$ LANGUAGE plpgsql;
   301	
   302	-- Count template usage
   303	CREATE OR REPLACE FUNCTION count_template_usage(template_id_param UUID)
   304	RETURNS INTEGER AS $$
   305	BEGIN
   306	    RETURN (
   307	        SELECT COUNT(*)::INTEGER
   308	        FROM plan_template_usage ptu
   309	        WHERE ptu.template_id = template_id_param
   310	    );
   311	END;
   312	$$ LANGUAGE plpgsql;
   313	
   314	-- Count active subscriptions
   315	CREATE OR REPLACE FUNCTION count_active_subscriptions()
   316	RETURNS INTEGER AS $$
   317	BEGIN
   318	    RETURN (
   319	        SELECT COUNT(*)::INTEGER
   320	        FROM subscriptions s
   321	        WHERE s.status = 'active'
   322	    );
   323	END;
   324	$$ LANGUAGE plpgsql;
   325	
   326	-- Count events by category in city
   327	CREATE OR REPLACE FUNCTION count_events_by_category(
   328	    city_id_param UUID,
   329	    category TEXT,
   330	    date_from DATE DEFAULT NULL,
   331	    date_to DATE DEFAULT NULL
   332	)
   333	RETURNS INTEGER AS $$
   334	BEGIN
   335	    RETURN (
   336	        SELECT COUNT(*)::INTEGER
   337	        FROM events e
   338	        WHERE e.city_id = city_id_param
   339	            AND e.deleted_at IS NULL
   340	            AND e.categories ? category
   341	            AND (date_from IS NULL OR e.event_date >= date_from)
   342	            AND (date_to IS NULL OR e.event_date <= date_to)
   343	    );
   344	END;
   345	$$ LANGUAGE plpgsql;
   346	
   347	-- Count unique visitors for analytics
   348	CREATE OR REPLACE FUNCTION count_unique_event_viewers(
   349	    event_id_param UUID,
   350	    days_back INTEGER DEFAULT 30
   351	)
   352	RETURNS INTEGER AS $$
   353	BEGIN
   354	    RETURN (
   355	        SELECT COUNT(DISTINCT COALESCE(user_id::TEXT, session_id))::INTEGER
   356	        FROM event_views ev
   357	        WHERE ev.event_id = event_id_param
   358	            AND ev.viewed_at >= CURRENT_TIMESTAMP - INTERVAL '1 day' * days_back
   359	    );
   360	END;
   361	$$ LANGUAGE plpgsql;
=== FILE: ./db/RPC_SALES_TS.sql ===
     1	-- SceneScout v14 Sales/Revenue Analytics Time Series
     2	-- This file contains time series functions for sales and revenue analytics
     3	
     4	-- Revenue time series by period
     5	CREATE OR REPLACE FUNCTION get_revenue_time_series(
     6	    start_date DATE,
     7	    end_date DATE,
     8	    period_type VARCHAR DEFAULT 'day', -- day, week, month, quarter, year
     9	    revenue_type VARCHAR DEFAULT 'all' -- all, subscription, promotion
    10	)
    11	RETURNS TABLE (
    12	    period_start TIMESTAMP WITH TIME ZONE,
    13	    period_end TIMESTAMP WITH TIME ZONE,
    14	    total_revenue DECIMAL(12, 2),
    15	    subscription_revenue DECIMAL(12, 2),
    16	    promotion_revenue DECIMAL(12, 2),
    17	    transaction_count BIGINT,
    18	    new_subscriptions INTEGER,
    19	    cancelled_subscriptions INTEGER,
    20	    active_subscriptions_end INTEGER
    21	) AS $$
    22	DECLARE
    23	    period_interval INTERVAL;
    24	    period_trunc_format TEXT;
    25	BEGIN
    26	    -- Set interval and truncation format based on period type
    27	    CASE period_type
    28	        WHEN 'day' THEN 
    29	            period_interval := INTERVAL '1 day';
    30	            period_trunc_format := 'day';
    31	        WHEN 'week' THEN 
    32	            period_interval := INTERVAL '1 week';
    33	            period_trunc_format := 'week';
    34	        WHEN 'month' THEN 
    35	            period_interval := INTERVAL '1 month';
    36	            period_trunc_format := 'month';
    37	        WHEN 'quarter' THEN 
    38	            period_interval := INTERVAL '3 months';
    39	            period_trunc_format := 'quarter';
    40	        WHEN 'year' THEN 
    41	            period_interval := INTERVAL '1 year';
    42	            period_trunc_format := 'year';
    43	        ELSE 
    44	            period_interval := INTERVAL '1 day';
    45	            period_trunc_format := 'day';
    46	    END CASE;
    47	
    48	    RETURN QUERY
    49	    WITH date_series AS (
    50	        SELECT generate_series(
    51	            date_trunc(period_trunc_format, start_date::timestamp),
    52	            date_trunc(period_trunc_format, end_date::timestamp),
    53	            period_interval
    54	        ) AS period_start
    55	    ),
    56	    period_bounds AS (
    57	        SELECT 
    58	            period_start,
    59	            period_start + period_interval AS period_end
    60	        FROM date_series
    61	    ),
    62	    revenue_data AS (
    63	        SELECT 
    64	            pb.period_start,
    65	            pb.period_end,
    66	            COALESCE(SUM(p.amount), 0) AS total_revenue,
    67	            COALESCE(SUM(CASE WHEN p.subscription_id IS NOT NULL THEN p.amount ELSE 0 END), 0) AS subscription_revenue,
    68	            COALESCE(SUM(CASE WHEN p.subscription_id IS NULL THEN p.amount ELSE 0 END), 0) AS promotion_revenue,
    69	            COUNT(p.id) AS transaction_count
    70	        FROM period_bounds pb
    71	        LEFT JOIN payments p ON p.paid_at >= pb.period_start 
    72	            AND p.paid_at < pb.period_end 
    73	            AND p.status = 'succeeded'
    74	        WHERE (revenue_type = 'all' OR 
    75	               (revenue_type = 'subscription' AND p.subscription_id IS NOT NULL) OR
    76	               (revenue_type = 'promotion' AND p.subscription_id IS NULL))
    77	        GROUP BY pb.period_start, pb.period_end
    78	    ),
    79	    subscription_changes AS (
    80	        SELECT 
    81	            pb.period_start,
    82	            pb.period_end,
    83	            COUNT(CASE WHEN s.created_at >= pb.period_start AND s.created_at < pb.period_end THEN 1 END) AS new_subscriptions,
    84	            COUNT(CASE WHEN s.canceled_at >= pb.period_start AND s.canceled_at < pb.period_end THEN 1 END) AS cancelled_subscriptions
    85	        FROM period_bounds pb
    86	        LEFT JOIN subscriptions s ON (
    87	            (s.created_at >= pb.period_start AND s.created_at < pb.period_end) OR
    88	            (s.canceled_at >= pb.period_start AND s.canceled_at < pb.period_end)
    89	        )
    90	        GROUP BY pb.period_start, pb.period_end
    91	    ),
    92	    active_subs_at_end AS (
    93	        SELECT 
    94	            pb.period_start,
    95	            pb.period_end,
    96	            COUNT(s.id) AS active_subscriptions_end
    97	        FROM period_bounds pb
    98	        LEFT JOIN subscriptions s ON s.created_at < pb.period_end 
    99	            AND (s.canceled_at IS NULL OR s.canceled_at >= pb.period_end)
   100	            AND s.status = 'active'
   101	        GROUP BY pb.period_start, pb.period_end
   102	    )
   103	    SELECT 
   104	        rd.period_start,
   105	        rd.period_end,
   106	        rd.total_revenue,
   107	        rd.subscription_revenue,
   108	        rd.promotion_revenue,
   109	        rd.transaction_count,
   110	        COALESCE(sc.new_subscriptions, 0)::INTEGER AS new_subscriptions,
   111	        COALESCE(sc.cancelled_subscriptions, 0)::INTEGER AS cancelled_subscriptions,
   112	        COALESCE(asae.active_subscriptions_end, 0)::INTEGER AS active_subscriptions_end
   113	    FROM revenue_data rd
   114	    LEFT JOIN subscription_changes sc ON rd.period_start = sc.period_start
   115	    LEFT JOIN active_subs_at_end asae ON rd.period_start = asae.period_start
   116	    ORDER BY rd.period_start;
   117	END;
   118	$$ LANGUAGE plpgsql;
   119	
   120	-- Monthly Recurring Revenue (MRR) calculation
   121	CREATE OR REPLACE FUNCTION get_mrr_time_series(
   122	    start_date DATE,
   123	    end_date DATE
   124	)
   125	RETURNS TABLE (
   126	    month DATE,
   127	    mrr DECIMAL(12, 2),
   128	    new_mrr DECIMAL(12, 2),
   129	    expansion_mrr DECIMAL(12, 2),
   130	    contraction_mrr DECIMAL(12, 2),
   131	    churned_mrr DECIMAL(12, 2),
   132	    net_mrr_change DECIMAL(12, 2),
   133	    active_subscriptions INTEGER
   134	) AS $$
   135	BEGIN
   136	    RETURN QUERY
   137	    WITH months AS (
   138	        SELECT generate_series(
   139	            date_trunc('month', start_date),
   140	            date_trunc('month', end_date),
   141	            INTERVAL '1 month'
   142	        )::DATE AS month
   143	    ),
   144	    subscription_mrr AS (
   145	        SELECT 
   146	            m.month,
   147	            s.id,
   148	            s.user_id,
   149	            sp.price AS mrr_amount,
   150	            s.created_at,
   151	            s.canceled_at,
   152	            LAG(sp.price) OVER (PARTITION BY s.user_id ORDER BY m.month) AS prev_mrr
   153	        FROM months m
   154	        CROSS JOIN subscriptions s
   155	        JOIN subscription_plans sp ON s.stripe_price_id = sp.stripe_price_id
   156	        WHERE s.created_at <= m.month + INTERVAL '1 month'
   157	            AND (s.canceled_at IS NULL OR s.canceled_at > m.month)
   158	            AND s.status = 'active'
   159	    )
   160	    SELECT 
   161	        m.month,
   162	        COALESCE(SUM(sm.mrr_amount), 0) AS mrr,
   163	        COALESCE(SUM(CASE 
   164	            WHEN date_trunc('month', sm.created_at) = m.month THEN sm.mrr_amount 
   165	            ELSE 0 
   166	        END), 0) AS new_mrr,
   167	        COALESCE(SUM(CASE 
   168	            WHEN sm.prev_mrr IS NOT NULL AND sm.mrr_amount > sm.prev_mrr THEN sm.mrr_amount - sm.prev_mrr
   169	            ELSE 0 
   170	        END), 0) AS expansion_mrr,
   171	        COALESCE(SUM(CASE 
   172	            WHEN sm.prev_mrr IS NOT NULL AND sm.mrr_amount < sm.prev_mrr THEN sm.prev_mrr - sm.mrr_amount
   173	            ELSE 0 
   174	        END), 0) AS contraction_mrr,
   175	        COALESCE(SUM(CASE 
   176	            WHEN date_trunc('month', sm.canceled_at) = m.month THEN sm.mrr_amount 
   177	            ELSE 0 
   178	        END), 0) AS churned_mrr,
   179	        COALESCE(SUM(CASE 
   180	            WHEN date_trunc('month', sm.created_at) = m.month THEN sm.mrr_amount 
   181	            ELSE 0 
   182	        END), 0) - COALESCE(SUM(CASE 
   183	            WHEN date_trunc('month', sm.canceled_at) = m.month THEN sm.mrr_amount 
   184	            ELSE 0 
   185	        END), 0) AS net_mrr_change,
   186	        COUNT(sm.id)::INTEGER AS active_subscriptions
   187	    FROM months m
   188	    LEFT JOIN subscription_mrr sm ON m.month = sm.month
   189	    GROUP BY m.month
   190	    ORDER BY m.month;
   191	END;
   192	$$ LANGUAGE plpgsql;
   193	
   194	-- Customer Lifetime Value (CLV) analysis
   195	CREATE OR REPLACE FUNCTION get_clv_cohort_analysis(
   196	    cohort_period VARCHAR DEFAULT 'month' -- month, quarter
   197	)
   198	RETURNS TABLE (
   199	    cohort_period TEXT,
   200	    cohort_size INTEGER,
   201	    avg_clv DECIMAL(10, 2),
   202	    avg_lifespan_days INTEGER,
   203	    total_revenue DECIMAL(12, 2),
   204	    churn_rate DECIMAL(5, 2)
   205	) AS $$
   206	DECLARE
   207	    period_format TEXT;
   208	BEGIN
   209	    period_format := CASE 
   210	        WHEN cohort_period = 'quarter' THEN 'YYYY-Q'
   211	        ELSE 'YYYY-MM'
   212	    END;
   213	
   214	    RETURN QUERY
   215	    WITH user_cohorts AS (
   216	        SELECT 
   217	            u.id AS user_id,
   218	            TO_CHAR(u.created_at, period_format) AS cohort,
   219	            u.created_at AS cohort_date
   220	        FROM users u
   221	    ),
   222	    user_metrics AS (
   223	        SELECT 
   224	            uc.user_id,
   225	            uc.cohort,
   226	            uc.cohort_date,
   227	            COALESCE(SUM(p.amount), 0) AS total_revenue,
   228	            MIN(s.created_at) AS first_subscription,
   229	            MAX(COALESCE(s.canceled_at, CURRENT_TIMESTAMP)) AS last_active,
   230	            COUNT(DISTINCT s.id) AS subscription_count,
   231	            CASE WHEN MAX(s.canceled_at) IS NOT NULL THEN true ELSE false END AS has_churned
   232	        FROM user_cohorts uc
   233	        LEFT JOIN subscriptions s ON uc.user_id = s.user_id
   234	        LEFT JOIN payments p ON s.id = p.subscription_id AND p.status = 'succeeded'
   235	        GROUP BY uc.user_id, uc.cohort, uc.cohort_date
   236	    )
   237	    SELECT 
   238	        um.cohort AS cohort_period,
   239	        COUNT(*)::INTEGER AS cohort_size,
   240	        AVG(um.total_revenue)::DECIMAL(10, 2) AS avg_clv,
   241	        AVG(EXTRACT(DAYS FROM um.last_active - um.cohort_date))::INTEGER AS avg_lifespan_days,
   242	        SUM(um.total_revenue)::DECIMAL(12, 2) AS total_revenue,
   243	        (COUNT(*) FILTER (WHERE um.has_churned) * 100.0 / COUNT(*))::DECIMAL(5, 2) AS churn_rate
   244	    FROM user_metrics um
   245	    GROUP BY um.cohort
   246	    ORDER BY um.cohort;
   247	END;
   248	$$ LANGUAGE plpgsql;
   249	
   250	-- Subscription churn analysis
   251	CREATE OR REPLACE FUNCTION get_churn_analysis(
   252	    start_date DATE,
   253	    end_date DATE,
   254	    period_type VARCHAR DEFAULT 'month'
   255	)
   256	RETURNS TABLE (
   257	    period_start TIMESTAMP WITH TIME ZONE,
   258	    period_end TIMESTAMP WITH TIME ZONE,
   259	    active_start INTEGER,
   260	    new_subscriptions INTEGER,
   261	    cancelled_subscriptions INTEGER,
   262	    active_end INTEGER,
   263	    gross_churn_rate DECIMAL(5, 2),
   264	    net_churn_rate DECIMAL(5, 2),
   265	    growth_rate DECIMAL(5, 2)
   266	) AS $$
   267	DECLARE
   268	    period_interval INTERVAL;
   269	    period_trunc_format TEXT;
   270	BEGIN
   271	    -- Set interval based on period type
   272	    CASE period_type
   273	        WHEN 'week' THEN 
   274	            period_interval := INTERVAL '1 week';
   275	            period_trunc_format := 'week';
   276	        WHEN 'month' THEN 
   277	            period_interval := INTERVAL '1 month';
   278	            period_trunc_format := 'month';
   279	        WHEN 'quarter' THEN 
   280	            period_interval := INTERVAL '3 months';
   281	            period_trunc_format := 'quarter';
   282	        ELSE 
   283	            period_interval := INTERVAL '1 month';
   284	            period_trunc_format := 'month';
   285	    END CASE;
   286	
   287	    RETURN QUERY
   288	    WITH periods AS (
   289	        SELECT 
   290	            date_trunc(period_trunc_format, generate_series(
   291	                start_date::timestamp,
   292	                end_date::timestamp,
   293	                period_interval
   294	            )) AS period_start
   295	    ),
   296	    period_bounds AS (
   297	        SELECT 
   298	            period_start,
   299	            period_start + period_interval AS period_end
   300	        FROM periods
   301	    ),
   302	    subscription_metrics AS (
   303	        SELECT 
   304	            pb.period_start,
   305	            pb.period_end,
   306	            -- Active at start of period
   307	            COUNT(CASE WHEN s.created_at < pb.period_start 
   308	                      AND (s.canceled_at IS NULL OR s.canceled_at >= pb.period_start)
   309	                      AND s.status = 'active'
   310	                  THEN 1 END) AS active_start,
   311	            -- New subscriptions during period
   312	            COUNT(CASE WHEN s.created_at >= pb.period_start 
   313	                      AND s.created_at < pb.period_end
   314	                  THEN 1 END) AS new_subscriptions,
   315	            -- Cancelled during period
   316	            COUNT(CASE WHEN s.canceled_at >= pb.period_start 
   317	                      AND s.canceled_at < pb.period_end
   318	                  THEN 1 END) AS cancelled_subscriptions,
   319	            -- Active at end of period
   320	            COUNT(CASE WHEN s.created_at < pb.period_end 
   321	                      AND (s.canceled_at IS NULL OR s.canceled_at >= pb.period_end)
   322	                      AND s.status = 'active'
   323	                  THEN 1 END) AS active_end
   324	        FROM period_bounds pb
   325	        LEFT JOIN subscriptions s ON s.created_at < pb.period_end
   326	        GROUP BY pb.period_start, pb.period_end
   327	    )
   328	    SELECT 
   329	        sm.period_start,
   330	        sm.period_end,
   331	        sm.active_start::INTEGER,
   332	        sm.new_subscriptions::INTEGER,
   333	        sm.cancelled_subscriptions::INTEGER,
   334	        sm.active_end::INTEGER,
   335	        CASE WHEN sm.active_start > 0 
   336	            THEN (sm.cancelled_subscriptions * 100.0 / sm.active_start)::DECIMAL(5, 2)
   337	            ELSE 0::DECIMAL(5, 2)
   338	        END AS gross_churn_rate,
   339	        CASE WHEN sm.active_start > 0 
   340	            THEN ((sm.cancelled_subscriptions - sm.new_subscriptions) * 100.0 / sm.active_start)::DECIMAL(5, 2)
   341	            ELSE 0::DECIMAL(5, 2)
   342	        END AS net_churn_rate,
   343	        CASE WHEN sm.active_start > 0 
   344	            THEN ((sm.active_end - sm.active_start) * 100.0 / sm.active_start)::DECIMAL(5, 2)
   345	            ELSE 0::DECIMAL(5, 2)
   346	        END AS growth_rate
   347	    FROM subscription_metrics sm
   348	    ORDER BY sm.period_start;
   349	END;
   350	$$ LANGUAGE plpgsql;
   351	
   352	-- Revenue per user analysis
   353	CREATE OR REPLACE FUNCTION get_arpu_analysis(
   354	    start_date DATE,
   355	    end_date DATE,
   356	    period_type VARCHAR DEFAULT 'month'
   357	)
   358	RETURNS TABLE (
   359	    period_start TIMESTAMP WITH TIME ZONE,
   360	    total_revenue DECIMAL(12, 2),
   361	    total_active_users INTEGER,
   362	    arpu DECIMAL(10, 2), -- Average Revenue Per User
   363	    arppu DECIMAL(10, 2) -- Average Revenue Per Paying User
   364	) AS $$
   365	DECLARE
   366	    period_interval INTERVAL;
   367	    period_trunc_format TEXT;
   368	BEGIN
   369	    CASE period_type
   370	        WHEN 'week' THEN 
   371	            period_interval := INTERVAL '1 week';
   372	            period_trunc_format := 'week';
   373	        WHEN 'month' THEN 
   374	            period_interval := INTERVAL '1 month';
   375	            period_trunc_format := 'month';
   376	        WHEN 'quarter' THEN 
   377	            period_interval := INTERVAL '3 months';
   378	            period_trunc_format := 'quarter';
   379	        ELSE 
   380	            period_interval := INTERVAL '1 month';
   381	            period_trunc_format := 'month';
   382	    END CASE;
   383	
   384	    RETURN QUERY
   385	    WITH periods AS (
   386	        SELECT 
   387	            date_trunc(period_trunc_format, generate_series(
   388	                start_date::timestamp,
   389	                end_date::timestamp,
   390	                period_interval
   391	            )) AS period_start
   392	    ),
   393	    period_metrics AS (
   394	        SELECT 
   395	            p.period_start,
   396	            p.period_start + period_interval AS period_end,
   397	            COALESCE(SUM(pay.amount), 0) AS total_revenue,
   398	            COUNT(DISTINCT ua.user_id) AS total_active_users,
   399	            COUNT(DISTINCT pay.user_id) AS paying_users
   400	        FROM periods p
   401	        LEFT JOIN user_activities ua ON ua.created_at >= p.period_start 
   402	            AND ua.created_at < p.period_start + period_interval
   403	        LEFT JOIN payments pay ON pay.paid_at >= p.period_start 
   404	            AND pay.paid_at < p.period_start + period_interval
   405	            AND pay.status = 'succeeded'
   406	        GROUP BY p.period_start
   407	    )
   408	    SELECT 
   409	        pm.period_start,
   410	        pm.total_revenue,
   411	        pm.total_active_users::INTEGER,
   412	        CASE WHEN pm.total_active_users > 0 
   413	            THEN (pm.total_revenue / pm.total_active_users)::DECIMAL(10, 2)
   414	            ELSE 0::DECIMAL(10, 2)
   415	        END AS arpu,
   416	        CASE WHEN pm.paying_users > 0 
   417	            THEN (pm.total_revenue / pm.paying_users)::DECIMAL(10, 2)
   418	            ELSE 0::DECIMAL(10, 2)
   419	        END AS arppu
   420	    FROM period_metrics pm
   421	    ORDER BY pm.period_start;
   422	END;
   423	$$ LANGUAGE plpgsql;
   424	
   425	-- Plan performance analysis
   426	CREATE OR REPLACE FUNCTION get_plan_performance(
   427	    start_date DATE,
   428	    end_date DATE
   429	)
   430	RETURNS TABLE (
   431	    plan_name VARCHAR,
   432	    plan_price DECIMAL(10, 2),
   433	    total_subscriptions BIGINT,
   434	    active_subscriptions BIGINT,
   435	    total_revenue DECIMAL(12, 2),
   436	    avg_lifespan_days INTEGER,
   437	    churn_rate DECIMAL(5, 2)
   438	) AS $$
   439	BEGIN
   440	    RETURN QUERY
   441	    SELECT 
   442	        sp.name AS plan_name,
   443	        sp.price AS plan_price,
   444	        COUNT(s.id) AS total_subscriptions,
   445	        COUNT(s.id) FILTER (WHERE s.status = 'active') AS active_subscriptions,
   446	        COALESCE(SUM(p.amount), 0) AS total_revenue,
   447	        AVG(EXTRACT(DAYS FROM COALESCE(s.canceled_at, CURRENT_TIMESTAMP) - s.created_at))::INTEGER AS avg_lifespan_days,
   448	        (COUNT(s.id) FILTER (WHERE s.canceled_at IS NOT NULL) * 100.0 / 
   449	         NULLIF(COUNT(s.id), 0))::DECIMAL(5, 2) AS churn_rate
   450	    FROM subscription_plans sp
   451	    LEFT JOIN subscriptions s ON sp.stripe_price_id = s.stripe_price_id
   452	        AND s.created_at BETWEEN start_date AND end_date
   453	    LEFT JOIN payments p ON s.id = p.subscription_id AND p.status = 'succeeded'
   454	    WHERE sp.is_active = true
   455	    GROUP BY sp.name, sp.price, sp.id
   456	    ORDER BY total_revenue DESC;
   457	END;
   458	$$ LANGUAGE plpgsql;
=== FILE: ./db/SCHEMA.sql ===
     1	-- SceneScout v14 Core Database Schema
     2	-- This file contains the main tables for the SceneScout application
     3	
     4	-- Enable necessary extensions
     5	CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
     6	CREATE EXTENSION IF NOT EXISTS "postgis";
     7	CREATE EXTENSION IF NOT EXISTS "pg_trgm";
     8	
     9	-- Users table - stores user authentication and basic info
    10	CREATE TABLE users (
    11	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    12	    email VARCHAR(255) UNIQUE NOT NULL,
    13	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    14	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    15	    last_login_at TIMESTAMP WITH TIME ZONE,
    16	    is_active BOOLEAN DEFAULT true,
    17	    is_admin BOOLEAN DEFAULT false,
    18	    deleted_at TIMESTAMP WITH TIME ZONE -- Soft delete
    19	);
    20	
    21	-- User profiles - extended user information
    22	CREATE TABLE profiles (
    23	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    24	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    25	    username VARCHAR(50) UNIQUE,
    26	    display_name VARCHAR(100),
    27	    bio TEXT,
    28	    avatar_url TEXT,
    29	    location VARCHAR(255),
    30	    preferences JSONB DEFAULT '{}', -- User preferences as flexible JSON
    31	    social_links JSONB DEFAULT '{}', -- Social media links
    32	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    33	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    34	    UNIQUE(user_id)
    35	);
    36	
    37	-- Cities table - predefined cities for events
    38	CREATE TABLE cities (
    39	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    40	    name VARCHAR(100) NOT NULL,
    41	    state_code VARCHAR(2),
    42	    country_code VARCHAR(2) NOT NULL DEFAULT 'US',
    43	    latitude DECIMAL(10, 8) NOT NULL,
    44	    longitude DECIMAL(11, 8) NOT NULL,
    45	    timezone VARCHAR(50),
    46	    population INTEGER,
    47	    metro_area VARCHAR(100),
    48	    slug VARCHAR(100) UNIQUE NOT NULL, -- URL-friendly name
    49	    is_active BOOLEAN DEFAULT true,
    50	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    51	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    52	);
    53	
    54	-- Venues table - locations where events are held
    55	CREATE TABLE venues (
    56	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    57	    name VARCHAR(255) NOT NULL,
    58	    slug VARCHAR(255) UNIQUE NOT NULL,
    59	    description TEXT,
    60	    address VARCHAR(255),
    61	    city_id UUID REFERENCES cities(id),
    62	    latitude DECIMAL(10, 8),
    63	    longitude DECIMAL(11, 8),
    64	    location GEOGRAPHY(Point, 4326), -- PostGIS point for spatial queries
    65	    capacity INTEGER,
    66	    venue_type VARCHAR(50), -- bar, club, theater, outdoor, etc.
    67	    amenities JSONB DEFAULT '[]', -- Array of amenities
    68	    images JSONB DEFAULT '[]', -- Array of image URLs
    69	    contact_info JSONB DEFAULT '{}', -- Phone, email, website, etc.
    70	    hours JSONB DEFAULT '{}', -- Operating hours by day
    71	    is_verified BOOLEAN DEFAULT false,
    72	    is_active BOOLEAN DEFAULT true,
    73	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    74	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    75	    deleted_at TIMESTAMP WITH TIME ZONE
    76	);
    77	
    78	-- Events table - main events data
    79	CREATE TABLE events (
    80	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    81	    name VARCHAR(255) NOT NULL,
    82	    slug VARCHAR(255) UNIQUE NOT NULL,
    83	    description TEXT,
    84	    short_description VARCHAR(500),
    85	    event_date DATE NOT NULL,
    86	    start_time TIME,
    87	    end_time TIME,
    88	    venue_id UUID REFERENCES venues(id),
    89	    city_id UUID REFERENCES cities(id),
    90	    location_name VARCHAR(255), -- For events without a venue
    91	    address VARCHAR(255),
    92	    latitude DECIMAL(10, 8),
    93	    longitude DECIMAL(11, 8),
    94	    location GEOGRAPHY(Point, 4326), -- PostGIS point
    95	    categories JSONB DEFAULT '[]', -- Array of categories
    96	    tags JSONB DEFAULT '[]', -- Array of tags
    97	    images JSONB DEFAULT '[]', -- Array of image URLs
    98	    featured_image_url TEXT,
    99	    ticket_url TEXT,
   100	    ticket_price_min DECIMAL(10, 2),
   101	    ticket_price_max DECIMAL(10, 2),
   102	    currency VARCHAR(3) DEFAULT 'USD',
   103	    organizer_info JSONB DEFAULT '{}', -- Organizer details
   104	    social_links JSONB DEFAULT '{}', -- Event social media
   105	    is_featured BOOLEAN DEFAULT false,
   106	    is_cancelled BOOLEAN DEFAULT false,
   107	    cancellation_reason TEXT,
   108	    view_count INTEGER DEFAULT 0,
   109	    attendee_count INTEGER DEFAULT 0,
   110	    source VARCHAR(50), -- manual, import, submission, etc.
   111	    external_id VARCHAR(255), -- ID from external source
   112	    metadata JSONB DEFAULT '{}', -- Additional flexible data
   113	    created_by UUID REFERENCES users(id),
   114	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   115	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   116	    deleted_at TIMESTAMP WITH TIME ZONE
   117	);
   118	
   119	-- User saved/favorited events
   120	CREATE TABLE user_events (
   121	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   122	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   123	    event_id UUID NOT NULL REFERENCES events(id) ON DELETE CASCADE,
   124	    is_favorite BOOLEAN DEFAULT false,
   125	    is_attending BOOLEAN DEFAULT false,
   126	    notes TEXT,
   127	    reminder_sent BOOLEAN DEFAULT false,
   128	    reminder_time TIMESTAMP WITH TIME ZONE,
   129	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   130	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   131	    UNIQUE(user_id, event_id)
   132	);
   133	
   134	-- Plans - user-created event collections
   135	CREATE TABLE plans (
   136	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   137	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   138	    name VARCHAR(255) NOT NULL,
   139	    description TEXT,
   140	    date DATE,
   141	    city_id UUID REFERENCES cities(id),
   142	    is_public BOOLEAN DEFAULT false,
   143	    is_template BOOLEAN DEFAULT false,
   144	    share_token VARCHAR(50) UNIQUE,
   145	    view_count INTEGER DEFAULT 0,
   146	    metadata JSONB DEFAULT '{}',
   147	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   148	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   149	    deleted_at TIMESTAMP WITH TIME ZONE
   150	);
   151	
   152	-- Events within plans
   153	CREATE TABLE plan_events (
   154	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   155	    plan_id UUID NOT NULL REFERENCES plans(id) ON DELETE CASCADE,
   156	    event_id UUID NOT NULL REFERENCES events(id) ON DELETE CASCADE,
   157	    order_position INTEGER NOT NULL DEFAULT 0,
   158	    notes TEXT,
   159	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   160	    UNIQUE(plan_id, event_id)
   161	);
   162	
   163	-- User submissions for new events/venues
   164	CREATE TABLE submissions (
   165	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   166	    user_id UUID REFERENCES users(id),
   167	    submission_type VARCHAR(20) NOT NULL CHECK (submission_type IN ('event', 'venue')),
   168	    submission_data JSONB NOT NULL, -- All submitted data
   169	    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected', 'needs_info')),
   170	    reviewer_id UUID REFERENCES users(id),
   171	    review_notes TEXT,
   172	    approved_entity_id UUID, -- ID of created event/venue if approved
   173	    submitted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   174	    reviewed_at TIMESTAMP WITH TIME ZONE,
   175	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   176	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   177	);
   178	
   179	-- Promotions and featured content
   180	CREATE TABLE promotions (
   181	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   182	    promotion_type VARCHAR(20) NOT NULL CHECK (promotion_type IN ('event', 'venue', 'banner')),
   183	    entity_id UUID, -- References event or venue ID
   184	    title VARCHAR(255),
   185	    description TEXT,
   186	    image_url TEXT,
   187	    link_url TEXT,
   188	    position INTEGER DEFAULT 0,
   189	    start_date TIMESTAMP WITH TIME ZONE NOT NULL,
   190	    end_date TIMESTAMP WITH TIME ZONE NOT NULL,
   191	    city_id UUID REFERENCES cities(id),
   192	    target_audience JSONB DEFAULT '{}', -- Targeting criteria
   193	    impressions INTEGER DEFAULT 0,
   194	    clicks INTEGER DEFAULT 0,
   195	    is_active BOOLEAN DEFAULT true,
   196	    created_by UUID REFERENCES users(id),
   197	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   198	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   199	);
   200	
   201	-- Push notification subscriptions
   202	CREATE TABLE push_subscriptions (
   203	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   204	    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
   205	    endpoint TEXT NOT NULL UNIQUE,
   206	    p256dh TEXT NOT NULL,
   207	    auth TEXT NOT NULL,
   208	    user_agent TEXT,
   209	    categories JSONB DEFAULT '[]', -- Notification categories user wants
   210	    is_active BOOLEAN DEFAULT true,
   211	    last_used_at TIMESTAMP WITH TIME ZONE,
   212	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   213	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   214	);
   215	
   216	-- Analytics - Event views tracking
   217	CREATE TABLE event_views (
   218	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   219	    event_id UUID NOT NULL REFERENCES events(id) ON DELETE CASCADE,
   220	    user_id UUID REFERENCES users(id),
   221	    session_id VARCHAR(100),
   222	    ip_address INET,
   223	    user_agent TEXT,
   224	    referrer TEXT,
   225	    viewed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   226	    view_duration INTEGER, -- Seconds spent on page
   227	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   228	);
   229	
   230	-- Analytics - General metrics
   231	CREATE TABLE metrics (
   232	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   233	    metric_type VARCHAR(50) NOT NULL,
   234	    metric_name VARCHAR(100) NOT NULL,
   235	    metric_value NUMERIC,
   236	    dimensions JSONB DEFAULT '{}', -- Flexible dimensions for grouping
   237	    period_start TIMESTAMP WITH TIME ZONE NOT NULL,
   238	    period_end TIMESTAMP WITH TIME ZONE NOT NULL,
   239	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   240	    INDEX idx_metrics_type_period (metric_type, period_start, period_end)
   241	);
   242	
   243	-- User activity log
   244	CREATE TABLE user_activities (
   245	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   246	    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
   247	    activity_type VARCHAR(50) NOT NULL, -- login, view_event, save_event, etc.
   248	    entity_type VARCHAR(50), -- event, venue, plan, etc.
   249	    entity_id UUID,
   250	    metadata JSONB DEFAULT '{}',
   251	    ip_address INET,
   252	    user_agent TEXT,
   253	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   254	);
   255	
   256	-- Create update trigger function
   257	CREATE OR REPLACE FUNCTION update_updated_at_column()
   258	RETURNS TRIGGER AS $$
   259	BEGIN
   260	    NEW.updated_at = CURRENT_TIMESTAMP;
   261	    RETURN NEW;
   262	END;
   263	$$ language 'plpgsql';
   264	
   265	-- Apply update trigger to all tables with updated_at
   266	CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   267	CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   268	CREATE TRIGGER update_cities_updated_at BEFORE UPDATE ON cities FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   269	CREATE TRIGGER update_venues_updated_at BEFORE UPDATE ON venues FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   270	CREATE TRIGGER update_events_updated_at BEFORE UPDATE ON events FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   271	CREATE TRIGGER update_user_events_updated_at BEFORE UPDATE ON user_events FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   272	CREATE TRIGGER update_plans_updated_at BEFORE UPDATE ON plans FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   273	CREATE TRIGGER update_submissions_updated_at BEFORE UPDATE ON submissions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   274	CREATE TRIGGER update_promotions_updated_at BEFORE UPDATE ON promotions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   275	CREATE TRIGGER update_push_subscriptions_updated_at BEFORE UPDATE ON push_subscriptions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
=== FILE: ./db/SEED.sql ===
     1	-- SceneScout v14 Development Seed Data
     2	-- *** DEV ONLY - DO NOT RUN IN PRODUCTION ***
     3	-- This file contains sample data for development and testing
     4	
     5	-- WARNING: This will insert test data into the database
     6	-- Only run this in development environments
     7	
     8	-- Insert seed cities
     9	INSERT INTO cities (id, name, state_code, country_code, latitude, longitude, timezone, slug, is_active) VALUES
    10	('550e8400-e29b-41d4-a716-446655440001', 'New York', 'NY', 'US', 40.7128, -74.0060, 'America/New_York', 'new-york', true),
    11	('550e8400-e29b-41d4-a716-446655440002', 'Los Angeles', 'CA', 'US', 34.0522, -118.2437, 'America/Los_Angeles', 'los-angeles', true),
    12	('550e8400-e29b-41d4-a716-446655440003', 'Chicago', 'IL', 'US', 41.8781, -87.6298, 'America/Chicago', 'chicago', true),
    13	('550e8400-e29b-41d4-a716-446655440004', 'Miami', 'FL', 'US', 25.7617, -80.1918, 'America/New_York', 'miami', true),
    14	('550e8400-e29b-41d4-a716-446655440005', 'San Francisco', 'CA', 'US', 37.7749, -122.4194, 'America/Los_Angeles', 'san-francisco', true),
    15	('550e8400-e29b-41d4-a716-446655440006', 'Austin', 'TX', 'US', 30.2672, -97.7431, 'America/Chicago', 'austin', true);
    16	
    17	-- Insert seed users
    18	INSERT INTO users (id, email, created_at, is_admin) VALUES
    19	('550e8400-e29b-41d4-a716-446655440100', 'admin@scenescout.com', CURRENT_TIMESTAMP - INTERVAL '30 days', true),
    20	('550e8400-e29b-41d4-a716-446655440101', 'john.doe@example.com', CURRENT_TIMESTAMP - INTERVAL '25 days', false),
    21	('550e8400-e29b-41d4-a716-446655440102', 'jane.smith@example.com', CURRENT_TIMESTAMP - INTERVAL '20 days', false),
    22	('550e8400-e29b-41d4-a716-446655440103', 'mike.wilson@example.com', CURRENT_TIMESTAMP - INTERVAL '15 days', false),
    23	('550e8400-e29b-41d4-a716-446655440104', 'sarah.johnson@example.com', CURRENT_TIMESTAMP - INTERVAL '10 days', false);
    24	
    25	-- Insert seed profiles
    26	INSERT INTO profiles (id, user_id, username, display_name, bio, location, preferences) VALUES
    27	('550e8400-e29b-41d4-a716-446655440200', '550e8400-e29b-41d4-a716-446655440100', 'admin', 'SceneScout Admin', 'Administrator of SceneScout', 'New York, NY', '{"notifications": true, "theme": "dark"}'),
    28	('550e8400-e29b-41d4-a716-446655440201', '550e8400-e29b-41d4-a716-446655440101', 'johndoe', 'John Doe', 'Music lover and event enthusiast', 'Brooklyn, NY', '{"categories": ["music", "nightlife"], "notifications": true}'),
    29	('550e8400-e29b-41d4-a716-446655440202', '550e8400-e29b-41d4-a716-446655440102', 'janesmith', 'Jane Smith', 'Art curator and culture explorer', 'Manhattan, NY', '{"categories": ["art", "culture", "food"], "notifications": false}'),
    30	('550e8400-e29b-41d4-a716-446655440203', '550e8400-e29b-41d4-a716-446655440103', 'mikewilson', 'Mike Wilson', 'Sports fan and concert goer', 'Chicago, IL', '{"categories": ["sports", "music"], "notifications": true}'),
    31	('550e8400-e29b-41d4-a716-446655440204', '550e8400-e29b-41d4-a716-446655440104', 'sarahjohnson', 'Sarah Johnson', 'Foodie and social butterfly', 'Miami, FL', '{"categories": ["food", "nightlife", "social"], "notifications": true}');
    32	
    33	-- Insert seed venues
    34	INSERT INTO venues (id, name, slug, description, address, city_id, latitude, longitude, location, capacity, venue_type, amenities, is_verified, is_active) VALUES
    35	('550e8400-e29b-41d4-a716-446655440300', 'Madison Square Garden', 'madison-square-garden', 'Famous arena in the heart of Manhattan', '4 Pennsylvania Plaza, New York, NY 10001', '550e8400-e29b-41d4-a716-446655440001', 40.7505, -73.9934, ST_MakePoint(-73.9934, 40.7505)::geography, 20789, 'arena', '["parking", "food_court", "merchandise", "accessible"]', true, true),
    36	('550e8400-e29b-41d4-a716-446655440301', 'Brooklyn Bowl', 'brooklyn-bowl', 'Music venue and bowling alley in Williamsburg', '61 Wythe Ave, Brooklyn, NY 11249', '550e8400-e29b-41d4-a716-446655440001', 40.7218, -73.9570, ST_MakePoint(-73.9570, 40.7218)::geography, 600, 'club', '["bowling", "restaurant", "bar", "live_music"]', true, true),
    37	('550e8400-e29b-41d4-a716-446655440302', 'The Hollywood Bowl', 'hollywood-bowl', 'Iconic outdoor amphitheater in Hollywood', '2301 Highland Ave, Hollywood, CA 90068', '550e8400-e29b-41d4-a716-446655440002', 34.1122, -118.3395, ST_MakePoint(-118.3395, 34.1122)::geography, 17500, 'amphitheater', '["outdoor", "picnic_areas", "parking", "accessible"]', true, true),
    38	('550e8400-e29b-41d4-a716-446655440303', 'House of Blues Chicago', 'house-of-blues-chicago', 'Live music venue in downtown Chicago', '329 N Dearborn St, Chicago, IL 60654', '550e8400-e29b-41d4-a716-446655440003', 41.8881, -87.6298, ST_MakePoint(-87.6298, 41.8881)::geography, 1500, 'theater', '["restaurant", "bar", "vip_areas", "merchandise"]', true, true),
    39	('550e8400-e29b-41d4-a716-446655440304', 'LIV Miami', 'liv-miami', 'Ultra-exclusive nightclub in South Beach', '4441 Collins Ave, Miami Beach, FL 33140', '550e8400-e29b-41d4-a716-446655440004', 25.8197, -80.1295, ST_MakePoint(-80.1295, 25.8197)::geography, 2000, 'nightclub', '["vip_tables", "bottle_service", "dance_floor", "rooftop"]', true, true);
    40	
    41	-- Insert seed events
    42	INSERT INTO events (id, name, slug, description, event_date, start_time, end_time, venue_id, city_id, categories, tags, featured_image_url, ticket_url, ticket_price_min, ticket_price_max, is_featured, source, created_by) VALUES
    43	('550e8400-e29b-41d4-a716-446655440400', 'Taylor Swift - Eras Tour', 'taylor-swift-eras-tour-msg', 'Taylor Swift brings her record-breaking Eras Tour to Madison Square Garden for three spectacular nights.', CURRENT_DATE + INTERVAL '30 days', '20:00', '23:30', '550e8400-e29b-41d4-a716-446655440300', '550e8400-e29b-41d4-a716-446655440001', '["music", "pop", "concert"]', '["taylor_swift", "eras_tour", "pop_music", "sold_out"]', 'https://example.com/taylor-swift.jpg', 'https://ticketmaster.com/taylor-swift', 125.00, 500.00, true, 'manual', '550e8400-e29b-41d4-a716-446655440100'),
    44	('550e8400-e29b-41d4-a716-446655440401', 'Indie Rock Night', 'indie-rock-night-brooklyn-bowl', 'Local indie bands showcase at Brooklyn Bowl with bowling and drinks.', CURRENT_DATE + INTERVAL '7 days', '19:00', '02:00', '550e8400-e29b-41d4-a716-446655440301', '550e8400-e29b-41d4-a716-446655440001', '["music", "indie", "rock"]', '["local_bands", "bowling", "nightlife"]', 'https://example.com/indie-rock.jpg', 'https://brooklynbowl.com/tickets', 25.00, 45.00, false, 'manual', '550e8400-e29b-41d4-a716-446655440101'),
    45	('550e8400-e29b-41d4-a716-446655440402', 'LA Philharmonic Summer Concert', 'la-phil-summer-concert', 'Experience classical music under the stars at the Hollywood Bowl.', CURRENT_DATE + INTERVAL '21 days', '20:00', '22:30', '550e8400-e29b-41d4-a716-446655440302', '550e8400-e29b-41d4-a716-446655440002', '["music", "classical", "outdoor"]', '["philharmonic", "classical_music", "outdoor", "summer"]', 'https://example.com/la-phil.jpg', 'https://hollywoodbowl.com/tickets', 35.00, 150.00, true, 'manual', '550e8400-e29b-41d4-a716-446655440100'),
    46	('550e8400-e29b-41d4-a716-446655440403', 'Jazz & Blues Festival', 'jazz-blues-festival-chicago', 'Three-day festival featuring the best jazz and blues artists in Chicago.', CURRENT_DATE + INTERVAL '14 days', '18:00', '23:00', '550e8400-e29b-41d4-a716-446655440303', '550e8400-e29b-41d4-a716-446655440003', '["music", "jazz", "blues", "festival"]', '["jazz_festival", "blues", "multi_day", "live_music"]', 'https://example.com/jazz-blues.jpg', 'https://hob.com/chicago/tickets', 65.00, 200.00, true, 'manual', '550e8400-e29b-41d4-a716-446655440102'),
    47	('550e8400-e29b-41d4-a716-446655440404', 'Miami Music Week Kickoff', 'miami-music-week-kickoff', 'Electronic dance music event kicking off Miami Music Week.', CURRENT_DATE + INTERVAL '45 days', '22:00', '05:00', '550e8400-e29b-41d4-a716-446655440304', '550e8400-e29b-41d4-a716-446655440004', '["music", "electronic", "dance", "nightlife"]', '["edm", "miami_music_week", "club", "late_night"]', 'https://example.com/miami-music-week.jpg', 'https://livmiami.com/tickets', 80.00, 300.00, true, 'manual', '550e8400-e29b-41d4-a716-446655440103'),
    48	('550e8400-e29b-41d4-a716-446655440405', 'Art Gallery Opening', 'art-gallery-opening-soho', 'Contemporary art exhibition opening in SoHo gallery.', CURRENT_DATE + INTERVAL '3 days', '18:00', '21:00', NULL, '550e8400-e29b-41d4-a716-446655440001', '["art", "culture", "exhibition"]', '["contemporary_art", "gallery", "opening", "wine"]', 'https://example.com/art-gallery.jpg', NULL, 0.00, 0.00, false, 'submission', '550e8400-e29b-41d4-a716-446655440102'),
    49	('550e8400-e29b-41d4-a716-446655440406', 'Food Truck Festival', 'food-truck-festival-austin', 'Dozens of food trucks gather for a weekend festival in Austin.', CURRENT_DATE + INTERVAL '12 days', '11:00', '22:00', NULL, '550e8400-e29b-41d4-a716-446655440006', '["food", "festival", "outdoor"]', '["food_trucks", "family_friendly", "weekend", "local"]', 'https://example.com/food-trucks.jpg', 'https://austinfoodfest.com', 10.00, 10.00, false, 'submission', '550e8400-e29b-41d4-a716-446655440104');
    50	
    51	-- Insert some user events (favorites/saved)
    52	INSERT INTO user_events (user_id, event_id, is_favorite, is_attending, reminder_time, created_at) VALUES
    53	('550e8400-e29b-41d4-a716-446655440101', '550e8400-e29b-41d4-a716-446655440400', true, true, CURRENT_TIMESTAMP + INTERVAL '29 days 18:00:00', CURRENT_TIMESTAMP - INTERVAL '5 days'),
    54	('550e8400-e29b-41d4-a716-446655440101', '550e8400-e29b-41d4-a716-446655440401', true, true, CURRENT_TIMESTAMP + INTERVAL '6 days 17:00:00', CURRENT_TIMESTAMP - INTERVAL '2 days'),
    55	('550e8400-e29b-41d4-a716-446655440102', '550e8400-e29b-41d4-a716-446655440402', true, false, CURRENT_TIMESTAMP + INTERVAL '20 days 18:00:00', CURRENT_TIMESTAMP - INTERVAL '3 days'),
    56	('550e8400-e29b-41d4-a716-446655440102', '550e8400-e29b-41d4-a716-446655440405', true, true, CURRENT_TIMESTAMP + INTERVAL '2 days 16:00:00', CURRENT_TIMESTAMP - INTERVAL '1 day'),
    57	('550e8400-e29b-41d4-a716-446655440103', '550e8400-e29b-41d4-a716-446655440403', true, true, CURRENT_TIMESTAMP + INTERVAL '13 days 16:00:00', CURRENT_TIMESTAMP - INTERVAL '4 days'),
    58	('550e8400-e29b-41d4-a716-446655440104', '550e8400-e29b-41d4-a716-446655440404', true, true, CURRENT_TIMESTAMP + INTERVAL '44 days 20:00:00', CURRENT_TIMESTAMP - INTERVAL '1 day'),
    59	('550e8400-e29b-41d4-a716-446655440104', '550e8400-e29b-41d4-a716-446655440406', true, false, NULL, CURRENT_TIMESTAMP);
    60	
    61	-- Insert seed plans
    62	INSERT INTO plans (id, user_id, name, description, date, city_id, is_public, created_at) VALUES
    63	('550e8400-e29b-41d4-a716-446655440500', '550e8400-e29b-41d4-a716-446655440101', 'NYC Music Weekend', 'Perfect weekend of live music in New York City', CURRENT_DATE + INTERVAL '7 days', '550e8400-e29b-41d4-a716-446655440001', true, CURRENT_TIMESTAMP - INTERVAL '3 days'),
    64	('550e8400-e29b-41d4-a716-446655440501', '550e8400-e29b-41d4-a716-446655440102', 'Art & Culture Tour', 'Exploring NYC''s best art galleries and cultural events', CURRENT_DATE + INTERVAL '3 days', '550e8400-e29b-41d4-a716-446655440001', true, CURRENT_TIMESTAMP - INTERVAL '1 day'),
    65	('550e8400-e29b-41d4-a716-446655440502', '550e8400-e29b-41d4-a716-446655440104', 'Miami Nightlife Experience', 'Ultimate Miami party weekend', CURRENT_DATE + INTERVAL '45 days', '550e8400-e29b-41d4-a716-446655440004', false, CURRENT_TIMESTAMP);
    66	
    67	-- Insert plan events
    68	INSERT INTO plan_events (plan_id, event_id, order_position, notes) VALUES
    69	('550e8400-e29b-41d4-a716-446655440500', '550e8400-e29b-41d4-a716-446655440401', 1, 'Start the weekend with indie rock and bowling'),
    70	('550e8400-e29b-41d4-a716-446655440500', '550e8400-e29b-41d4-a716-446655440400', 2, 'Main event - Taylor Swift concert!'),
    71	('550e8400-e29b-41d4-a716-446655440501', '550e8400-e29b-41d4-a716-446655440405', 1, 'Contemporary art gallery opening'),
    72	('550e8400-e29b-41d4-a716-446655440502', '550e8400-e29b-41d4-a716-446655440404', 1, 'Miami Music Week kickoff party');
    73	
    74	-- Insert subscription plans
    75	INSERT INTO subscription_plans (id, stripe_product_id, stripe_price_id, name, description, price, currency, interval, interval_count, trial_period_days, features, is_active) VALUES
    76	('550e8400-e29b-41d4-a716-446655440600', 'prod_test_basic', 'price_test_basic_monthly', 'Basic Plan', 'Access to basic features and event discovery', 9.99, 'USD', 'month', 1, 7, '["event_discovery", "save_events", "basic_recommendations"]', true),
    77	('550e8400-e29b-41d4-a716-446655440601', 'prod_test_pro', 'price_test_pro_monthly', 'Pro Plan', 'Advanced features including unlimited plans and priority support', 19.99, 'USD', 'month', 1, 7, '["unlimited_plans", "advanced_recommendations", "priority_support", "early_access"]', true),
    78	('550e8400-e29b-41d4-a716-446655440602', 'prod_test_pro_annual', 'price_test_pro_annual', 'Pro Plan (Annual)', 'Pro plan billed annually with 2 months free', 199.99, 'USD', 'year', 1, 14, '["unlimited_plans", "advanced_recommendations", "priority_support", "early_access", "annual_discount"]', true);
    79	
    80	-- Insert some sample submissions
    81	INSERT INTO submissions (id, user_id, submission_type, submission_data, status, submitted_at) VALUES
    82	('550e8400-e29b-41d4-a716-446655440700', '550e8400-e29b-41d4-a716-446655440103', 'event', '{"name": "Rooftop Jazz Night", "description": "Intimate jazz performance on Manhattan rooftop", "event_date": "2024-07-15", "start_time": "19:00", "categories": ["music", "jazz"], "location_name": "Rooftop Terrace Manhattan", "ticket_price_min": 35.00, "ticket_price_max": 65.00}', 'pending', CURRENT_TIMESTAMP - INTERVAL '2 days'),
    83	('550e8400-e29b-41d4-a716-446655440701', '550e8400-e29b-41d4-a716-446655440104', 'venue', '{"name": "The Underground", "description": "Intimate music venue in basement of historic building", "address": "123 Secret St, New York, NY", "venue_type": "club", "capacity": 200, "amenities": ["bar", "live_music", "intimate_setting"]}', 'approved', CURRENT_TIMESTAMP - INTERVAL '5 days');
    84	
    85	-- Insert some analytics data
    86	INSERT INTO event_views (event_id, user_id, session_id, viewed_at, view_duration) VALUES
    87	('550e8400-e29b-41d4-a716-446655440400', '550e8400-e29b-41d4-a716-446655440101', 'session_001', CURRENT_TIMESTAMP - INTERVAL '1 day', 45),
    88	('550e8400-e29b-41d4-a716-446655440400', '550e8400-e29b-41d4-a716-446655440102', 'session_002', CURRENT_TIMESTAMP - INTERVAL '1 day', 32),
    89	('550e8400-e29b-41d4-a716-446655440400', NULL, 'session_003', CURRENT_TIMESTAMP - INTERVAL '2 hours', 28),
    90	('550e8400-e29b-41d4-a716-446655440401', '550e8400-e29b-41d4-a716-446655440101', 'session_001', CURRENT_TIMESTAMP - INTERVAL '3 hours', 67),
    91	('550e8400-e29b-41d4-a716-446655440402', '550e8400-e29b-41d4-a716-446655440102', 'session_004', CURRENT_TIMESTAMP - INTERVAL '1 hour', 41);
    92	
    93	-- Insert user interests
    94	INSERT INTO user_interests (user_id, category, subcategory, interest_level) VALUES
    95	('550e8400-e29b-41d4-a716-446655440101', 'music', 'rock', 5),
    96	('550e8400-e29b-41d4-a716-446655440101', 'music', 'indie', 4),
    97	('550e8400-e29b-41d4-a716-446655440101', 'nightlife', 'concerts', 5),
    98	('550e8400-e29b-41d4-a716-446655440102', 'art', 'contemporary', 5),
    99	('550e8400-e29b-41d4-a716-446655440102', 'culture', 'exhibitions', 4),
   100	('550e8400-e29b-41d4-a716-446655440102', 'food', 'fine_dining', 3),
   101	('550e8400-e29b-41d4-a716-446655440103', 'music', 'jazz', 5),
   102	('550e8400-e29b-41d4-a716-446655440103', 'music', 'blues', 4),
   103	('550e8400-e29b-41d4-a716-446655440104', 'nightlife', 'clubs', 5),
   104	('550e8400-e29b-41d4-a716-446655440104', 'food', 'street_food', 4);
   105	
   106	-- Insert user follows
   107	INSERT INTO user_follows (follower_id, following_id) VALUES
   108	('550e8400-e29b-41d4-a716-446655440101', '550e8400-e29b-41d4-a716-446655440102'),
   109	('550e8400-e29b-41d4-a716-446655440102', '550e8400-e29b-41d4-a716-446655440101'),
   110	('550e8400-e29b-41d4-a716-446655440103', '550e8400-e29b-41d4-a716-446655440101'),
   111	('550e8400-e29b-41d4-a716-446655440104', '550e8400-e29b-41d4-a716-446655440101'),
   112	('550e8400-e29b-41d4-a716-446655440104', '550e8400-e29b-41d4-a716-446655440102');
   113	
   114	-- Initialize user stats
   115	INSERT INTO user_stats (user_id, events_attended, events_saved, plans_created, followers_count, following_count, points_total) VALUES
   116	('550e8400-e29b-41d4-a716-446655440101', 8, 2, 1, 3, 1, 150),
   117	('550e8400-e29b-41d4-a716-446655440102', 12, 2, 1, 2, 1, 200),
   118	('550e8400-e29b-41d4-a716-446655440103', 5, 1, 0, 0, 1, 75),
   119	('550e8400-e29b-41d4-a716-446655440104', 15, 2, 1, 0, 2, 300);
   120	
   121	-- Initialize user levels
   122	INSERT INTO user_levels (user_id, level, level_name, points_current, tier) VALUES
   123	('550e8400-e29b-41d4-a716-446655440101', 2, 'Regular', 150, 'bronze'),
   124	('550e8400-e29b-41d4-a716-446655440102', 3, 'Regular', 200, 'bronze'),
   125	('550e8400-e29b-41d4-a716-446655440103', 1, 'Newbie', 75, 'bronze'),
   126	('550e8400-e29b-41d4-a716-446655440104', 4, 'Regular', 300, 'bronze');
   127	
   128	-- Insert notification templates
   129	INSERT INTO push_notification_templates (name, notification_type, title_template, body_template, variables, is_active) VALUES
   130	('event_reminder', 'event_reminder', 'Event Reminder: {{event_name}}', 'Your saved event "{{event_name}}" is happening {{when}} at {{venue_name}}!', '["event_name", "when", "venue_name"]', true),
   131	('new_events_weekly', 'new_events', 'New Events This Week', 'Check out {{event_count}} new events added in {{city_name}} this week!', '["event_count", "city_name"]', true),
   132	('plan_shared', 'plan_invite', '{{sender_name}} shared a plan with you', 'Check out the plan "{{plan_name}}" shared by {{sender_name}}', '["sender_name", "plan_name"]', true);
   133	
   134	-- Insert some achievements
   135	INSERT INTO user_achievements (user_id, achievement_type, achievement_name, description, points, rarity) VALUES
   136	('550e8400-e29b-41d4-a716-446655440101', 'early_adopter', 'Early Adopter', 'Joined SceneScout in the first month', 100, 'rare'),
   137	('550e8400-e29b-41d4-a716-446655440102', 'plan_creator', 'Plan Creator', 'Created your first event plan', 50, 'common'),
   138	('550e8400-e29b-41d4-a716-446655440104', 'social_butterfly', 'Social Butterfly', 'Followed 5+ users', 75, 'uncommon');
   139	
   140	-- Update event view counts based on views
   141	UPDATE events SET view_count = (
   142	    SELECT COUNT(*) FROM event_views WHERE event_views.event_id = events.id
   143	);
   144	
   145	-- Add some fake reviews
   146	INSERT INTO user_reviews (user_id, entity_type, entity_id, rating, review_text) VALUES
   147	('550e8400-e29b-41d4-a716-446655440101', 'venue', '550e8400-e29b-41d4-a716-446655440301', 5, 'Amazing venue! The combination of live music and bowling is perfect. Great atmosphere and drinks.'),
   148	('550e8400-e29b-41d4-a716-446655440102', 'venue', '550e8400-e29b-41d4-a716-446655440300', 4, 'Classic venue with great acoustics. Can get crowded but that''s part of the experience.'),
   149	('550e8400-e29b-41d4-a716-446655440103', 'venue', '550e8400-e29b-41d4-a716-446655440303', 5, 'Perfect venue for jazz and blues. Intimate setting with excellent sound quality.');
   150	
   151	-- Add some plan templates
   152	INSERT INTO plan_templates (id, created_by, name, description, category, city_id, tags, is_featured, is_public, template_data) VALUES
   153	('550e8400-e29b-41d4-a716-446655440800', '550e8400-e29b-41d4-a716-446655440100', 'Perfect Date Night', 'Romantic evening out with dinner and entertainment', 'date_night', '550e8400-e29b-41d4-a716-446655440001', '["romantic", "dinner", "entertainment"]', true, true, '{"event_criteria": [{"category": "food", "time": "early_evening"}, {"category": "music", "time": "evening"}], "duration_hours": 4}'),
   154	('550e8400-e29b-41d4-a716-446655440801', '550e8400-e29b-41d4-a716-446655440101', 'Music Lover''s Weekend', 'Two days of the best live music in the city', 'weekend_trip', '550e8400-e29b-41d4-a716-446655440001', '["music", "weekend", "concerts"]', true, true, '{"event_criteria": [{"category": "music", "day": "friday"}, {"category": "music", "day": "saturday"}], "duration_hours": 12}');
   155	
   156	COMMENT ON TABLE cities IS 'This is seed data for development - safe to delete';
   157	COMMENT ON TABLE users IS 'Contains seed users for development - prefix with 550e8400 indicates test data';
   158	COMMENT ON TABLE events IS 'Seed events for development and testing';
   159	
   160	-- Final message
   161	DO $$
   162	BEGIN
   163	    RAISE NOTICE 'SceneScout v14 seed data inserted successfully!';
   164	    RAISE NOTICE 'This includes:';
   165	    RAISE NOTICE '- 6 cities (NYC, LA, Chicago, Miami, SF, Austin)';
   166	    RAISE NOTICE '- 5 users with profiles';
   167	    RAISE NOTICE '- 5 venues';
   168	    RAISE NOTICE '- 7 events';
   169	    RAISE NOTICE '- 3 plans with events';
   170	    RAISE NOTICE '- Sample analytics, reviews, and user interactions';
   171	    RAISE NOTICE '';
   172	    RAISE NOTICE '*** Remember: This is DEV DATA ONLY ***';
   173	    RAISE NOTICE 'Run PURGE_SEED.sql to remove all seed data before production deployment';
   174	END $$;
=== FILE: ./db/STRIPE_EXTRAS.sql ===
     1	-- SceneScout v14 Stripe Integration Tables
     2	-- This file contains all tables related to Stripe payment processing
     3	
     4	-- Customer subscriptions
     5	CREATE TABLE subscriptions (
     6	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     7	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
     8	    stripe_customer_id VARCHAR(255) NOT NULL,
     9	    stripe_subscription_id VARCHAR(255) UNIQUE NOT NULL,
    10	    stripe_price_id VARCHAR(255) NOT NULL,
    11	    status VARCHAR(50) NOT NULL, -- active, past_due, canceled, incomplete, etc.
    12	    current_period_start TIMESTAMP WITH TIME ZONE NOT NULL,
    13	    current_period_end TIMESTAMP WITH TIME ZONE NOT NULL,
    14	    cancel_at_period_end BOOLEAN DEFAULT false,
    15	    canceled_at TIMESTAMP WITH TIME ZONE,
    16	    trial_start TIMESTAMP WITH TIME ZONE,
    17	    trial_end TIMESTAMP WITH TIME ZONE,
    18	    metadata JSONB DEFAULT '{}',
    19	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    20	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    21	);
    22	
    23	-- Payment history
    24	CREATE TABLE payments (
    25	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    26	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    27	    subscription_id UUID REFERENCES subscriptions(id),
    28	    stripe_payment_intent_id VARCHAR(255) UNIQUE,
    29	    stripe_charge_id VARCHAR(255) UNIQUE,
    30	    amount DECIMAL(10, 2) NOT NULL,
    31	    currency VARCHAR(3) NOT NULL DEFAULT 'USD',
    32	    status VARCHAR(50) NOT NULL, -- succeeded, pending, failed, refunded
    33	    description TEXT,
    34	    payment_method_type VARCHAR(50), -- card, bank_transfer, etc.
    35	    payment_method_last4 VARCHAR(4),
    36	    payment_method_brand VARCHAR(50),
    37	    failure_code VARCHAR(50),
    38	    failure_message TEXT,
    39	    refunded_amount DECIMAL(10, 2) DEFAULT 0,
    40	    metadata JSONB DEFAULT '{}',
    41	    paid_at TIMESTAMP WITH TIME ZONE,
    42	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    43	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    44	);
    45	
    46	-- Stripe webhook events for idempotency
    47	CREATE TABLE stripe_webhook_events (
    48	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    49	    stripe_event_id VARCHAR(255) UNIQUE NOT NULL,
    50	    event_type VARCHAR(100) NOT NULL,
    51	    api_version VARCHAR(50),
    52	    data JSONB NOT NULL,
    53	    processed BOOLEAN DEFAULT false,
    54	    processed_at TIMESTAMP WITH TIME ZONE,
    55	    error_message TEXT,
    56	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    57	);
    58	
    59	-- Customer information
    60	CREATE TABLE stripe_customers (
    61	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    62	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    63	    stripe_customer_id VARCHAR(255) UNIQUE NOT NULL,
    64	    email VARCHAR(255),
    65	    name VARCHAR(255),
    66	    phone VARCHAR(50),
    67	    address JSONB,
    68	    shipping JSONB,
    69	    balance INTEGER DEFAULT 0, -- Customer balance in cents
    70	    currency VARCHAR(3) DEFAULT 'USD',
    71	    default_payment_method_id VARCHAR(255),
    72	    invoice_settings JSONB DEFAULT '{}',
    73	    tax_info JSONB DEFAULT '{}',
    74	    metadata JSONB DEFAULT '{}',
    75	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    76	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    77	    UNIQUE(user_id)
    78	);
    79	
    80	-- Payment methods
    81	CREATE TABLE payment_methods (
    82	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    83	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    84	    stripe_payment_method_id VARCHAR(255) UNIQUE NOT NULL,
    85	    type VARCHAR(50) NOT NULL, -- card, bank_account, etc.
    86	    card_brand VARCHAR(50),
    87	    card_last4 VARCHAR(4),
    88	    card_exp_month INTEGER,
    89	    card_exp_year INTEGER,
    90	    card_funding VARCHAR(20), -- credit, debit, prepaid, unknown
    91	    billing_details JSONB DEFAULT '{}',
    92	    is_default BOOLEAN DEFAULT false,
    93	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    94	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    95	);
    96	
    97	-- Invoices
    98	CREATE TABLE invoices (
    99	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   100	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   101	    subscription_id UUID REFERENCES subscriptions(id),
   102	    stripe_invoice_id VARCHAR(255) UNIQUE NOT NULL,
   103	    stripe_invoice_number VARCHAR(255),
   104	    status VARCHAR(50) NOT NULL, -- draft, open, paid, void, uncollectible
   105	    amount_paid DECIMAL(10, 2),
   106	    amount_due DECIMAL(10, 2),
   107	    amount_remaining DECIMAL(10, 2),
   108	    currency VARCHAR(3) NOT NULL DEFAULT 'USD',
   109	    period_start TIMESTAMP WITH TIME ZONE,
   110	    period_end TIMESTAMP WITH TIME ZONE,
   111	    due_date TIMESTAMP WITH TIME ZONE,
   112	    paid_at TIMESTAMP WITH TIME ZONE,
   113	    invoice_pdf TEXT,
   114	    hosted_invoice_url TEXT,
   115	    metadata JSONB DEFAULT '{}',
   116	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   117	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   118	);
   119	
   120	-- Promotional codes and discounts
   121	CREATE TABLE discount_codes (
   122	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   123	    code VARCHAR(50) UNIQUE NOT NULL,
   124	    stripe_coupon_id VARCHAR(255),
   125	    stripe_promotion_code_id VARCHAR(255),
   126	    description TEXT,
   127	    discount_type VARCHAR(20) NOT NULL CHECK (discount_type IN ('percentage', 'fixed_amount')),
   128	    discount_value DECIMAL(10, 2) NOT NULL,
   129	    currency VARCHAR(3), -- For fixed_amount discounts
   130	    duration VARCHAR(20) CHECK (duration IN ('once', 'forever', 'repeating')),
   131	    duration_in_months INTEGER, -- For repeating discounts
   132	    max_redemptions INTEGER,
   133	    times_redeemed INTEGER DEFAULT 0,
   134	    valid_from TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   135	    valid_until TIMESTAMP WITH TIME ZONE,
   136	    metadata JSONB DEFAULT '{}',
   137	    is_active BOOLEAN DEFAULT true,
   138	    created_by UUID REFERENCES users(id),
   139	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   140	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   141	);
   142	
   143	-- Track discount usage
   144	CREATE TABLE discount_usage (
   145	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   146	    discount_code_id UUID NOT NULL REFERENCES discount_codes(id),
   147	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   148	    subscription_id UUID REFERENCES subscriptions(id),
   149	    applied_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   150	    UNIQUE(discount_code_id, user_id)
   151	);
   152	
   153	-- Subscription plans configuration
   154	CREATE TABLE subscription_plans (
   155	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   156	    stripe_product_id VARCHAR(255) NOT NULL,
   157	    stripe_price_id VARCHAR(255) UNIQUE NOT NULL,
   158	    name VARCHAR(100) NOT NULL,
   159	    description TEXT,
   160	    price DECIMAL(10, 2) NOT NULL,
   161	    currency VARCHAR(3) NOT NULL DEFAULT 'USD',
   162	    interval VARCHAR(20) NOT NULL CHECK (interval IN ('day', 'week', 'month', 'year')),
   163	    interval_count INTEGER NOT NULL DEFAULT 1,
   164	    trial_period_days INTEGER DEFAULT 0,
   165	    features JSONB DEFAULT '[]', -- Array of feature strings
   166	    metadata JSONB DEFAULT '{}',
   167	    is_active BOOLEAN DEFAULT true,
   168	    display_order INTEGER DEFAULT 0,
   169	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   170	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   171	);
   172	
   173	-- Indexes for Stripe tables
   174	CREATE INDEX idx_subscriptions_user ON subscriptions(user_id);
   175	CREATE INDEX idx_subscriptions_status ON subscriptions(status) WHERE status = 'active';
   176	CREATE INDEX idx_subscriptions_stripe_id ON subscriptions(stripe_subscription_id);
   177	
   178	CREATE INDEX idx_payments_user ON payments(user_id);
   179	CREATE INDEX idx_payments_subscription ON payments(subscription_id);
   180	CREATE INDEX idx_payments_status ON payments(status);
   181	CREATE INDEX idx_payments_created ON payments(created_at DESC);
   182	
   183	CREATE INDEX idx_stripe_webhook_events_event_id ON stripe_webhook_events(stripe_event_id);
   184	CREATE INDEX idx_stripe_webhook_events_processed ON stripe_webhook_events(processed) WHERE processed = false;
   185	
   186	CREATE INDEX idx_stripe_customers_user ON stripe_customers(user_id);
   187	CREATE INDEX idx_stripe_customers_stripe_id ON stripe_customers(stripe_customer_id);
   188	
   189	CREATE INDEX idx_payment_methods_user ON payment_methods(user_id);
   190	CREATE INDEX idx_payment_methods_default ON payment_methods(user_id, is_default) WHERE is_default = true;
   191	
   192	CREATE INDEX idx_invoices_user ON invoices(user_id);
   193	CREATE INDEX idx_invoices_subscription ON invoices(subscription_id);
   194	CREATE INDEX idx_invoices_status ON invoices(status);
   195	
   196	CREATE INDEX idx_discount_codes_code ON discount_codes(code) WHERE is_active = true;
   197	CREATE INDEX idx_discount_codes_valid ON discount_codes(valid_from, valid_until) WHERE is_active = true;
   198	
   199	-- Triggers for Stripe tables
   200	CREATE TRIGGER update_subscriptions_updated_at BEFORE UPDATE ON subscriptions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   201	CREATE TRIGGER update_payments_updated_at BEFORE UPDATE ON payments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   202	CREATE TRIGGER update_stripe_customers_updated_at BEFORE UPDATE ON stripe_customers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   203	CREATE TRIGGER update_payment_methods_updated_at BEFORE UPDATE ON payment_methods FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   204	CREATE TRIGGER update_invoices_updated_at BEFORE UPDATE ON invoices FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   205	CREATE TRIGGER update_discount_codes_updated_at BEFORE UPDATE ON discount_codes FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   206	CREATE TRIGGER update_subscription_plans_updated_at BEFORE UPDATE ON subscription_plans FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   207	
   208	-- RLS policies for Stripe tables
   209	ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;
   210	ALTER TABLE payments ENABLE ROW LEVEL SECURITY;
   211	ALTER TABLE stripe_webhook_events ENABLE ROW LEVEL SECURITY;
   212	ALTER TABLE stripe_customers ENABLE ROW LEVEL SECURITY;
   213	ALTER TABLE payment_methods ENABLE ROW LEVEL SECURITY;
   214	ALTER TABLE invoices ENABLE ROW LEVEL SECURITY;
   215	ALTER TABLE discount_codes ENABLE ROW LEVEL SECURITY;
   216	ALTER TABLE discount_usage ENABLE ROW LEVEL SECURITY;
   217	ALTER TABLE subscription_plans ENABLE ROW LEVEL SECURITY;
   218	
   219	-- Users can only see their own payment data
   220	CREATE POLICY subscriptions_select ON subscriptions FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   221	CREATE POLICY payments_select ON payments FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   222	CREATE POLICY stripe_customers_select ON stripe_customers FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   223	CREATE POLICY payment_methods_select ON payment_methods FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   224	CREATE POLICY invoices_select ON invoices FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   225	CREATE POLICY discount_usage_select ON discount_usage FOR SELECT USING (user_id = auth.uid() OR is_admin(auth.uid()));
   226	
   227	-- Public can see active subscription plans and discount codes
   228	CREATE POLICY subscription_plans_select ON subscription_plans FOR SELECT USING (is_active = true OR is_admin(auth.uid()));
   229	CREATE POLICY discount_codes_select ON discount_codes FOR SELECT USING (is_active = true OR is_admin(auth.uid()));
   230	
   231	-- Only admins can modify Stripe data (webhooks handle updates)
   232	CREATE POLICY stripe_admin_all ON subscriptions FOR ALL USING (is_admin(auth.uid()));
   233	CREATE POLICY payments_admin_all ON payments FOR ALL USING (is_admin(auth.uid()));
   234	CREATE POLICY stripe_webhook_events_admin_all ON stripe_webhook_events FOR ALL USING (is_admin(auth.uid()));
   235	CREATE POLICY stripe_customers_admin_all ON stripe_customers FOR ALL USING (is_admin(auth.uid()));
   236	CREATE POLICY payment_methods_admin_all ON payment_methods FOR ALL USING (is_admin(auth.uid()));
   237	CREATE POLICY invoices_admin_all ON invoices FOR ALL USING (is_admin(auth.uid()));
   238	CREATE POLICY discount_codes_admin_all ON discount_codes FOR ALL USING (is_admin(auth.uid()));
   239	CREATE POLICY discount_usage_admin_all ON discount_usage FOR ALL USING (is_admin(auth.uid()));
   240	CREATE POLICY subscription_plans_admin_all ON subscription_plans FOR ALL USING (is_admin(auth.uid()));
=== FILE: ./db/SUBMISSIONS.sql ===
     1	-- SceneScout v14 User Submission Workflow
     2	-- This file contains tables for managing user-submitted content
     3	
     4	-- Submission status history
     5	CREATE TABLE submission_status_history (
     6	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     7	    submission_id UUID NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
     8	    previous_status VARCHAR(20),
     9	    new_status VARCHAR(20) NOT NULL,
    10	    changed_by UUID REFERENCES users(id),
    11	    change_reason TEXT,
    12	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    13	);
    14	
    15	-- Submission comments (internal notes)
    16	CREATE TABLE submission_comments (
    17	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    18	    submission_id UUID NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
    19	    user_id UUID NOT NULL REFERENCES users(id),
    20	    comment_text TEXT NOT NULL,
    21	    is_internal BOOLEAN DEFAULT true, -- Internal vs visible to submitter
    22	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    23	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    24	);
    25	
    26	-- Submission attachments
    27	CREATE TABLE submission_attachments (
    28	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    29	    submission_id UUID NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
    30	    file_name VARCHAR(255) NOT NULL,
    31	    file_url TEXT NOT NULL,
    32	    file_size INTEGER, -- Size in bytes
    33	    file_type VARCHAR(50),
    34	    upload_status VARCHAR(20) DEFAULT 'pending' CHECK (upload_status IN ('pending', 'uploaded', 'failed')),
    35	    uploaded_by UUID REFERENCES users(id),
    36	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    37	);
    38	
    39	-- Submission validation rules
    40	CREATE TABLE submission_validation_rules (
    41	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    42	    submission_type VARCHAR(20) NOT NULL CHECK (submission_type IN ('event', 'venue')),
    43	    field_name VARCHAR(100) NOT NULL,
    44	    validation_type VARCHAR(50) NOT NULL, -- required, min_length, max_length, regex, etc.
    45	    validation_value TEXT,
    46	    error_message TEXT,
    47	    is_active BOOLEAN DEFAULT true,
    48	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    49	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    50	);
    51	
    52	-- Duplicate detection
    53	CREATE TABLE submission_duplicates (
    54	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    55	    submission_id UUID NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
    56	    existing_entity_type VARCHAR(20) NOT NULL CHECK (existing_entity_type IN ('event', 'venue')),
    57	    existing_entity_id UUID NOT NULL,
    58	    similarity_score NUMERIC(5, 2), -- 0-100 similarity percentage
    59	    match_fields JSONB DEFAULT '[]', -- Which fields matched
    60	    is_confirmed_duplicate BOOLEAN,
    61	    reviewed_by UUID REFERENCES users(id),
    62	    reviewed_at TIMESTAMP WITH TIME ZONE,
    63	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    64	);
    65	
    66	-- Submission queue for moderation
    67	CREATE TABLE submission_queue (
    68	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    69	    submission_id UUID NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
    70	    queue_type VARCHAR(50) DEFAULT 'standard', -- standard, priority, spam, etc.
    71	    priority INTEGER DEFAULT 0,
    72	    assigned_to UUID REFERENCES users(id),
    73	    assigned_at TIMESTAMP WITH TIME ZONE,
    74	    due_date TIMESTAMP WITH TIME ZONE,
    75	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    76	    UNIQUE(submission_id)
    77	);
    78	
    79	-- Submission templates
    80	CREATE TABLE submission_templates (
    81	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    82	    name VARCHAR(255) NOT NULL,
    83	    submission_type VARCHAR(20) NOT NULL CHECK (submission_type IN ('event', 'venue')),
    84	    template_data JSONB NOT NULL, -- Pre-filled fields
    85	    description TEXT,
    86	    is_active BOOLEAN DEFAULT true,
    87	    use_count INTEGER DEFAULT 0,
    88	    created_by UUID REFERENCES users(id),
    89	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    90	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    91	);
    92	
    93	-- User submission limits
    94	CREATE TABLE user_submission_limits (
    95	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    96	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    97	    submission_type VARCHAR(20) NOT NULL CHECK (submission_type IN ('event', 'venue')),
    98	    daily_limit INTEGER DEFAULT 10,
    99	    monthly_limit INTEGER DEFAULT 100,
   100	    current_daily_count INTEGER DEFAULT 0,
   101	    current_monthly_count INTEGER DEFAULT 0,
   102	    last_reset_date DATE DEFAULT CURRENT_DATE,
   103	    is_trusted BOOLEAN DEFAULT false, -- Trusted users have higher limits
   104	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   105	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   106	    UNIQUE(user_id, submission_type)
   107	);
   108	
   109	-- Submission rewards/points
   110	CREATE TABLE submission_rewards (
   111	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   112	    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
   113	    submission_id UUID NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
   114	    reward_type VARCHAR(50) NOT NULL, -- points, badge, privilege, etc.
   115	    reward_value INTEGER,
   116	    reward_data JSONB DEFAULT '{}',
   117	    reason TEXT,
   118	    awarded_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   119	);
   120	
   121	-- Banned/flagged content patterns
   122	CREATE TABLE content_filters (
   123	    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
   124	    filter_type VARCHAR(50) NOT NULL, -- spam, profanity, blacklist, etc.
   125	    pattern TEXT NOT NULL, -- Regex or keywords
   126	    severity VARCHAR(20) DEFAULT 'medium' CHECK (severity IN ('low', 'medium', 'high', 'critical')),
   127	    action VARCHAR(50) NOT NULL, -- reject, flag, quarantine
   128	    description TEXT,
   129	    is_active BOOLEAN DEFAULT true,
   130	    created_by UUID REFERENCES users(id),
   131	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
   132	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   133	);
   134	
   135	-- Functions for submission processing
   136	CREATE OR REPLACE FUNCTION check_submission_duplicates(
   137	    submission_id_param UUID
   138	)
   139	RETURNS TABLE (
   140	    entity_type VARCHAR,
   141	    entity_id UUID,
   142	    entity_name VARCHAR,
   143	    similarity_score NUMERIC
   144	) AS $$
   145	DECLARE
   146	    submission_record RECORD;
   147	BEGIN
   148	    -- Get submission data
   149	    SELECT * INTO submission_record FROM submissions WHERE id = submission_id_param;
   150	    
   151	    IF submission_record.submission_type = 'event' THEN
   152	        RETURN QUERY
   153	        SELECT 
   154	            'event'::VARCHAR as entity_type,
   155	            e.id as entity_id,
   156	            e.name as entity_name,
   157	            similarity(
   158	                LOWER(submission_record.submission_data->>'name'), 
   159	                LOWER(e.name)
   160	            )::NUMERIC * 100 as similarity_score
   161	        FROM events e
   162	        WHERE e.deleted_at IS NULL
   163	            AND (
   164	                similarity(LOWER(submission_record.submission_data->>'name'), LOWER(e.name)) > 0.3
   165	                OR (
   166	                    submission_record.submission_data->>'event_date' = e.event_date::text
   167	                    AND submission_record.submission_data->>'venue_id' = e.venue_id::text
   168	                )
   169	            )
   170	        ORDER BY similarity_score DESC
   171	        LIMIT 10;
   172	    ELSIF submission_record.submission_type = 'venue' THEN
   173	        RETURN QUERY
   174	        SELECT 
   175	            'venue'::VARCHAR as entity_type,
   176	            v.id as entity_id,
   177	            v.name as entity_name,
   178	            GREATEST(
   179	                similarity(LOWER(submission_record.submission_data->>'name'), LOWER(v.name)),
   180	                similarity(LOWER(submission_record.submission_data->>'address'), LOWER(v.address))
   181	            )::NUMERIC * 100 as similarity_score
   182	        FROM venues v
   183	        WHERE v.deleted_at IS NULL
   184	            AND (
   185	                similarity(LOWER(submission_record.submission_data->>'name'), LOWER(v.name)) > 0.3
   186	                OR similarity(LOWER(submission_record.submission_data->>'address'), LOWER(v.address)) > 0.5
   187	            )
   188	        ORDER BY similarity_score DESC
   189	        LIMIT 10;
   190	    END IF;
   191	END;
   192	$$ LANGUAGE plpgsql;
   193	
   194	-- Process approved submission
   195	CREATE OR REPLACE FUNCTION process_approved_submission(
   196	    submission_id_param UUID,
   197	    reviewer_id_param UUID
   198	)
   199	RETURNS UUID AS $$
   200	DECLARE
   201	    submission_record RECORD;
   202	    created_entity_id UUID;
   203	BEGIN
   204	    -- Get submission
   205	    SELECT * INTO submission_record FROM submissions WHERE id = submission_id_param;
   206	    
   207	    IF submission_record.status != 'approved' THEN
   208	        RAISE EXCEPTION 'Submission must be approved before processing';
   209	    END IF;
   210	    
   211	    -- Create entity based on type
   212	    IF submission_record.submission_type = 'event' THEN
   213	        INSERT INTO events (
   214	            name, slug, description, event_date, start_time, end_time,
   215	            venue_id, city_id, location_name, address,
   216	            categories, tags, images, featured_image_url,
   217	            ticket_url, ticket_price_min, ticket_price_max,
   218	            created_by, source, metadata
   219	        )
   220	        SELECT 
   221	            (submission_data->>'name')::VARCHAR(255),
   222	            (submission_data->>'slug')::VARCHAR(255),
   223	            submission_data->>'description',
   224	            (submission_data->>'event_date')::DATE,
   225	            (submission_data->>'start_time')::TIME,
   226	            (submission_data->>'end_time')::TIME,
   227	            (submission_data->>'venue_id')::UUID,
   228	            (submission_data->>'city_id')::UUID,
   229	            submission_data->>'location_name',
   230	            submission_data->>'address',
   231	            COALESCE(submission_data->'categories', '[]'::JSONB),
   232	            COALESCE(submission_data->'tags', '[]'::JSONB),
   233	            COALESCE(submission_data->'images', '[]'::JSONB),
   234	            submission_data->>'featured_image_url',
   235	            submission_data->>'ticket_url',
   236	            (submission_data->>'ticket_price_min')::DECIMAL(10,2),
   237	            (submission_data->>'ticket_price_max')::DECIMAL(10,2),
   238	            submission_record.user_id,
   239	            'submission',
   240	            jsonb_build_object('submission_id', submission_id_param)
   241	        FROM submissions
   242	        WHERE id = submission_id_param
   243	        RETURNING id INTO created_entity_id;
   244	        
   245	    ELSIF submission_record.submission_type = 'venue' THEN
   246	        INSERT INTO venues (
   247	            name, slug, description, address, city_id,
   248	            latitude, longitude, location,
   249	            capacity, venue_type, amenities, images,
   250	            contact_info, hours, created_at
   251	        )
   252	        SELECT 
   253	            (submission_data->>'name')::VARCHAR(255),
   254	            (submission_data->>'slug')::VARCHAR(255),
   255	            submission_data->>'description',
   256	            submission_data->>'address',
   257	            (submission_data->>'city_id')::UUID,
   258	            (submission_data->>'latitude')::DECIMAL(10,8),
   259	            (submission_data->>'longitude')::DECIMAL(11,8),
   260	            ST_MakePoint(
   261	                (submission_data->>'longitude')::FLOAT,
   262	                (submission_data->>'latitude')::FLOAT
   263	            )::GEOGRAPHY,
   264	            (submission_data->>'capacity')::INTEGER,
   265	            submission_data->>'venue_type',
   266	            COALESCE(submission_data->'amenities', '[]'::JSONB),
   267	            COALESCE(submission_data->'images', '[]'::JSONB),
   268	            COALESCE(submission_data->'contact_info', '{}'::JSONB),
   269	            COALESCE(submission_data->'hours', '{}'::JSONB),
   270	            CURRENT_TIMESTAMP
   271	        FROM submissions
   272	        WHERE id = submission_id_param
   273	        RETURNING id INTO created_entity_id;
   274	    END IF;
   275	    
   276	    -- Update submission with created entity
   277	    UPDATE submissions
   278	    SET approved_entity_id = created_entity_id,
   279	        reviewer_id = reviewer_id_param,
   280	        reviewed_at = CURRENT_TIMESTAMP
   281	    WHERE id = submission_id_param;
   282	    
   283	    -- Award points to submitter
   284	    IF submission_record.user_id IS NOT NULL THEN
   285	        INSERT INTO submission_rewards (user_id, submission_id, reward_type, reward_value, reason)
   286	        VALUES (
   287	            submission_record.user_id,
   288	            submission_id_param,
   289	            'points',
   290	            100, -- Base points for approved submission
   291	            'Submission approved: ' || submission_record.submission_type
   292	        );
   293	    END IF;
   294	    
   295	    RETURN created_entity_id;
   296	END;
   297	$$ LANGUAGE plpgsql;
   298	
   299	-- Indexes
   300	CREATE INDEX idx_submission_status_history_submission ON submission_status_history(submission_id);
   301	CREATE INDEX idx_submission_comments_submission ON submission_comments(submission_id);
   302	CREATE INDEX idx_submission_attachments_submission ON submission_attachments(submission_id);
   303	CREATE INDEX idx_submission_validation_rules_type ON submission_validation_rules(submission_type) WHERE is_active = true;
   304	CREATE INDEX idx_submission_duplicates_submission ON submission_duplicates(submission_id);
   305	CREATE INDEX idx_submission_queue_assigned ON submission_queue(assigned_to) WHERE assigned_to IS NOT NULL;
   306	CREATE INDEX idx_submission_queue_priority ON submission_queue(priority DESC, created_at);
   307	CREATE INDEX idx_user_submission_limits_user ON user_submission_limits(user_id);
   308	CREATE INDEX idx_submission_rewards_user ON submission_rewards(user_id);
   309	CREATE INDEX idx_content_filters_active ON content_filters(filter_type) WHERE is_active = true;
   310	
   311	-- Triggers
   312	CREATE TRIGGER update_submission_comments_updated_at BEFORE UPDATE ON submission_comments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   313	CREATE TRIGGER update_submission_validation_rules_updated_at BEFORE UPDATE ON submission_validation_rules FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   314	CREATE TRIGGER update_submission_templates_updated_at BEFORE UPDATE ON submission_templates FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   315	CREATE TRIGGER update_user_submission_limits_updated_at BEFORE UPDATE ON user_submission_limits FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   316	CREATE TRIGGER update_content_filters_updated_at BEFORE UPDATE ON content_filters FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
   317	
   318	-- Trigger to track status changes
   319	CREATE OR REPLACE FUNCTION track_submission_status_change()
   320	RETURNS TRIGGER AS $$
   321	BEGIN
   322	    IF OLD.status IS DISTINCT FROM NEW.status THEN
   323	        INSERT INTO submission_status_history (
   324	            submission_id,
   325	            previous_status,
   326	            new_status,
   327	            changed_by
   328	        ) VALUES (
   329	            NEW.id,
   330	            OLD.status,
   331	            NEW.status,
   332	            auth.uid()
   333	        );
   334	    END IF;
   335	    RETURN NEW;
   336	END;
   337	$$ LANGUAGE plpgsql;
   338	
   339	CREATE TRIGGER submission_status_change_trigger
   340	    AFTER UPDATE ON submissions
   341	    FOR EACH ROW
   342	    EXECUTE FUNCTION track_submission_status_change();
   343	
   344	-- RLS Policies
   345	ALTER TABLE submission_status_history ENABLE ROW LEVEL SECURITY;
   346	ALTER TABLE submission_comments ENABLE ROW LEVEL SECURITY;
   347	ALTER TABLE submission_attachments ENABLE ROW LEVEL SECURITY;
   348	ALTER TABLE submission_validation_rules ENABLE ROW LEVEL SECURITY;
   349	ALTER TABLE submission_duplicates ENABLE ROW LEVEL SECURITY;
   350	ALTER TABLE submission_queue ENABLE ROW LEVEL SECURITY;
   351	ALTER TABLE submission_templates ENABLE ROW LEVEL SECURITY;
   352	ALTER TABLE user_submission_limits ENABLE ROW LEVEL SECURITY;
   353	ALTER TABLE submission_rewards ENABLE ROW LEVEL SECURITY;
   354	ALTER TABLE content_filters ENABLE ROW LEVEL SECURITY;
   355	
   356	-- Submission history/comments visible to submitter and admins
   357	CREATE POLICY submission_history_select ON submission_status_history FOR SELECT
   358	    USING (
   359	        EXISTS (
   360	            SELECT 1 FROM submissions s 
   361	            WHERE s.id = submission_id 
   362	            AND (s.user_id = auth.uid() OR is_admin(auth.uid()))
   363	        )
   364	    );
   365	
   366	CREATE POLICY submission_comments_select ON submission_comments FOR SELECT
   367	    USING (
   368	        EXISTS (
   369	            SELECT 1 FROM submissions s 
   370	            WHERE s.id = submission_id 
   371	            AND (
   372	                (s.user_id = auth.uid() AND is_internal = false) 
   373	                OR is_admin(auth.uid())
   374	            )
   375	        )
   376	    );
   377	
   378	-- Templates public read
   379	CREATE POLICY submission_templates_select ON submission_templates FOR SELECT
   380	    USING (is_active = true OR created_by = auth.uid() OR is_admin(auth.uid()));
   381	
   382	-- User limits
   383	CREATE POLICY user_submission_limits_select ON user_submission_limits FOR SELECT
   384	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
   385	
   386	-- Rewards visible to user
   387	CREATE POLICY submission_rewards_select ON submission_rewards FOR SELECT
   388	    USING (user_id = auth.uid() OR is_admin(auth.uid()));
   389	
   390	-- Admin only policies
   391	CREATE POLICY submission_validation_admin ON submission_validation_rules FOR ALL USING (is_admin(auth.uid()));
   392	CREATE POLICY submission_duplicates_admin ON submission_duplicates FOR ALL USING (is_admin(auth.uid()));
   393	CREATE POLICY submission_queue_admin ON submission_queue FOR ALL USING (is_admin(auth.uid()));
   394	CREATE POLICY content_filters_admin ON content_filters FOR ALL USING (is_admin(auth.uid()));
=== FILE: ./supabase/config.toml ===
     1	# Supabase Configuration for SceneScout v14
     2	
     3	[api]
     4	enabled = true
     5	port = 54321
     6	schemas = ["public", "graphql_public"]
     7	extra_search_path = ["public", "extensions"]
     8	max_rows = 1000
     9	
    10	[db]
    11	port = 54322
    12	shadow_port = 54320
    13	major_version = 15
    14	
    15	[studio]
    16	enabled = true
    17	port = 54323
    18	
    19	[inbucket]
    20	enabled = true
    21	port = 54324
    22	smtp_port = 54325
    23	pop3_port = 54326
    24	
    25	[storage]
    26	enabled = true
    27	port = 54327
    28	file_size_limit = "50MiB"
    29	
    30	[auth]
    31	enabled = true
    32	port = 54328
    33	site_url = "http://localhost:3000"
    34	additional_redirect_urls = ["https://scenescout.app"]
    35	jwt_expiry = 3600
    36	enable_signup = true
    37	enable_email_confirmations = false
    38	enable_email_autoconfirm = false
    39	enable_phone_confirmations = false
    40	enable_phone_autoconfirm = false
    41	
    42	[auth.email]
    43	enable_signup = true
    44	double_confirm_changes = true
    45	enable_confirmations = false
    46	
    47	[auth.sms]
    48	enable_signup = false
    49	enable_confirmations = false
    50	
    51	# OAuth providers (configure as needed)
    52	# [auth.external.apple]
    53	# enabled = false
    54	# client_id = ""
    55	# secret = ""
    56	
    57	# [auth.external.azure]
    58	# enabled = false
    59	# client_id = ""
    60	# secret = ""
    61	# url = ""
    62	
    63	# [auth.external.bitbucket]
    64	# enabled = false
    65	# client_id = ""
    66	# secret = ""
    67	
    68	# [auth.external.discord]
    69	# enabled = false
    70	# client_id = ""
    71	# secret = ""
    72	
    73	# [auth.external.facebook]
    74	# enabled = false
    75	# client_id = ""
    76	# secret = ""
    77	
    78	[auth.external.github]
    79	enabled = true
    80	client_id = "env(GITHUB_CLIENT_ID)"
    81	secret = "env(GITHUB_CLIENT_SECRET)"
    82	
    83	[auth.external.gitlab]
    84	enabled = false
    85	client_id = ""
    86	secret = ""
    87	url = ""
    88	
    89	[auth.external.google]
    90	enabled = true
    91	client_id = "env(GOOGLE_CLIENT_ID)"
    92	secret = "env(GOOGLE_CLIENT_SECRET)"
    93	skip_nonce_check = false
    94	
    95	# [auth.external.keycloak]
    96	# enabled = false
    97	# client_id = ""
    98	# secret = ""
    99	# url = ""
   100	
   101	# [auth.external.linkedin]
   102	# enabled = false
   103	# client_id = ""
   104	# secret = ""
   105	
   106	# [auth.external.notion]
   107	# enabled = false
   108	# client_id = ""
   109	# secret = ""
   110	
   111	# [auth.external.twitch]
   112	# enabled = false
   113	# client_id = ""
   114	# secret = ""
   115	
   116	# [auth.external.twitter]
   117	# enabled = false
   118	# client_id = ""
   119	# secret = ""
   120	
   121	# [auth.external.slack]
   122	# enabled = false
   123	# client_id = ""
   124	# secret = ""
   125	
   126	# [auth.external.spotify]
   127	# enabled = false
   128	# client_id = ""
   129	# secret = ""
   130	
   131	# [auth.external.workos]
   132	# enabled = false
   133	# client_id = ""
   134	# secret = ""
   135	# url = ""
   136	
   137	# [auth.external.zoom]
   138	# enabled = false
   139	# client_id = ""
   140	# secret = ""
   141	
   142	[edge_runtime]
   143	enabled = true
   144	port = 54329
   145	inspector_port = 54330
   146	
   147	# Edge Functions configuration
   148	[functions.ingest_ticketmaster]
   149	verify_jwt = false
   150	
   151	[functions.ingest_eventbrite]
   152	verify_jwt = false
   153	
   154	[functions.ingest_songkick]
   155	verify_jwt = false
   156	
   157	[functions.ingest_meetup]
   158	verify_jwt = false
   159	
   160	[functions.ingest_places_google]
   161	verify_jwt = false
   162	
   163	[functions.ingest_places_yelp]
   164	verify_jwt = false
   165	
   166	[functions.daily_digest]
   167	verify_jwt = false
   168	
   169	[functions.reminders]
   170	verify_jwt = false
   171	
   172	[functions.enrich_images]
   173	verify_jwt = false
   174	
   175	[functions.hotness_ml]
   176	verify_jwt = false
   177	
   178	[analytics]
   179	enabled = false
   180	port = 54327
   181	vector_port = 54328
   182	# Setup BigQuery project to use analytics
   183	
   184	[realtime]
   185	enabled = true
   186	ip_version = "IPv4"
   187	
   188	# Environment variables (set these in production)
   189	# TICKETMASTER_API_KEY=your_key_here
   190	# EVENTBRITE_TOKEN=your_token_here
   191	# SONGKICK_API_KEY=your_key_here
   192	# MEETUP_ACCESS_TOKEN=your_token_here
   193	# GOOGLE_PLACES_API_KEY=your_key_here
   194	# YELP_API_KEY=your_key_here
   195	# OPENAI_API_KEY=your_key_here
   196	# RESEND_API_KEY=your_key_here
   197	# CLOUDINARY_CLOUD_NAME=your_cloudinary_name
   198	# GITHUB_CLIENT_ID=your_github_client_id
   199	# GITHUB_CLIENT_SECRET=your_github_client_secret
   200	# GOOGLE_CLIENT_ID=your_google_client_id
   201	# GOOGLE_CLIENT_SECRET=your_google_client_secret
=== SUPABASE EDGE FUNCTIONS ===

=== FILE: ./supabase/functions/README.md ===
     1	# SceneScout Edge Functions
     2	
     3	This directory contains Supabase Edge Functions for SceneScout v14. These functions handle data ingestion from various APIs, user notifications, AI-powered features, and ML-based scoring.
     4	
     5	## Functions Overview
     6	
     7	### Data Ingestion Functions
     8	
     9	#### 1. `ingest_ticketmaster`
    10	Ingests events from Ticketmaster Discovery API.
    11	
    12	**Features:**
    13	- Fetches events with venue and artist information
    14	- Supports location, date range, and keyword filtering
    15	- Processes pricing, categories, and images
    16	- Handles rate limiting and error recovery
    17	
    18	**Environment Variables:**
    19	- `TICKETMASTER_API_KEY` - Ticketmaster API key
    20	
    21	**Usage:**
    22	```bash
    23	curl -X POST https://your-project.supabase.co/functions/v1/ingest_ticketmaster \
    24	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
    25	  -H "Content-Type: application/json" \
    26	  -d '{"city": "San Francisco", "stateCode": "CA"}'
    27	```
    28	
    29	#### 2. `ingest_eventbrite`
    30	Ingests events from Eventbrite API.
    31	
    32	**Features:**
    33	- Fetches events with organizer and venue data
    34	- Processes ticket pricing and categories
    35	- Handles pagination and rate limiting
    36	- Supports location-based filtering
    37	
    38	**Environment Variables:**
    39	- `EVENTBRITE_TOKEN` - Eventbrite OAuth token
    40	
    41	**Usage:**
    42	```bash
    43	curl -X POST https://your-project.supabase.co/functions/v1/ingest_eventbrite \
    44	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
    45	  -H "Content-Type: application/json" \
    46	  -d '{"location": "San Francisco, CA"}'
    47	```
    48	
    49	#### 3. `ingest_songkick`
    50	Ingests concerts from Songkick API.
    51	
    52	**Features:**
    53	- Fetches concert data with artist and venue information
    54	- Creates artist profiles and event-artist relationships
    55	- Handles popularity scoring from Songkick metrics
    56	- Processes multi-artist lineups
    57	
    58	**Environment Variables:**
    59	- `SONGKICK_API_KEY` - Songkick API key
    60	
    61	**Usage:**
    62	```bash
    63	curl -X POST https://your-project.supabase.co/functions/v1/ingest_songkick \
    64	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
    65	  -H "Content-Type: application/json" \
    66	  -d '{"location": "sk:26330", "min_date": "2024-01-01"}'
    67	```
    68	
    69	#### 4. `ingest_meetup`
    70	Ingests meetups from Meetup.com API.
    71	
    72	**Features:**
    73	- Fetches meetup events with group information
    74	- Processes RSVP counts and member data
    75	- Handles recurring events
    76	- Geographic filtering with radius support
    77	
    78	**Environment Variables:**
    79	- `MEETUP_ACCESS_TOKEN` - Meetup OAuth access token
    80	
    81	**Usage:**
    82	```bash
    83	curl -X POST https://your-project.supabase.co/functions/v1/ingest_meetup \
    84	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
    85	  -H "Content-Type: application/json" \
    86	  -d '{"lat": 37.7749, "lon": -122.4194, "radius": 25}'
    87	```
    88	
    89	#### 5. `ingest_places_google`
    90	Ingests venues from Google Places API.
    91	
    92	**Features:**
    93	- Fetches venue data with detailed information
    94	- Processes ratings, reviews, and photos
    95	- Handles multiple venue types
    96	- Extracts amenities and accessibility features
    97	
    98	**Environment Variables:**
    99	- `GOOGLE_PLACES_API_KEY` - Google Places API key
   100	
   101	**Usage:**
   102	```bash
   103	curl -X POST https://your-project.supabase.co/functions/v1/ingest_places_google \
   104	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
   105	  -H "Content-Type: application/json" \
   106	  -d '{"location": "37.7749,-122.4194", "radius": 5000, "details": true}'
   107	```
   108	
   109	#### 6. `ingest_places_yelp`
   110	Ingests venues from Yelp Fusion API.
   111	
   112	**Features:**
   113	- Fetches business data with categories and ratings
   114	- Processes reviews, photos, and business attributes
   115	- Handles pricing levels and amenities
   116	- Supports category filtering
   117	
   118	**Environment Variables:**
   119	- `YELP_API_KEY` - Yelp Fusion API key
   120	
   121	**Usage:**
   122	```bash
   123	curl -X POST https://your-project.supabase.co/functions/v1/ingest_places_yelp \
   124	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
   125	  -H "Content-Type: application/json" \
   126	  -d '{"location": "San Francisco, CA", "categories": "restaurants,bars", "details": true}'
   127	```
   128	
   129	### Notification Functions
   130	
   131	#### 7. `daily_digest`
   132	Sends personalized daily digest emails to users.
   133	
   134	**Features:**
   135	- Collects events based on user preferences
   136	- Calculates distance and filters by location
   137	- Generates HTML and text email templates
   138	- Tracks open rates and engagement
   139	
   140	**Environment Variables:**
   141	- `RESEND_API_KEY` - Resend email service API key
   142	
   143	**Usage:**
   144	```bash
   145	curl -X POST https://your-project.supabase.co/functions/v1/daily_digest \
   146	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
   147	  -H "Content-Type: application/json" \
   148	  -d '{"test": true, "user_email": "user@example.com"}'
   149	```
   150	
   151	#### 8. `reminders`
   152	Sends event reminders via push notifications and email.
   153	
   154	**Features:**
   155	- Processes pending reminders based on timing
   156	- Sends push notifications via Expo
   157	- Sends email reminders with event details
   158	- Updates reminder status and tracks delivery
   159	
   160	**Environment Variables:**
   161	- `RESEND_API_KEY` - Resend email service API key
   162	
   163	**Usage:**
   164	```bash
   165	curl -X POST https://your-project.supabase.co/functions/v1/reminders \
   166	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
   167	  -H "Content-Type: application/json" \
   168	  -d '{"test": true, "look_ahead": 5}'
   169	```
   170	
   171	### AI-Powered Functions
   172	
   173	#### 9. `enrich_images`
   174	AI-powered image analysis and enhancement.
   175	
   176	**Features:**
   177	- Analyzes images using OpenAI Vision API
   178	- Extracts tags, mood, colors, and objects
   179	- Generates accessibility-friendly alt text
   180	- Enhances image quality using AI upscaling
   181	- Stores analysis results for search and filtering
   182	
   183	**Environment Variables:**
   184	- `OPENAI_API_KEY` - OpenAI API key
   185	- `CLOUDINARY_CLOUD_NAME` - Cloudinary cloud name (optional)
   186	
   187	**Usage:**
   188	```bash
   189	# Process specific images
   190	curl -X POST https://your-project.supabase.co/functions/v1/enrich_images \
   191	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
   192	  -H "Content-Type: application/json" \
   193	  -d '{
   194	    "image_urls": ["https://example.com/image.jpg"],
   195	    "event_id": "event-123",
   196	    "enhance": true
   197	  }'
   198	
   199	# Batch process unprocessed images
   200	curl -X GET https://your-project.supabase.co/functions/v1/enrich_images?batch_size=10
   201	```
   202	
   203	#### 10. `hotness_ml`
   204	ML-based event popularity scoring system.
   205	
   206	**Features:**
   207	- Extracts 20+ features from event data
   208	- Calculates weighted hotness score (0-100)
   209	- Considers timing, pricing, venue quality, content
   210	- Analyzes competition and market saturation
   211	- Provides explanations for scoring decisions
   212	
   213	**Usage:**
   214	```bash
   215	# Score specific events
   216	curl -X POST https://your-project.supabase.co/functions/v1/hotness_ml \
   217	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
   218	  -H "Content-Type: application/json" \
   219	  -d '{"event_ids": ["event-123", "event-456"]}'
   220	
   221	# Batch process unscored events
   222	curl -X GET https://your-project.supabase.co/functions/v1/hotness_ml?batch_size=50&force_rescore=false
   223	```
   224	
   225	## Deployment
   226	
   227	### Prerequisites
   228	- Supabase CLI installed
   229	- Project linked to Supabase
   230	- Environment variables configured
   231	
   232	### Deploy All Functions
   233	```bash
   234	# Deploy all functions
   235	supabase functions deploy
   236	
   237	# Deploy specific function
   238	supabase functions deploy ingest_ticketmaster
   239	
   240	# Deploy with environment variables
   241	supabase secrets set TICKETMASTER_API_KEY=your_key_here
   242	supabase secrets set OPENAI_API_KEY=your_key_here
   243	# ... set other secrets
   244	```
   245	
   246	### Local Development
   247	```bash
   248	# Start local development server
   249	supabase functions serve
   250	
   251	# Test function locally
   252	curl -X POST http://localhost:54321/functions/v1/ingest_ticketmaster \
   253	  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
   254	  -H "Content-Type: application/json" \
   255	  -d '{"city": "San Francisco"}'
   256	```
   257	
   258	## Environment Variables
   259	
   260	Set these environment variables in your Supabase project:
   261	
   262	### API Keys
   263	```bash
   264	# Data ingestion APIs
   265	TICKETMASTER_API_KEY=your_ticketmaster_key
   266	EVENTBRITE_TOKEN=your_eventbrite_token
   267	SONGKICK_API_KEY=your_songkick_key
   268	MEETUP_ACCESS_TOKEN=your_meetup_token
   269	GOOGLE_PLACES_API_KEY=your_google_places_key
   270	YELP_API_KEY=your_yelp_key
   271	
   272	# AI and ML services
   273	OPENAI_API_KEY=your_openai_key
   274	
   275	# Email and notifications
   276	RESEND_API_KEY=your_resend_key
   277	
   278	# Image processing (optional)
   279	CLOUDINARY_CLOUD_NAME=your_cloudinary_name
   280	```
   281	
   282	### Supabase Configuration
   283	These are automatically available in Edge Functions:
   284	- `SUPABASE_URL` - Your Supabase project URL
   285	- `SUPABASE_ANON_KEY` - Public anonymous key
   286	- `SUPABASE_SERVICE_ROLE_KEY` - Service role key (for server-side operations)
   287	
   288	## Scheduling
   289	
   290	Set up cron jobs or scheduled tasks to run these functions regularly:
   291	
   292	### Recommended Schedule
   293	```bash
   294	# Data ingestion - run every 4-6 hours
   295	0 */6 * * * curl -X POST https://your-project.supabase.co/functions/v1/ingest_ticketmaster
   296	
   297	# Daily digest - run once per day at 8 AM
   298	0 8 * * * curl -X POST https://your-project.supabase.co/functions/v1/daily_digest
   299	
   300	# Reminders - run every 5 minutes
   301	*/5 * * * * curl -X POST https://your-project.supabase.co/functions/v1/reminders
   302	
   303	# Image enrichment - run every hour for unprocessed images
   304	0 * * * * curl -X GET https://your-project.supabase.co/functions/v1/enrich_images
   305	
   306	# Hotness scoring - run every 2 hours
   307	0 */2 * * * curl -X GET https://your-project.supabase.co/functions/v1/hotness_ml
   308	```
   309	
   310	## Error Handling
   311	
   312	All functions include:
   313	- Comprehensive error handling and logging
   314	- Rate limiting for external APIs
   315	- Retry logic for transient failures
   316	- Graceful degradation when services are unavailable
   317	- Detailed error responses with debugging information
   318	
   319	## Monitoring
   320	
   321	Monitor function performance through:
   322	- Supabase dashboard function logs
   323	- Custom logging with structured data
   324	- Error tracking and alerting
   325	- Performance metrics and response times
   326	
   327	## Rate Limiting
   328	
   329	Each function implements appropriate rate limiting:
   330	- **Ticketmaster**: 5000 requests/day
   331	- **Eventbrite**: 1000 requests/hour
   332	- **Songkick**: 60 requests/minute
   333	- **Meetup**: 200 requests/hour
   334	- **Google Places**: 50 requests/second
   335	- **Yelp**: 5000 requests/day
   336	- **OpenAI**: 60 requests/minute
   337	
   338	## Security
   339	
   340	- All functions use Supabase RLS (Row Level Security)
   341	- API keys stored securely as Supabase secrets
   342	- Input validation and sanitization
   343	- CORS headers properly configured
   344	- Rate limiting to prevent abuse
   345	
   346	## Contributing
   347	
   348	When adding new functions:
   349	1. Follow the established TypeScript patterns
   350	2. Include comprehensive JSDoc comments
   351	3. Add proper error handling and logging
   352	4. Update this README with usage instructions
   353	5. Add environment variables to the list
   354	6. Include rate limiting if calling external APIs
   355	7. Add tests for critical functionality
   356	
   357	## Troubleshooting
   358	
   359	### Common Issues
   360	
   361	1. **API Key Errors**: Verify environment variables are set correctly
   362	2. **Rate Limiting**: Implement exponential backoff and respect API limits
   363	3. **Database Errors**: Check Supabase connection and table schemas
   364	4. **Image Processing**: Ensure OpenAI API key has Vision access
   365	5. **Email Delivery**: Verify Resend domain configuration
   366	
   367	### Debug Mode
   368	
   369	Enable debug mode by adding `?debug=true` to function URLs for verbose logging.
   370	
   371	### Logs
   372	
   373	Check function logs in the Supabase dashboard under Functions > Logs for detailed error information and performance metrics.
=== FILE: ./supabase/functions/_shared/types.ts ===
     1	/**
     2	 * Shared TypeScript types for SceneScout Supabase Edge Functions
     3	 * This file contains the database schema types used across all functions
     4	 */
     5	
     6	export interface Database {
     7	  public: {
     8	    Tables: {
     9	      profiles: {
    10	        Row: {
    11	          id: string;
    12	          email: string;
    13	          full_name: string | null;
    14	          avatar_url: string | null;
    15	          location_lat: number | null;
    16	          location_lng: number | null;
    17	          location_name: string | null;
    18	          timezone: string | null;
    19	          push_token: string | null;
    20	          notification_preferences: any | null;
    21	          created_at: string;
    22	          updated_at: string;
    23	        };
    24	        Insert: {
    25	          id: string;
    26	          email: string;
    27	          full_name?: string | null;
    28	          avatar_url?: string | null;
    29	          location_lat?: number | null;
    30	          location_lng?: number | null;
    31	          location_name?: string | null;
    32	          timezone?: string | null;
    33	          push_token?: string | null;
    34	          notification_preferences?: any | null;
    35	          created_at?: string;
    36	          updated_at?: string;
    37	        };
    38	        Update: {
    39	          id?: string;
    40	          email?: string;
    41	          full_name?: string | null;
    42	          avatar_url?: string | null;
    43	          location_lat?: number | null;
    44	          location_lng?: number | null;
    45	          location_name?: string | null;
    46	          timezone?: string | null;
    47	          push_token?: string | null;
    48	          notification_preferences?: any | null;
    49	          created_at?: string;
    50	          updated_at?: string;
    51	        };
    52	      };
    53	      events: {
    54	        Row: {
    55	          id: string;
    56	          title: string;
    57	          description: string | null;
    58	          start_time: string;
    59	          end_time: string | null;
    60	          timezone: string;
    61	          venue_id: string | null;
    62	          organizer_id: string | null;
    63	          category: string;
    64	          subcategory: string | null;
    65	          tags: string[];
    66	          price_min: number | null;
    67	          price_max: number | null;
    68	          price_currency: string;
    69	          ticket_url: string | null;
    70	          image_url: string | null;
    71	          image_alt_text: string | null;
    72	          image_analysis: any | null;
    73	          image_enhanced_url: string | null;
    74	          image_thumbnail_url: string | null;
    75	          image_processed: boolean | null;
    76	          source: string;
    77	          external_id: string;
    78	          status: string;
    79	          age_restriction: string | null;
    80	          capacity: number | null;
    81	          attendee_count: number | null;
    82	          hotness_score: number;
    83	          hotness_confidence: number | null;
    84	          hotness_factors: any | null;
    85	          hotness_explanation: string | null;
    86	          created_at: string;
    87	          updated_at: string;
    88	          last_updated: string;
    89	        };
    90	        Insert: {
    91	          id: string;
    92	          title: string;
    93	          description?: string | null;
    94	          start_time: string;
    95	          end_time?: string | null;
    96	          timezone: string;
    97	          venue_id?: string | null;
    98	          organizer_id?: string | null;
    99	          category: string;
   100	          subcategory?: string | null;
   101	          tags?: string[];
   102	          price_min?: number | null;
   103	          price_max?: number | null;
   104	          price_currency?: string;
   105	          ticket_url?: string | null;
   106	          image_url?: string | null;
   107	          image_alt_text?: string | null;
   108	          image_analysis?: any | null;
   109	          image_enhanced_url?: string | null;
   110	          image_thumbnail_url?: string | null;
   111	          image_processed?: boolean | null;
   112	          source: string;
   113	          external_id: string;
   114	          status?: string;
   115	          age_restriction?: string | null;
   116	          capacity?: number | null;
   117	          attendee_count?: number | null;
   118	          hotness_score?: number;
   119	          hotness_confidence?: number | null;
   120	          hotness_factors?: any | null;
   121	          hotness_explanation?: string | null;
   122	          created_at?: string;
   123	          updated_at?: string;
   124	          last_updated?: string;
   125	        };
   126	        Update: {
   127	          id?: string;
   128	          title?: string;
   129	          description?: string | null;
   130	          start_time?: string;
   131	          end_time?: string | null;
   132	          timezone?: string;
   133	          venue_id?: string | null;
   134	          organizer_id?: string | null;
   135	          category?: string;
   136	          subcategory?: string | null;
   137	          tags?: string[];
   138	          price_min?: number | null;
   139	          price_max?: number | null;
   140	          price_currency?: string;
   141	          ticket_url?: string | null;
   142	          image_url?: string | null;
   143	          image_alt_text?: string | null;
   144	          image_analysis?: any | null;
   145	          image_enhanced_url?: string | null;
   146	          image_thumbnail_url?: string | null;
   147	          image_processed?: boolean | null;
   148	          source?: string;
   149	          external_id?: string;
   150	          status?: string;
   151	          age_restriction?: string | null;
   152	          capacity?: number | null;
   153	          attendee_count?: number | null;
   154	          hotness_score?: number;
   155	          hotness_confidence?: number | null;
   156	          hotness_factors?: any | null;
   157	          hotness_explanation?: string | null;
   158	          created_at?: string;
   159	          updated_at?: string;
   160	          last_updated?: string;
   161	        };
   162	      };
   163	      venues: {
   164	        Row: {
   165	          id: string;
   166	          name: string;
   167	          address: string;
   168	          city: string;
   169	          state: string;
   170	          postal_code: string;
   171	          country: string;
   172	          latitude: number;
   173	          longitude: number;
   174	          phone: string | null;
   175	          website: string | null;
   176	          timezone: string;
   177	          capacity: number | null;
   178	          venue_type: string;
   179	          category: string | null;
   180	          subcategory: string | null;
   181	          rating: number | null;
   182	          review_count: number;
   183	          price_level: number | null;
   184	          amenities: string[];
   185	          accessibility_features: string[];
   186	          parking_info: string | null;
   187	          description: string | null;
   188	          opening_hours: string[];
   189	          photos: any[] | null;
   190	          images_processed: boolean | null;
   191	          source: string;
   192	          external_id: string;
   193	          created_at: string;
   194	          updated_at: string;
   195	          last_updated: string;
   196	        };
   197	        Insert: {
   198	          id: string;
   199	          name: string;
   200	          address: string;
   201	          city: string;
   202	          state: string;
   203	          postal_code: string;
   204	          country: string;
   205	          latitude: number;
   206	          longitude: number;
   207	          phone?: string | null;
   208	          website?: string | null;
   209	          timezone: string;
   210	          capacity?: number | null;
   211	          venue_type: string;
   212	          category?: string | null;
   213	          subcategory?: string | null;
   214	          rating?: number | null;
   215	          review_count?: number;
   216	          price_level?: number | null;
   217	          amenities?: string[];
   218	          accessibility_features?: string[];
   219	          parking_info?: string | null;
   220	          description?: string | null;
   221	          opening_hours?: string[];
   222	          photos?: any[] | null;
   223	          images_processed?: boolean | null;
   224	          source: string;
   225	          external_id: string;
   226	          created_at?: string;
   227	          updated_at?: string;
   228	          last_updated?: string;
   229	        };
   230	        Update: {
   231	          id?: string;
   232	          name?: string;
   233	          address?: string;
   234	          city?: string;
   235	          state?: string;
   236	          postal_code?: string;
   237	          country?: string;
   238	          latitude?: number;
   239	          longitude?: number;
   240	          phone?: string | null;
   241	          website?: string | null;
   242	          timezone?: string;
   243	          capacity?: number | null;
   244	          venue_type?: string;
   245	          category?: string | null;
   246	          subcategory?: string | null;
   247	          rating?: number | null;
   248	          review_count?: number;
   249	          price_level?: number | null;
   250	          amenities?: string[];
   251	          accessibility_features?: string[];
   252	          parking_info?: string | null;
   253	          description?: string | null;
   254	          opening_hours?: string[];
   255	          photos?: any[] | null;
   256	          images_processed?: boolean | null;
   257	          source?: string;
   258	          external_id?: string;
   259	          created_at?: string;
   260	          updated_at?: string;
   261	          last_updated?: string;
   262	        };
   263	      };
   264	      organizers: {
   265	        Row: {
   266	          id: string;
   267	          name: string;
   268	          description: string | null;
   269	          website: string | null;
   270	          social_media: any | null;
   271	          logo_url: string | null;
   272	          category: string | null;
   273	          member_count: number | null;
   274	          location: string | null;
   275	          timezone: string | null;
   276	          source: string;
   277	          external_id: string;
   278	          created_at: string;
   279	          updated_at: string;
   280	          last_updated: string;
   281	        };
   282	        Insert: {
   283	          id: string;
   284	          name: string;
   285	          description?: string | null;
   286	          website?: string | null;
   287	          social_media?: any | null;
   288	          logo_url?: string | null;
   289	          category?: string | null;
   290	          member_count?: number | null;
   291	          location?: string | null;
   292	          timezone?: string | null;
   293	          source: string;
   294	          external_id: string;
   295	          created_at?: string;
   296	          updated_at?: string;
   297	          last_updated?: string;
   298	        };
   299	        Update: {
   300	          id?: string;
   301	          name?: string;
   302	          description?: string | null;
   303	          website?: string | null;
   304	          social_media?: any | null;
   305	          logo_url?: string | null;
   306	          category?: string | null;
   307	          member_count?: number | null;
   308	          location?: string | null;
   309	          timezone?: string | null;
   310	          source?: string;
   311	          external_id?: string;
   312	          created_at?: string;
   313	          updated_at?: string;
   314	          last_updated?: string;
   315	        };
   316	      };
   317	      artists: {
   318	        Row: {
   319	          id: string;
   320	          name: string;
   321	          genre: string[];
   322	          description: string | null;
   323	          image_url: string | null;
   324	          external_links: any | null;
   325	          source: string;
   326	          external_id: string;
   327	          created_at: string;
   328	          updated_at: string;
   329	          last_updated: string;
   330	        };
   331	        Insert: {
   332	          id: string;
   333	          name: string;
   334	          genre?: string[];
   335	          description?: string | null;
   336	          image_url?: string | null;
   337	          external_links?: any | null;
   338	          source: string;
   339	          external_id: string;
   340	          created_at?: string;
   341	          updated_at?: string;
   342	          last_updated?: string;
   343	        };
   344	        Update: {
   345	          id?: string;
   346	          name?: string;
   347	          genre?: string[];
   348	          description?: string | null;
   349	          image_url?: string | null;
   350	          external_links?: any | null;
   351	          source?: string;
   352	          external_id?: string;
   353	          created_at?: string;
   354	          updated_at?: string;
   355	          last_updated?: string;
   356	        };
   357	      };
   358	      event_artists: {
   359	        Row: {
   360	          event_id: string;
   361	          artist_id: string;
   362	          billing_order: number;
   363	          role: string;
   364	          created_at: string;
   365	        };
   366	        Insert: {
   367	          event_id: string;
   368	          artist_id: string;
   369	          billing_order?: number;
   370	          role?: string;
   371	          created_at?: string;
   372	        };
   373	        Update: {
   374	          event_id?: string;
   375	          artist_id?: string;
   376	          billing_order?: number;
   377	          role?: string;
   378	          created_at?: string;
   379	        };
   380	      };
   381	      user_preferences: {
   382	        Row: {
   383	          id: string;
   384	          user_id: string;
   385	          categories: string[];
   386	          max_distance: number;
   387	          price_range: any | null;
   388	          notification_frequency: string;
   389	          preferred_times: string[];
   390	          blacklisted_venues: string[];
   391	          favorite_venues: string[];
   392	          tags: string[];
   393	          created_at: string;
   394	          updated_at: string;
   395	        };
   396	        Insert: {
   397	          id?: string;
   398	          user_id: string;
   399	          categories?: string[];
   400	          max_distance?: number;
   401	          price_range?: any | null;
   402	          notification_frequency?: string;
   403	          preferred_times?: string[];
   404	          blacklisted_venues?: string[];
   405	          favorite_venues?: string[];
   406	          tags?: string[];
   407	          created_at?: string;
   408	          updated_at?: string;
   409	        };
   410	        Update: {
   411	          id?: string;
   412	          user_id?: string;
   413	          categories?: string[];
   414	          max_distance?: number;
   415	          price_range?: any | null;
   416	          notification_frequency?: string;
   417	          preferred_times?: string[];
   418	          blacklisted_venues?: string[];
   419	          favorite_venues?: string[];
   420	          tags?: string[];
   421	          created_at?: string;
   422	          updated_at?: string;
   423	        };
   424	      };
   425	      user_reminders: {
   426	        Row: {
   427	          id: string;
   428	          user_id: string;
   429	          event_id: string;
   430	          reminder_time: string;
   431	          notification_method: string;
   432	          status: string;
   433	          sent_at: string | null;
   434	          created_at: string;
   435	          updated_at: string;
   436	        };
   437	        Insert: {
   438	          id?: string;
   439	          user_id: string;
   440	          event_id: string;
   441	          reminder_time: string;
   442	          notification_method: string;
   443	          status?: string;
   444	          sent_at?: string | null;
   445	          created_at?: string;
   446	          updated_at?: string;
   447	        };
   448	        Update: {
   449	          id?: string;
   450	          user_id?: string;
   451	          event_id?: string;
   452	          reminder_time?: string;
   453	          notification_method?: string;
   454	          status?: string;
   455	          sent_at?: string | null;
   456	          created_at?: string;
   457	          updated_at?: string;
   458	        };
   459	      };
   460	      user_notifications: {
   461	        Row: {
   462	          id: string;
   463	          user_id: string;
   464	          type: string;
   465	          title: string;
   466	          message: string;
   467	          data: any | null;
   468	          read: boolean;
   469	          sent_at: string | null;
   470	          created_at: string;
   471	        };
   472	        Insert: {
   473	          id?: string;
   474	          user_id: string;
   475	          type: string;
   476	          title: string;
   477	          message: string;
   478	          data?: any | null;
   479	          read?: boolean;
   480	          sent_at?: string | null;
   481	          created_at?: string;
   482	        };
   483	        Update: {
   484	          id?: string;
   485	          user_id?: string;
   486	          type?: string;
   487	          title?: string;
   488	          message?: string;
   489	          data?: any | null;
   490	          read?: boolean;
   491	          sent_at?: string | null;
   492	          created_at?: string;
   493	        };
   494	      };
   495	      event_images: {
   496	        Row: {
   497	          id: string;
   498	          event_id: string;
   499	          original_url: string;
   500	          enhanced_url: string | null;
   501	          thumbnail_url: string | null;
   502	          alt_text: string | null;
   503	          analysis_data: any | null;
   504	          enhancement_applied: boolean;
   505	          processed_at: string;
   506	          created_at: string;
   507	        };
   508	        Insert: {
   509	          id?: string;
   510	          event_id: string;
   511	          original_url: string;
   512	          enhanced_url?: string | null;
   513	          thumbnail_url?: string | null;
   514	          alt_text?: string | null;
   515	          analysis_data?: any | null;
   516	          enhancement_applied?: boolean;
   517	          processed_at?: string;
   518	          created_at?: string;
   519	        };
   520	        Update: {
   521	          id?: string;
   522	          event_id?: string;
   523	          original_url?: string;
   524	          enhanced_url?: string | null;
   525	          thumbnail_url?: string | null;
   526	          alt_text?: string | null;
   527	          analysis_data?: any | null;
   528	          enhancement_applied?: boolean;
   529	          processed_at?: string;
   530	          created_at?: string;
   531	        };
   532	      };
   533	      venue_images: {
   534	        Row: {
   535	          id: string;
   536	          venue_id: string;
   537	          original_url: string;
   538	          enhanced_url: string | null;
   539	          thumbnail_url: string | null;
   540	          alt_text: string | null;
   541	          analysis_data: any | null;
   542	          enhancement_applied: boolean;
   543	          processed_at: string;
   544	          created_at: string;
   545	        };
   546	        Insert: {
   547	          id?: string;
   548	          venue_id: string;
   549	          original_url: string;
   550	          enhanced_url?: string | null;
   551	          thumbnail_url?: string | null;
   552	          alt_text?: string | null;
   553	          analysis_data?: any | null;
   554	          enhancement_applied?: boolean;
   555	          processed_at?: string;
   556	          created_at?: string;
   557	        };
   558	        Update: {
   559	          id?: string;
   560	          venue_id?: string;
   561	          original_url?: string;
   562	          enhanced_url?: string | null;
   563	          thumbnail_url?: string | null;
   564	          alt_text?: string | null;
   565	          analysis_data?: any | null;
   566	          enhancement_applied?: boolean;
   567	          processed_at?: string;
   568	          created_at?: string;
   569	        };
   570	      };
   571	    };
   572	    Views: {
   573	      [_ in never]: never;
   574	    };
   575	    Functions: {
   576	      [_ in never]: never;
   577	    };
   578	    Enums: {
   579	      [_ in never]: never;
   580	    };
   581	  };
   582	}
=== FILE: ./supabase/functions/daily_digest//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface UserPreferences {
     6	  id: string;
     7	  user_id: string;
     8	  categories: string[];
     9	  max_distance: number;
    10	  price_range: { min: number; max: number } | null;
    11	  notification_frequency: 'daily' | 'weekly' | 'none';
    12	  preferred_times: string[];
    13	  blacklisted_venues: string[];
    14	  favorite_venues: string[];
    15	  tags: string[];
    16	}
    17	
    18	interface Event {
    19	  id: string;
    20	  title: string;
    21	  description: string;
    22	  start_time: string;
    23	  end_time: string;
    24	  timezone: string;
    25	  venue_id: string;
    26	  category: string;
    27	  subcategory: string;
    28	  tags: string[];
    29	  price_min: number;
    30	  price_max: number;
    31	  price_currency: string;
    32	  ticket_url: string;
    33	  image_url: string;
    34	  source: string;
    35	  hotness_score: number;
    36	  venue?: {
    37	    id: string;
    38	    name: string;
    39	    address: string;
    40	    city: string;
    41	    state: string;
    42	    latitude: number;
    43	    longitude: number;
    44	  };
    45	}
    46	
    47	interface DigestEmail {
    48	  to: string;
    49	  subject: string;
    50	  html: string;
    51	  text: string;
    52	}
    53	
    54	/**
    55	 * Calculate distance between two points using Haversine formula
    56	 */
    57	function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    58	  const R = 3959; // Earth's radius in miles
    59	  const dLat = (lat2 - lat1) * Math.PI / 180;
    60	  const dLon = (lon2 - lon1) * Math.PI / 180;
    61	  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    62	    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    63	    Math.sin(dLon / 2) * Math.sin(dLon / 2);
    64	  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    65	  return R * c;
    66	}
    67	
    68	/**
    69	 * Format event for email display
    70	 */
    71	function formatEventForEmail(event: Event): string {
    72	  const venue = event.venue;
    73	  const startDate = new Date(event.start_time);
    74	  const dateStr = startDate.toLocaleDateString('en-US', { 
    75	    weekday: 'long', 
    76	    year: 'numeric', 
    77	    month: 'long', 
    78	    day: 'numeric' 
    79	  });
    80	  const timeStr = startDate.toLocaleTimeString('en-US', { 
    81	    hour: 'numeric', 
    82	    minute: '2-digit',
    83	    timeZoneName: 'short'
    84	  });
    85	  
    86	  const priceStr = event.price_min && event.price_max
    87	    ? `$${event.price_min}${event.price_min !== event.price_max ? ` - $${event.price_max}` : ''}`
    88	    : event.price_min === 0 ? 'Free' : 'Price varies';
    89	
    90	  return `
    91	    <div style="margin-bottom: 30px; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;">
    92	      ${event.image_url ? `<img src="${event.image_url}" alt="${event.title}" style="width: 100%; max-width: 400px; height: 200px; object-fit: cover; border-radius: 6px; margin-bottom: 15px;">` : ''}
    93	      <h3 style="color: #1a1a1a; margin: 0 0 10px 0; font-size: 20px;">
    94	        <a href="${event.ticket_url}" style="color: #1a1a1a; text-decoration: none;">${event.title}</a>
    95	      </h3>
    96	      <p style="color: #666; margin: 5px 0; font-size: 14px;">
    97	        <strong>📅 ${dateStr} at ${timeStr}</strong>
    98	      </p>
    99	      ${venue ? `<p style="color: #666; margin: 5px 0; font-size: 14px;">
   100	        <strong>📍 ${venue.name}</strong><br>
   101	        ${venue.address}, ${venue.city}, ${venue.state}
   102	      </p>` : ''}
   103	      <p style="color: #666; margin: 5px 0; font-size: 14px;">
   104	        <strong>💰 ${priceStr}</strong>
   105	      </p>
   106	      ${event.description ? `<p style="color: #444; margin: 10px 0; font-size: 14px; line-height: 1.4;">
   107	        ${event.description.length > 200 ? event.description.substring(0, 200) + '...' : event.description}
   108	      </p>` : ''}
   109	      <p style="margin: 15px 0 0 0;">
   110	        <a href="${event.ticket_url}" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; font-size: 14px;">
   111	          Get Tickets
   112	        </a>
   113	      </p>
   114	    </div>
   115	  `;
   116	}
   117	
   118	/**
   119	 * Generate HTML email template
   120	 */
   121	function generateEmailHTML(events: Event[], userEmail: string): string {
   122	  const eventsHTML = events.map(formatEventForEmail).join('');
   123	  
   124	  return `
   125	<!DOCTYPE html>
   126	<html>
   127	<head>
   128	  <meta charset="utf-8">
   129	  <meta name="viewport" content="width=device-width, initial-scale=1.0">
   130	  <title>SceneScout Daily Digest</title>
   131	  <style>
   132	    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
   133	    .header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #007bff; }
   134	    .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; font-size: 12px; color: #666; }
   135	    a { color: #007bff; }
   136	  </style>
   137	</head>
   138	<body>
   139	  <div class="header">
   140	    <h1 style="color: #007bff; margin: 0;">🎭 SceneScout</h1>
   141	    <p style="margin: 10px 0 0 0; color: #666;">Your Daily Event Digest</p>
   142	  </div>
   143	
   144	  <h2 style="color: #1a1a1a; margin-bottom: 20px;">
   145	    🔥 ${events.length} Events Happening Near You
   146	  </h2>
   147	
   148	  ${eventsHTML}
   149	
   150	  <div style="text-align: center; margin: 40px 0;">
   151	    <a href="https://scenescout.app" style="background: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px;">
   152	      Discover More Events
   153	    </a>
   154	  </div>
   155	
   156	  <div class="footer">
   157	    <p>You're receiving this because you signed up for SceneScout daily digests.</p>
   158	    <p>
   159	      <a href="https://scenescout.app/preferences">Update Preferences</a> | 
   160	      <a href="https://scenescout.app/unsubscribe?email=${encodeURIComponent(userEmail)}">Unsubscribe</a>
   161	    </p>
   162	    <p>&copy; 2024 SceneScout. All rights reserved.</p>
   163	  </div>
   164	</body>
   165	</html>
   166	  `;
   167	}
   168	
   169	/**
   170	 * Generate plain text version of email
   171	 */
   172	function generateEmailText(events: Event[]): string {
   173	  let text = `SceneScout Daily Digest\n\n${events.length} Events Happening Near You\n\n`;
   174	  
   175	  events.forEach((event, index) => {
   176	    const venue = event.venue;
   177	    const startDate = new Date(event.start_time);
   178	    const dateStr = startDate.toLocaleDateString('en-US');
   179	    const timeStr = startDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
   180	    
   181	    const priceStr = event.price_min && event.price_max
   182	      ? `$${event.price_min}${event.price_min !== event.price_max ? ` - $${event.price_max}` : ''}`
   183	      : event.price_min === 0 ? 'Free' : 'Price varies';
   184	
   185	    text += `${index + 1}. ${event.title}\n`;
   186	    text += `   Date: ${dateStr} at ${timeStr}\n`;
   187	    if (venue) {
   188	      text += `   Venue: ${venue.name}\n`;
   189	      text += `   Address: ${venue.address}, ${venue.city}, ${venue.state}\n`;
   190	    }
   191	    text += `   Price: ${priceStr}\n`;
   192	    if (event.description) {
   193	      const desc = event.description.length > 150 ? event.description.substring(0, 150) + '...' : event.description;
   194	      text += `   Description: ${desc}\n`;
   195	    }
   196	    text += `   Tickets: ${event.ticket_url}\n\n`;
   197	  });
   198	
   199	  text += `Discover more events at https://scenescout.app\n\n`;
   200	  text += `Update your preferences or unsubscribe at https://scenescout.app/preferences`;
   201	
   202	  return text;
   203	}
   204	
   205	/**
   206	 * Send email using Resend API
   207	 */
   208	async function sendEmail(email: DigestEmail): Promise<boolean> {
   209	  const resendApiKey = Deno.env.get('RESEND_API_KEY');
   210	  if (!resendApiKey) {
   211	    console.error('Resend API key not configured');
   212	    return false;
   213	  }
   214	
   215	  try {
   216	    const response = await fetch('https://api.resend.com/emails', {
   217	      method: 'POST',
   218	      headers: {
   219	        'Authorization': `Bearer ${resendApiKey}`,
   220	        'Content-Type': 'application/json'
   221	      },
   222	      body: JSON.stringify({
   223	        from: 'SceneScout <digest@scenescout.app>',
   224	        to: [email.to],
   225	        subject: email.subject,
   226	        html: email.html,
   227	        text: email.text
   228	      })
   229	    });
   230	
   231	    if (!response.ok) {
   232	      const error = await response.text();
   233	      console.error('Failed to send email:', error);
   234	      return false;
   235	    }
   236	
   237	    return true;
   238	  } catch (error) {
   239	    console.error('Error sending email:', error);
   240	    return false;
   241	  }
   242	}
   243	
   244	/**
   245	 * Supabase Edge Function to send daily digest emails to users
   246	 * Collects personalized event recommendations and sends them via email
   247	 */
   248	serve(async (req) => {
   249	  try {
   250	    // Initialize Supabase client
   251	    const supabase = createClient<Database>(
   252	      Deno.env.get('SUPABASE_URL') ?? '',
   253	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   254	    );
   255	
   256	    // Get query parameters
   257	    const url = new URL(req.url);
   258	    const testMode = url.searchParams.get('test') === 'true';
   259	    const userEmail = url.searchParams.get('user_email');
   260	    const limit = parseInt(url.searchParams.get('limit') || '20');
   261	
   262	    console.log(`Starting daily digest generation ${testMode ? '(test mode)' : ''}`);
   263	
   264	    // Get users who want daily digest emails
   265	    const { data: users, error: userError } = await supabase
   266	      .from('profiles')
   267	      .select(`
   268	        id,
   269	        email,
   270	        notification_preferences,
   271	        location_lat,
   272	        location_lng,
   273	        timezone,
   274	        user_preferences (
   275	          categories,
   276	          max_distance,
   277	          price_range,
   278	          preferred_times,
   279	          blacklisted_venues,
   280	          favorite_venues,
   281	          tags
   282	        )
   283	      `)
   284	      .eq('notification_preferences->>email_digest', true)
   285	      .eq('notification_preferences->>frequency', 'daily')
   286	      .not('email', 'is', null);
   287	
   288	    if (userError) {
   289	      console.error('Error fetching users:', userError);
   290	      return new Response(
   291	        JSON.stringify({ error: 'Failed to fetch users', details: userError }),
   292	        { status: 500, headers: { 'Content-Type': 'application/json' } }
   293	      );
   294	    }
   295	
   296	    // Filter users for test mode
   297	    const targetUsers = testMode && userEmail 
   298	      ? users?.filter(user => user.email === userEmail) || []
   299	      : users || [];
   300	
   301	    console.log(`Found ${targetUsers.length} users for daily digest`);
   302	
   303	    const results = {
   304	      totalUsers: targetUsers.length,
   305	      emailsSent: 0,
   306	      emailsFailed: 0,
   307	      errors: [] as string[]
   308	    };
   309	
   310	    // Process each user
   311	    for (const user of targetUsers) {
   312	      try {
   313	        console.log(`Processing digest for user: ${user.email}`);
   314	
   315	        const userLat = user.location_lat || 37.7749; // SF default
   316	        const userLng = user.location_lng || -122.4194;
   317	        const preferences = user.user_preferences?.[0] || {};
   318	        const maxDistance = preferences.max_distance || 25; // miles
   319	
   320	        // Build query for personalized events
   321	        let eventsQuery = supabase
   322	          .from('events')
   323	          .select(`
   324	            id,
   325	            title,
   326	            description,
   327	            start_time,
   328	            end_time,
   329	            timezone,
   330	            venue_id,
   331	            category,
   332	            subcategory,
   333	            tags,
   334	            price_min,
   335	            price_max,
   336	            price_currency,
   337	            ticket_url,
   338	            image_url,
   339	            source,
   340	            hotness_score,
   341	            venues!inner (
   342	              id,
   343	              name,
   344	              address,
   345	              city,
   346	              state,
   347	              latitude,
   348	              longitude
   349	            )
   350	          `)
   351	          .eq('status', 'active')
   352	          .gte('start_time', new Date().toISOString())
   353	          .lte('start_time', new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()) // Next 7 days
   354	          .order('hotness_score', { ascending: false })
   355	          .limit(50); // Get more to filter by distance
   356	
   357	        // Filter by categories if specified
   358	        if (preferences.categories && preferences.categories.length > 0) {
   359	          eventsQuery = eventsQuery.in('category', preferences.categories);
   360	        }
   361	
   362	        // Filter by price range if specified
   363	        if (preferences.price_range) {
   364	          if (preferences.price_range.min !== null) {
   365	            eventsQuery = eventsQuery.gte('price_min', preferences.price_range.min);
   366	          }
   367	          if (preferences.price_range.max !== null) {
   368	            eventsQuery = eventsQuery.lte('price_max', preferences.price_range.max);
   369	          }
   370	        }
   371	
   372	        const { data: events, error: eventsError } = await eventsQuery;
   373	
   374	        if (eventsError) {
   375	          console.error(`Error fetching events for user ${user.email}:`, eventsError);
   376	          results.errors.push(`Failed to fetch events for ${user.email}: ${eventsError.message}`);
   377	          continue;
   378	        }
   379	
   380	        if (!events || events.length === 0) {
   381	          console.log(`No events found for user ${user.email}`);
   382	          continue;
   383	        }
   384	
   385	        // Filter events by distance and user preferences
   386	        const filteredEvents: Event[] = [];
   387	        
   388	        for (const event of events) {
   389	          try {
   390	            const venue = event.venues;
   391	            if (!venue || !venue.latitude || !venue.longitude) continue;
   392	
   393	            // Calculate distance
   394	            const distance = calculateDistance(userLat, userLng, venue.latitude, venue.longitude);
   395	            if (distance > maxDistance) continue;
   396	
   397	            // Skip blacklisted venues
   398	            if (preferences.blacklisted_venues && preferences.blacklisted_venues.includes(venue.id)) {
   399	              continue;
   400	            }
   401	
   402	            // Boost favorite venues
   403	            let score = event.hotness_score || 0;
   404	            if (preferences.favorite_venues && preferences.favorite_venues.includes(venue.id)) {
   405	              score += 20;
   406	            }
   407	
   408	            // Match tags
   409	            if (preferences.tags && preferences.tags.length > 0) {
   410	              const eventTags = event.tags || [];
   411	              const hasMatchingTags = preferences.tags.some(tag => 
   412	                eventTags.some(eventTag => eventTag.toLowerCase().includes(tag.toLowerCase()))
   413	              );
   414	              if (hasMatchingTags) score += 10;
   415	            }
   416	
   417	            filteredEvents.push({
   418	              ...event,
   419	              hotness_score: score,
   420	              venue: venue
   421	            } as Event);
   422	
   423	          } catch (error) {
   424	            console.error(`Error processing event ${event.id} for user ${user.email}:`, error);
   425	            continue;
   426	          }
   427	        }
   428	
   429	        // Sort by adjusted hotness score and limit
   430	        const topEvents = filteredEvents
   431	          .sort((a, b) => (b.hotness_score || 0) - (a.hotness_score || 0))
   432	          .slice(0, limit);
   433	
   434	        if (topEvents.length === 0) {
   435	          console.log(`No matching events found for user ${user.email} after filtering`);
   436	          continue;
   437	        }
   438	
   439	        // Generate and send email
   440	        const subject = `🎭 ${topEvents.length} Events This Week - SceneScout Daily Digest`;
   441	        const html = generateEmailHTML(topEvents, user.email);
   442	        const text = generateEmailText(topEvents);
   443	
   444	        const emailSent = await sendEmail({
   445	          to: user.email,
   446	          subject,
   447	          html,
   448	          text
   449	        });
   450	
   451	        if (emailSent) {
   452	          results.emailsSent++;
   453	          console.log(`✅ Sent digest to ${user.email} with ${topEvents.length} events`);
   454	
   455	          // Log the digest send in the database
   456	          await supabase
   457	            .from('user_notifications')
   458	            .insert({
   459	              user_id: user.id,
   460	              type: 'email_digest',
   461	              title: 'Daily Digest Sent',
   462	              message: `Sent daily digest with ${topEvents.length} events`,
   463	              read: true,
   464	              sent_at: new Date().toISOString()
   465	            });
   466	
   467	        } else {
   468	          results.emailsFailed++;
   469	          results.errors.push(`Failed to send email to ${user.email}`);
   470	        }
   471	
   472	      } catch (error) {
   473	        console.error(`Error processing user ${user.email}:`, error);
   474	        results.emailsFailed++;
   475	        results.errors.push(`Error processing ${user.email}: ${error.message}`);
   476	      }
   477	    }
   478	
   479	    console.log(`Daily digest completed: ${results.emailsSent} sent, ${results.emailsFailed} failed`);
   480	
   481	    return new Response(
   482	      JSON.stringify({
   483	        success: true,
   484	        ...results
   485	      }),
   486	      { status: 200, headers: { 'Content-Type': 'application/json' } }
   487	    );
   488	
   489	  } catch (error) {
   490	    console.error('Error in daily_digest function:', error);
   491	    return new Response(
   492	      JSON.stringify({ 
   493	        error: 'Internal server error',
   494	        details: error.message 
   495	      }),
   496	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   497	    );
   498	  }
   499	});
=== FILE: ./supabase/functions/enrich_images//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface ImageAnalysisResult {
     6	  description: string;
     7	  tags: string[];
     8	  color_palette: string[];
     9	  objects: string[];
    10	  text_content: string[];
    11	  mood: string;
    12	  style: string;
    13	  quality_score: number;
    14	  is_appropriate: boolean;
    15	  confidence: number;
    16	}
    17	
    18	interface EnhancedImage {
    19	  original_url: string;
    20	  enhanced_url?: string;
    21	  thumbnail_url?: string;
    22	  alt_text: string;
    23	  analysis: ImageAnalysisResult;
    24	  enhancement_applied: boolean;
    25	  processing_time_ms: number;
    26	}
    27	
    28	/**
    29	 * Analyze image using OpenAI Vision API
    30	 */
    31	async function analyzeImage(imageUrl: string): Promise<ImageAnalysisResult> {
    32	  const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    33	  if (!openaiApiKey) {
    34	    throw new Error('OpenAI API key not configured');
    35	  }
    36	
    37	  try {
    38	    const response = await fetch('https://api.openai.com/v1/chat/completions', {
    39	      method: 'POST',
    40	      headers: {
    41	        'Authorization': `Bearer ${openaiApiKey}`,
    42	        'Content-Type': 'application/json'
    43	      },
    44	      body: JSON.stringify({
    45	        model: 'gpt-4-vision-preview',
    46	        messages: [
    47	          {
    48	            role: 'user',
    49	            content: [
    50	              {
    51	                type: 'text',
    52	                text: `Analyze this event/venue image and provide a detailed analysis in JSON format with the following structure:
    53	{
    54	  "description": "A detailed description of what's shown in the image",
    55	  "tags": ["relevant", "tags", "for", "the", "image"],
    56	  "color_palette": ["dominant", "colors", "in", "hex"],
    57	  "objects": ["main", "objects", "visible"],
    58	  "text_content": ["any", "text", "visible", "in", "image"],
    59	  "mood": "overall mood (energetic, calm, festive, etc.)",
    60	  "style": "visual style (modern, vintage, artistic, etc.)",
    61	  "quality_score": 85,
    62	  "is_appropriate": true,
    63	  "confidence": 95
    64	}
    65	
    66	Focus on event-relevant details like atmosphere, crowd, lighting, venue features, activities, and overall vibe. Rate quality_score 0-100, is_appropriate (safe for all audiences), and confidence 0-100.`
    67	              },
    68	              {
    69	                type: 'image_url',
    70	                image_url: {
    71	                  url: imageUrl,
    72	                  detail: 'high'
    73	                }
    74	              }
    75	            ]
    76	          }
    77	        ],
    78	        max_tokens: 1000,
    79	        temperature: 0.3
    80	      })
    81	    });
    82	
    83	    if (!response.ok) {
    84	      const errorText = await response.text();
    85	      console.error('OpenAI API error:', response.status, errorText);
    86	      throw new Error(`OpenAI API error: ${response.status}`);
    87	    }
    88	
    89	    const data = await response.json();
    90	    const content = data.choices?.[0]?.message?.content;
    91	    
    92	    if (!content) {
    93	      throw new Error('No analysis content received from OpenAI');
    94	    }
    95	
    96	    // Extract JSON from the response
    97	    const jsonMatch = content.match(/\{[\s\S]*\}/);
    98	    if (!jsonMatch) {
    99	      throw new Error('Could not extract JSON from OpenAI response');
   100	    }
   101	
   102	    const analysis: ImageAnalysisResult = JSON.parse(jsonMatch[0]);
   103	    
   104	    // Validate required fields and provide defaults
   105	    return {
   106	      description: analysis.description || 'Event or venue image',
   107	      tags: Array.isArray(analysis.tags) ? analysis.tags : [],
   108	      color_palette: Array.isArray(analysis.color_palette) ? analysis.color_palette : [],
   109	      objects: Array.isArray(analysis.objects) ? analysis.objects : [],
   110	      text_content: Array.isArray(analysis.text_content) ? analysis.text_content : [],
   111	      mood: analysis.mood || 'neutral',
   112	      style: analysis.style || 'unknown',
   113	      quality_score: typeof analysis.quality_score === 'number' ? analysis.quality_score : 50,
   114	      is_appropriate: typeof analysis.is_appropriate === 'boolean' ? analysis.is_appropriate : true,
   115	      confidence: typeof analysis.confidence === 'number' ? analysis.confidence : 50
   116	    };
   117	
   118	  } catch (error) {
   119	    console.error('Error analyzing image with OpenAI:', error);
   120	    // Return basic fallback analysis
   121	    return {
   122	      description: 'Event or venue image',
   123	      tags: [],
   124	      color_palette: [],
   125	      objects: [],
   126	      text_content: [],
   127	      mood: 'neutral',
   128	      style: 'unknown',
   129	      quality_score: 50,
   130	      is_appropriate: true,
   131	      confidence: 0
   132	    };
   133	  }
   134	}
   135	
   136	/**
   137	 * Enhance image using AI upscaling service (placeholder for actual service)
   138	 */
   139	async function enhanceImage(imageUrl: string): Promise<{ enhanced_url: string; thumbnail_url: string } | null> {
   140	  // This is a placeholder for image enhancement services like:
   141	  // - Real-ESRGAN for upscaling
   142	  // - Cloudinary for automatic enhancement
   143	  // - Adobe Creative SDK
   144	  // - Custom AI models
   145	  
   146	  try {
   147	    // For now, we'll use Cloudinary transformations as an example
   148	    const cloudinaryCloudName = Deno.env.get('CLOUDINARY_CLOUD_NAME');
   149	    if (!cloudinaryCloudName) {
   150	      console.log('Cloudinary not configured, skipping enhancement');
   151	      return null;
   152	    }
   153	
   154	    // Extract image ID/path from URL for processing
   155	    const imageId = encodeURIComponent(imageUrl);
   156	    
   157	    // Generate enhanced and thumbnail URLs using Cloudinary transformations
   158	    const enhanced_url = `https://res.cloudinary.com/${cloudinaryCloudName}/image/fetch/q_auto:best,f_auto,dpr_2.0,w_1200,h_800,c_fill,g_auto/${imageUrl}`;
   159	    const thumbnail_url = `https://res.cloudinary.com/${cloudinaryCloudName}/image/fetch/q_auto:good,f_auto,w_300,h_200,c_fill,g_auto/${imageUrl}`;
   160	
   161	    return {
   162	      enhanced_url,
   163	      thumbnail_url
   164	    };
   165	
   166	  } catch (error) {
   167	    console.error('Error enhancing image:', error);
   168	    return null;
   169	  }
   170	}
   171	
   172	/**
   173	 * Generate alt text for accessibility
   174	 */
   175	function generateAltText(analysis: ImageAnalysisResult, eventTitle?: string): string {
   176	  let altText = '';
   177	
   178	  if (eventTitle) {
   179	    altText += `Image for ${eventTitle}. `;
   180	  }
   181	
   182	  altText += analysis.description;
   183	
   184	  // Add mood and style context
   185	  if (analysis.mood !== 'neutral') {
   186	    altText += ` The image has a ${analysis.mood} atmosphere`;
   187	  }
   188	
   189	  // Limit length for accessibility
   190	  if (altText.length > 125) {
   191	    altText = altText.substring(0, 122) + '...';
   192	  }
   193	
   194	  return altText;
   195	}
   196	
   197	/**
   198	 * Rate limiting for AI API calls
   199	 */
   200	class AIRateLimit {
   201	  private requests: number[] = [];
   202	  private maxRequestsPerMinute = 60; // Adjust based on your OpenAI plan
   203	  private windowMs = 60 * 1000;
   204	
   205	  async waitIfNeeded(): Promise<void> {
   206	    const now = Date.now();
   207	    this.requests = this.requests.filter(time => now - time < this.windowMs);
   208	    
   209	    if (this.requests.length >= this.maxRequestsPerMinute) {
   210	      const oldestRequest = Math.min(...this.requests);
   211	      const waitTime = this.windowMs - (now - oldestRequest);
   212	      if (waitTime > 0) {
   213	        console.log(`AI rate limit reached, waiting ${waitTime}ms`);
   214	        await new Promise(resolve => setTimeout(resolve, waitTime));
   215	      }
   216	    }
   217	    
   218	    this.requests.push(now);
   219	  }
   220	}
   221	
   222	const rateLimit = new AIRateLimit();
   223	
   224	/**
   225	 * Supabase Edge Function for AI image analysis and enhancement
   226	 * Analyzes event images using AI to extract metadata, enhance quality, and generate alt text
   227	 */
   228	serve(async (req) => {
   229	  try {
   230	    // Initialize Supabase client
   231	    const supabase = createClient<Database>(
   232	      Deno.env.get('SUPABASE_URL') ?? '',
   233	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   234	    );
   235	
   236	    // Get request parameters
   237	    const url = new URL(req.url);
   238	    const method = req.method;
   239	
   240	    if (method === 'POST') {
   241	      // Process specific image(s)
   242	      const { image_urls, event_id, venue_id } = await req.json();
   243	      
   244	      if (!image_urls || !Array.isArray(image_urls)) {
   245	        return new Response(
   246	          JSON.stringify({ error: 'image_urls array is required' }),
   247	          { status: 400, headers: { 'Content-Type': 'application/json' } }
   248	        );
   249	      }
   250	
   251	      const results = [];
   252	
   253	      for (const imageUrl of image_urls) {
   254	        try {
   255	          const startTime = Date.now();
   256	          
   257	          // Apply rate limiting
   258	          await rateLimit.waitIfNeeded();
   259	
   260	          // Analyze image with AI
   261	          console.log(`Analyzing image: ${imageUrl}`);
   262	          const analysis = await analyzeImage(imageUrl);
   263	
   264	          // Enhance image if quality is low or if requested
   265	          let enhanced_url = null;
   266	          let thumbnail_url = null;
   267	          let enhancement_applied = false;
   268	
   269	          if (analysis.quality_score < 70 || url.searchParams.get('enhance') === 'true') {
   270	            const enhancement = await enhanceImage(imageUrl);
   271	            if (enhancement) {
   272	              enhanced_url = enhancement.enhanced_url;
   273	              thumbnail_url = enhancement.thumbnail_url;
   274	              enhancement_applied = true;
   275	            }
   276	          }
   277	
   278	          // Generate alt text
   279	          const eventTitle = event_id ? `Event ${event_id}` : venue_id ? `Venue ${venue_id}` : undefined;
   280	          const alt_text = generateAltText(analysis, eventTitle);
   281	
   282	          const result: EnhancedImage = {
   283	            original_url: imageUrl,
   284	            enhanced_url,
   285	            thumbnail_url,
   286	            alt_text,
   287	            analysis,
   288	            enhancement_applied,
   289	            processing_time_ms: Date.now() - startTime
   290	          };
   291	
   292	          results.push(result);
   293	
   294	          // Store results in database if event_id or venue_id provided
   295	          if (event_id) {
   296	            await supabase
   297	              .from('event_images')
   298	              .upsert({
   299	                event_id,
   300	                original_url: imageUrl,
   301	                enhanced_url,
   302	                thumbnail_url,
   303	                alt_text,
   304	                analysis_data: analysis,
   305	                enhancement_applied,
   306	                processed_at: new Date().toISOString()
   307	              }, { 
   308	                onConflict: 'event_id,original_url' 
   309	              });
   310	          }
   311	
   312	          if (venue_id) {
   313	            await supabase
   314	              .from('venue_images')
   315	              .upsert({
   316	                venue_id,
   317	                original_url: imageUrl,
   318	                enhanced_url,
   319	                thumbnail_url,
   320	                alt_text,
   321	                analysis_data: analysis,
   322	                enhancement_applied,
   323	                processed_at: new Date().toISOString()
   324	              }, { 
   325	                onConflict: 'venue_id,original_url' 
   326	              });
   327	          }
   328	
   329	          console.log(`✅ Processed image ${imageUrl} in ${Date.now() - startTime}ms`);
   330	
   331	        } catch (error) {
   332	          console.error(`Error processing image ${imageUrl}:`, error);
   333	          results.push({
   334	            original_url: imageUrl,
   335	            error: error.message
   336	          });
   337	        }
   338	      }
   339	
   340	      return new Response(
   341	        JSON.stringify({
   342	          success: true,
   343	          processed: results.length,
   344	          results
   345	        }),
   346	        { status: 200, headers: { 'Content-Type': 'application/json' } }
   347	      );
   348	
   349	    } else if (method === 'GET') {
   350	      // Process batch of unprocessed images from database
   351	      const batchSize = parseInt(url.searchParams.get('batch_size') || '10');
   352	      const processEvents = url.searchParams.get('events') !== 'false';
   353	      const processVenues = url.searchParams.get('venues') !== 'false';
   354	
   355	      const results = {
   356	        events_processed: 0,
   357	        venues_processed: 0,
   358	        total_images: 0,
   359	        errors: [] as string[]
   360	      };
   361	
   362	      // Process event images
   363	      if (processEvents) {
   364	        const { data: events, error: eventsError } = await supabase
   365	          .from('events')
   366	          .select('id, title, image_url')
   367	          .not('image_url', 'is', null)
   368	          .is('image_processed', null)
   369	          .limit(batchSize);
   370	
   371	        if (eventsError) {
   372	          console.error('Error fetching events for image processing:', eventsError);
   373	        } else if (events) {
   374	          for (const event of events) {
   375	            try {
   376	              await rateLimit.waitIfNeeded();
   377	
   378	              const analysis = await analyzeImage(event.image_url);
   379	              const enhancement = await enhanceImage(event.image_url);
   380	              const alt_text = generateAltText(analysis, event.title);
   381	
   382	              // Update event with processed image data
   383	              await supabase
   384	                .from('events')
   385	                .update({
   386	                  image_alt_text: alt_text,
   387	                  image_analysis: analysis,
   388	                  image_enhanced_url: enhancement?.enhanced_url || null,
   389	                  image_thumbnail_url: enhancement?.thumbnail_url || null,
   390	                  image_processed: true,
   391	                  updated_at: new Date().toISOString()
   392	                })
   393	                .eq('id', event.id);
   394	
   395	              results.events_processed++;
   396	              results.total_images++;
   397	
   398	              console.log(`Processed image for event: ${event.title}`);
   399	
   400	            } catch (error) {
   401	              console.error(`Error processing event ${event.id} image:`, error);
   402	              results.errors.push(`Event ${event.id}: ${error.message}`);
   403	
   404	              // Mark as processed even if failed to avoid reprocessing
   405	              await supabase
   406	                .from('events')
   407	                .update({
   408	                  image_processed: true,
   409	                  image_alt_text: `Image for ${event.title}`,
   410	                  updated_at: new Date().toISOString()
   411	                })
   412	                .eq('id', event.id);
   413	            }
   414	          }
   415	        }
   416	      }
   417	
   418	      // Process venue images
   419	      if (processVenues) {
   420	        const { data: venues, error: venuesError } = await supabase
   421	          .from('venues')
   422	          .select('id, name, photos')
   423	          .not('photos', 'is', null)
   424	          .is('images_processed', null)
   425	          .limit(batchSize);
   426	
   427	        if (venuesError) {
   428	          console.error('Error fetching venues for image processing:', venuesError);
   429	        } else if (venues) {
   430	          for (const venue of venues) {
   431	            try {
   432	              const photos = venue.photos || [];
   433	              if (photos.length === 0) continue;
   434	
   435	              // Process first photo as main image
   436	              const mainPhoto = photos[0];
   437	              if (mainPhoto && mainPhoto.url) {
   438	                await rateLimit.waitIfNeeded();
   439	
   440	                const analysis = await analyzeImage(mainPhoto.url);
   441	                const enhancement = await enhanceImage(mainPhoto.url);
   442	                const alt_text = generateAltText(analysis, venue.name);
   443	
   444	                // Update venue with processed image data
   445	                const updatedPhotos = photos.map((photo, index) => {
   446	                  if (index === 0) {
   447	                    return {
   448	                      ...photo,
   449	                      alt_text,
   450	                      analysis,
   451	                      enhanced_url: enhancement?.enhanced_url || photo.url,
   452	                      thumbnail_url: enhancement?.thumbnail_url || photo.url
   453	                    };
   454	                  }
   455	                  return photo;
   456	                });
   457	
   458	                await supabase
   459	                  .from('venues')
   460	                  .update({
   461	                    photos: updatedPhotos,
   462	                    images_processed: true,
   463	                    updated_at: new Date().toISOString()
   464	                  })
   465	                  .eq('id', venue.id);
   466	
   467	                results.venues_processed++;
   468	                results.total_images++;
   469	
   470	                console.log(`Processed main image for venue: ${venue.name}`);
   471	              }
   472	
   473	            } catch (error) {
   474	              console.error(`Error processing venue ${venue.id} images:`, error);
   475	              results.errors.push(`Venue ${venue.id}: ${error.message}`);
   476	
   477	              // Mark as processed even if failed
   478	              await supabase
   479	                .from('venues')
   480	                .update({
   481	                  images_processed: true,
   482	                  updated_at: new Date().toISOString()
   483	                })
   484	                .eq('id', venue.id);
   485	            }
   486	          }
   487	        }
   488	      }
   489	
   490	      return new Response(
   491	        JSON.stringify({
   492	          success: true,
   493	          ...results
   494	        }),
   495	        { status: 200, headers: { 'Content-Type': 'application/json' } }
   496	      );
   497	
   498	    } else {
   499	      return new Response(
   500	        JSON.stringify({ error: 'Method not allowed' }),
   501	        { status: 405, headers: { 'Content-Type': 'application/json' } }
   502	      );
   503	    }
   504	
   505	  } catch (error) {
   506	    console.error('Error in enrich_images function:', error);
   507	    return new Response(
   508	      JSON.stringify({ 
   509	        error: 'Internal server error',
   510	        details: error.message 
   511	      }),
   512	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   513	    );
   514	  }
   515	});
=== FILE: ./supabase/functions/hotness_ml//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface EventFeatures {
     6	  id: string;
     7	  title: string;
     8	  description: string;
     9	  category: string;
    10	  subcategory: string;
    11	  tags: string[];
    12	  price_min: number;
    13	  price_max: number;
    14	  start_time: string;
    15	  venue_rating?: number;
    16	  venue_review_count?: number;
    17	  source: string;
    18	  age_restriction?: string;
    19	  capacity?: number;
    20	  attendee_count?: number;
    21	  image_url?: string;
    22	  ticket_url?: string;
    23	  venue?: {
    24	    name: string;
    25	    city: string;
    26	    state: string;
    27	    venue_type: string;
    28	    amenities: string[];
    29	  };
    30	  historical_data?: {
    31	    avg_attendance?: number;
    32	    avg_rating?: number;
    33	    repeat_attendees?: number;
    34	    social_mentions?: number;
    35	  };
    36	}
    37	
    38	interface MLFeatures {
    39	  // Time-based features
    40	  days_until_event: number;
    41	  hour_of_day: number;
    42	  day_of_week: number;
    43	  is_weekend: boolean;
    44	  is_holiday: boolean;
    45	
    46	  // Price features
    47	  is_free: boolean;
    48	  price_range_category: 'free' | 'low' | 'medium' | 'high' | 'premium';
    49	  price_per_hour_estimate: number;
    50	
    51	  // Category features
    52	  category_encoded: number;
    53	  is_music_event: boolean;
    54	  is_food_event: boolean;
    55	  is_nightlife: boolean;
    56	  is_cultural: boolean;
    57	  is_outdoor: boolean;
    58	
    59	  // Venue features
    60	  venue_quality_score: number;
    61	  venue_popularity_score: number;
    62	  venue_capacity_score: number;
    63	
    64	  // Content features
    65	  title_word_count: number;
    66	  description_length: number;
    67	  has_image: boolean;
    68	  tag_count: number;
    69	  title_sentiment_score: number;
    70	  description_sentiment_score: number;
    71	
    72	  // Social proof
    73	  source_credibility: number;
    74	  expected_attendance_score: number;
    75	
    76	  // Seasonality
    77	  season_score: number;
    78	  weather_impact_score: number;
    79	
    80	  // Competition
    81	  competing_events_count: number;
    82	  market_saturation_score: number;
    83	}
    84	
    85	interface HotnessScore {
    86	  event_id: string;
    87	  score: number;
    88	  confidence: number;
    89	  factors: {
    90	    time_factor: number;
    91	    price_factor: number;
    92	    venue_factor: number;
    93	    content_factor: number;
    94	    social_factor: number;
    95	    market_factor: number;
    96	  };
    97	  explanation: string;
    98	}
    99	
   100	/**
   101	 * Holiday checker - simplified list of major US holidays
   102	 */
   103	function isHoliday(date: Date): boolean {
   104	  const month = date.getMonth() + 1;
   105	  const day = date.getDate();
   106	  const year = date.getFullYear();
   107	
   108	  // Major holidays that affect event attendance
   109	  const holidays = [
   110	    { month: 1, day: 1 }, // New Year's Day
   111	    { month: 2, day: 14 }, // Valentine's Day
   112	    { month: 3, day: 17 }, // St. Patrick's Day
   113	    { month: 7, day: 4 }, // Independence Day
   114	    { month: 10, day: 31 }, // Halloween
   115	    { month: 12, day: 24 }, // Christmas Eve
   116	    { month: 12, day: 25 }, // Christmas
   117	    { month: 12, day: 31 }, // New Year's Eve
   118	  ];
   119	
   120	  return holidays.some(holiday => holiday.month === month && holiday.day === day);
   121	}
   122	
   123	/**
   124	 * Get season score based on date
   125	 */
   126	function getSeasonScore(date: Date): number {
   127	  const month = date.getMonth() + 1;
   128	  
   129	  // Spring and Fall generally have higher event attendance
   130	  if (month >= 3 && month <= 5) return 0.8; // Spring
   131	  if (month >= 6 && month <= 8) return 0.9; // Summer
   132	  if (month >= 9 && month <= 11) return 0.8; // Fall
   133	  return 0.6; // Winter
   134	}
   135	
   136	/**
   137	 * Simple sentiment analysis using keyword scoring
   138	 */
   139	function analyzeSentiment(text: string): number {
   140	  if (!text) return 0.5;
   141	
   142	  const positive = [
   143	    'amazing', 'awesome', 'fantastic', 'incredible', 'spectacular', 'outstanding',
   144	    'excellent', 'great', 'wonderful', 'perfect', 'best', 'top', 'premier',
   145	    'exclusive', 'special', 'unique', 'exciting', 'thrilling', 'fun', 'epic',
   146	    'legendary', 'unforgettable', 'must-see', 'incredible', 'stunning'
   147	  ];
   148	
   149	  const negative = [
   150	    'boring', 'awful', 'terrible', 'horrible', 'worst', 'bad', 'disappointing',
   151	    'mediocre', 'poor', 'cheap', 'low-quality', 'cancelled', 'postponed'
   152	  ];
   153	
   154	  const words = text.toLowerCase().split(/\W+/);
   155	  let score = 0.5; // neutral baseline
   156	
   157	  words.forEach(word => {
   158	    if (positive.includes(word)) score += 0.1;
   159	    if (negative.includes(word)) score -= 0.1;
   160	  });
   161	
   162	  return Math.max(0, Math.min(1, score));
   163	}
   164	
   165	/**
   166	 * Extract ML features from event data
   167	 */
   168	function extractFeatures(event: EventFeatures): MLFeatures {
   169	  const now = new Date();
   170	  const eventDate = new Date(event.start_time);
   171	  const venue = event.venue;
   172	
   173	  // Time features
   174	  const days_until_event = Math.max(0, (eventDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
   175	  const hour_of_day = eventDate.getHours();
   176	  const day_of_week = eventDate.getDay();
   177	  const is_weekend = day_of_week === 0 || day_of_week === 6;
   178	  const is_holiday = isHoliday(eventDate);
   179	
   180	  // Price features
   181	  const is_free = (event.price_min === 0 && event.price_max === 0) || event.price_min === null;
   182	  let price_range_category: 'free' | 'low' | 'medium' | 'high' | 'premium' = 'free';
   183	  
   184	  if (!is_free && event.price_min !== null) {
   185	    if (event.price_min < 20) price_range_category = 'low';
   186	    else if (event.price_min < 50) price_range_category = 'medium';
   187	    else if (event.price_min < 100) price_range_category = 'high';
   188	    else price_range_category = 'premium';
   189	  }
   190	
   191	  const price_per_hour_estimate = is_free ? 0 : (event.price_min || 0) / 3; // Assume 3-hour events
   192	
   193	  // Category features
   194	  const categories = {
   195	    'Music': 1, 'Entertainment': 2, 'Food & Drink': 3, 'Arts & Culture': 4,
   196	    'Sports': 5, 'Community': 6, 'Business': 7, 'Education': 8, 'Other': 9
   197	  };
   198	  const category_encoded = categories[event.category as keyof typeof categories] || 9;
   199	  
   200	  const is_music_event = event.category === 'Music' || event.tags.some(tag => 
   201	    ['music', 'concert', 'band', 'DJ', 'live'].some(keyword => tag.toLowerCase().includes(keyword))
   202	  );
   203	  const is_food_event = event.category === 'Food & Drink' || event.tags.some(tag =>
   204	    ['food', 'drink', 'restaurant', 'bar', 'dining'].some(keyword => tag.toLowerCase().includes(keyword))
   205	  );
   206	  const is_nightlife = event.tags.some(tag =>
   207	    ['nightlife', 'club', 'bar', 'party', 'dance'].some(keyword => tag.toLowerCase().includes(keyword))
   208	  ) || hour_of_day >= 20;
   209	  const is_cultural = event.category === 'Arts & Culture' || event.tags.some(tag =>
   210	    ['art', 'culture', 'museum', 'gallery', 'theater'].some(keyword => tag.toLowerCase().includes(keyword))
   211	  );
   212	  const is_outdoor = event.tags.some(tag =>
   213	    ['outdoor', 'park', 'festival', 'garden', 'beach'].some(keyword => tag.toLowerCase().includes(keyword))
   214	  );
   215	
   216	  // Venue features
   217	  const venue_quality_score = venue ? Math.min(1, (venue_rating || 3.5) / 5) : 0.5;
   218	  const venue_popularity_score = venue ? Math.min(1, Math.log(venue_review_count || 10) / 10) : 0.5;
   219	  const venue_capacity_score = event.capacity ? Math.min(1, Math.log(event.capacity) / 15) : 0.5;
   220	
   221	  // Content features
   222	  const title_word_count = event.title.split(' ').length;
   223	  const description_length = event.description?.length || 0;
   224	  const has_image = !!event.image_url;
   225	  const tag_count = event.tags.length;
   226	  const title_sentiment_score = analyzeSentiment(event.title);
   227	  const description_sentiment_score = analyzeSentiment(event.description || '');
   228	
   229	  // Source credibility
   230	  const source_credibility_map = {
   231	    'ticketmaster': 0.9,
   232	    'eventbrite': 0.8,
   233	    'songkick': 0.85,
   234	    'meetup': 0.7,
   235	    'google_places': 0.6,
   236	    'yelp': 0.75
   237	  };
   238	  const source_credibility = source_credibility_map[event.source as keyof typeof source_credibility_map] || 0.5;
   239	
   240	  // Expected attendance (simplified)
   241	  const expected_attendance_score = event.attendee_count 
   242	    ? Math.min(1, event.attendee_count / 100) 
   243	    : (event.capacity ? Math.min(1, event.capacity / 500) : 0.3);
   244	
   245	  // Seasonality
   246	  const season_score = getSeasonScore(eventDate);
   247	  const weather_impact_score = is_outdoor ? season_score : 0.8; // Outdoor events more weather dependent
   248	
   249	  return {
   250	    days_until_event,
   251	    hour_of_day,
   252	    day_of_week,
   253	    is_weekend,
   254	    is_holiday,
   255	    is_free,
   256	    price_range_category,
   257	    price_per_hour_estimate,
   258	    category_encoded,
   259	    is_music_event,
   260	    is_food_event,
   261	    is_nightlife,
   262	    is_cultural,
   263	    is_outdoor,
   264	    venue_quality_score,
   265	    venue_popularity_score,
   266	    venue_capacity_score,
   267	    title_word_count,
   268	    description_length,
   269	    has_image,
   270	    tag_count,
   271	    title_sentiment_score,
   272	    description_sentiment_score,
   273	    source_credibility,
   274	    expected_attendance_score,
   275	    season_score,
   276	    weather_impact_score,
   277	    competing_events_count: 0, // Will be calculated separately
   278	    market_saturation_score: 0.5 // Will be calculated separately
   279	  };
   280	}
   281	
   282	/**
   283	 * Calculate hotness score using weighted factors
   284	 */
   285	function calculateHotnessScore(features: MLFeatures, competing_events: number = 0): HotnessScore {
   286	  // Time factor (how soon is the event, optimal timing)
   287	  let time_factor = 1.0;
   288	  
   289	  if (features.days_until_event > 30) {
   290	    time_factor = 0.3; // Too far in future
   291	  } else if (features.days_until_event > 14) {
   292	    time_factor = 0.6;
   293	  } else if (features.days_until_event > 7) {
   294	    time_factor = 0.8;
   295	  } else if (features.days_until_event > 1) {
   296	    time_factor = 1.0; // Optimal range
   297	  } else {
   298	    time_factor = 0.7; // Last minute might be less popular
   299	  }
   300	
   301	  // Weekend and holiday bonuses
   302	  if (features.is_weekend) time_factor *= 1.2;
   303	  if (features.is_holiday) time_factor *= 1.3;
   304	  
   305	  // Optimal event times
   306	  if (features.is_nightlife && features.hour_of_day >= 20) time_factor *= 1.1;
   307	  if (features.is_food_event && (features.hour_of_day >= 11 && features.hour_of_day <= 14 || features.hour_of_day >= 17)) time_factor *= 1.1;
   308	
   309	  // Price factor
   310	  let price_factor = 1.0;
   311	  if (features.is_free) {
   312	    price_factor = 1.2; // Free events are attractive
   313	  } else {
   314	    switch (features.price_range_category) {
   315	      case 'low': price_factor = 1.1; break;
   316	      case 'medium': price_factor = 1.0; break;
   317	      case 'high': price_factor = 0.8; break;
   318	      case 'premium': price_factor = 0.6; break;
   319	    }
   320	  }
   321	
   322	  // Venue factor
   323	  const venue_factor = (features.venue_quality_score * 0.4 + 
   324	                       features.venue_popularity_score * 0.4 + 
   325	                       features.venue_capacity_score * 0.2);
   326	
   327	  // Content factor (how well is the event presented)
   328	  let content_factor = features.title_sentiment_score * 0.3 +
   329	                      features.description_sentiment_score * 0.2 +
   330	                      (features.has_image ? 0.2 : 0) +
   331	                      Math.min(0.2, features.tag_count * 0.05) +
   332	                      Math.min(0.1, features.title_word_count * 0.02);
   333	
   334	  // Social factor (credibility and expected attendance)
   335	  const social_factor = features.source_credibility * 0.6 + 
   336	                       features.expected_attendance_score * 0.4;
   337	
   338	  // Market factor (seasonality, competition, weather)
   339	  const market_factor = features.season_score * 0.4 +
   340	                        features.weather_impact_score * 0.3 +
   341	                        Math.max(0.1, 1 - (competing_events * 0.05)) * 0.3;
   342	
   343	  // Category bonuses
   344	  let category_bonus = 1.0;
   345	  if (features.is_music_event) category_bonus = 1.15; // Music events tend to be popular
   346	  if (features.is_food_event) category_bonus = 1.1;
   347	  if (features.is_cultural) category_bonus = 1.05;
   348	
   349	  // Calculate weighted score (0-100)
   350	  const raw_score = (
   351	    time_factor * 0.25 +
   352	    price_factor * 0.20 +
   353	    venue_factor * 0.20 +
   354	    content_factor * 0.15 +
   355	    social_factor * 0.15 +
   356	    market_factor * 0.05
   357	  ) * category_bonus;
   358	
   359	  const score = Math.round(Math.max(0, Math.min(100, raw_score * 100)));
   360	
   361	  // Calculate confidence based on data completeness
   362	  let confidence = 0.5;
   363	  if (features.has_image) confidence += 0.1;
   364	  if (features.description_length > 100) confidence += 0.1;
   365	  if (features.tag_count > 2) confidence += 0.1;
   366	  if (features.venue_quality_score > 0.5) confidence += 0.1;
   367	  if (features.source_credibility > 0.7) confidence += 0.1;
   368	  
   369	  confidence = Math.min(1, confidence);
   370	
   371	  // Generate explanation
   372	  const factors = { time_factor, price_factor, venue_factor, content_factor, social_factor, market_factor };
   373	  const topFactor = Object.keys(factors).reduce((a, b) => factors[a as keyof typeof factors] > factors[b as keyof typeof factors] ? a : b);
   374	  
   375	  let explanation = `Score: ${score}/100. `;
   376	  explanation += `Primary driver: ${topFactor.replace('_', ' ')} (${Math.round(factors[topFactor as keyof typeof factors] * 100)}/100). `;
   377	  
   378	  if (features.is_free) explanation += 'Free admission boosts popularity. ';
   379	  if (features.is_weekend) explanation += 'Weekend timing increases appeal. ';
   380	  if (features.days_until_event <= 7) explanation += 'Happening soon increases urgency. ';
   381	  if (competing_events > 5) explanation += 'High competition may reduce attendance. ';
   382	
   383	  return {
   384	    event_id: '',
   385	    score,
   386	    confidence: Math.round(confidence * 100),
   387	    factors: {
   388	      time_factor: Math.round(time_factor * 100),
   389	      price_factor: Math.round(price_factor * 100),
   390	      venue_factor: Math.round(venue_factor * 100),
   391	      content_factor: Math.round(content_factor * 100),
   392	      social_factor: Math.round(social_factor * 100),
   393	      market_factor: Math.round(market_factor * 100)
   394	    },
   395	    explanation
   396	  };
   397	}
   398	
   399	/**
   400	 * Supabase Edge Function for ML-based event popularity scoring
   401	 * Uses machine learning features to predict how "hot" or popular an event will be
   402	 */
   403	serve(async (req) => {
   404	  try {
   405	    // Initialize Supabase client
   406	    const supabase = createClient<Database>(
   407	      Deno.env.get('SUPABASE_URL') ?? '',
   408	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   409	    );
   410	
   411	    const method = req.method;
   412	    const url = new URL(req.url);
   413	
   414	    if (method === 'POST') {
   415	      // Score specific events
   416	      const { event_ids } = await req.json();
   417	
   418	      if (!event_ids || !Array.isArray(event_ids)) {
   419	        return new Response(
   420	          JSON.stringify({ error: 'event_ids array is required' }),
   421	          { status: 400, headers: { 'Content-Type': 'application/json' } }
   422	        );
   423	      }
   424	
   425	      const results = [];
   426	
   427	      for (const eventId of event_ids) {
   428	        try {
   429	          // Fetch event with venue data
   430	          const { data: event, error } = await supabase
   431	            .from('events')
   432	            .select(`
   433	              id, title, description, category, subcategory, tags,
   434	              price_min, price_max, start_time, source, age_restriction,
   435	              capacity, attendee_count, image_url, ticket_url,
   436	              venues (
   437	                name, city, state, venue_type, amenities,
   438	                rating, review_count
   439	              )
   440	            `)
   441	            .eq('id', eventId)
   442	            .single();
   443	
   444	          if (error || !event) {
   445	            console.error(`Event ${eventId} not found:`, error);
   446	            continue;
   447	          }
   448	
   449	          // Get competing events in same area and timeframe
   450	          const eventDate = new Date(event.start_time);
   451	          const startRange = new Date(eventDate.getTime() - 3 * 60 * 60 * 1000); // 3 hours before
   452	          const endRange = new Date(eventDate.getTime() + 3 * 60 * 60 * 1000); // 3 hours after
   453	
   454	          const { data: competingEvents } = await supabase
   455	            .from('events')
   456	            .select('id')
   457	            .neq('id', eventId)
   458	            .gte('start_time', startRange.toISOString())
   459	            .lte('start_time', endRange.toISOString());
   460	
   461	          const competing_events_count = competingEvents?.length || 0;
   462	
   463	          // Extract features
   464	          const features = extractFeatures({
   465	            ...event,
   466	            venue: event.venues,
   467	            venue_rating: event.venues?.rating,
   468	            venue_review_count: event.venues?.review_count
   469	          });
   470	
   471	          features.competing_events_count = competing_events_count;
   472	
   473	          // Calculate hotness score
   474	          const hotnessResult = calculateHotnessScore(features, competing_events_count);
   475	          hotnessResult.event_id = eventId;
   476	
   477	          results.push(hotnessResult);
   478	
   479	          // Update event with new hotness score
   480	          await supabase
   481	            .from('events')
   482	            .update({
   483	              hotness_score: hotnessResult.score,
   484	              hotness_confidence: hotnessResult.confidence,
   485	              hotness_factors: hotnessResult.factors,
   486	              hotness_explanation: hotnessResult.explanation,
   487	              last_updated: new Date().toISOString()
   488	            })
   489	            .eq('id', eventId);
   490	
   491	          console.log(`✅ Scored event ${eventId}: ${hotnessResult.score}/100`);
   492	
   493	        } catch (error) {
   494	          console.error(`Error scoring event ${eventId}:`, error);
   495	          results.push({
   496	            event_id: eventId,
   497	            error: error.message
   498	          });
   499	        }
   500	      }
   501	
   502	      return new Response(
   503	        JSON.stringify({
   504	          success: true,
   505	          processed: results.length,
   506	          results
   507	        }),
   508	        { status: 200, headers: { 'Content-Type': 'application/json' } }
   509	      );
   510	
   511	    } else if (method === 'GET') {
   512	      // Batch process events that need scoring
   513	      const batchSize = parseInt(url.searchParams.get('batch_size') || '50');
   514	      const forceRescore = url.searchParams.get('force_rescore') === 'true';
   515	
   516	      // Get events that need scoring
   517	      let query = supabase
   518	        .from('events')
   519	        .select(`
   520	          id, title, description, category, subcategory, tags,
   521	          price_min, price_max, start_time, source, age_restriction,
   522	          capacity, attendee_count, image_url, ticket_url,
   523	          venues (
   524	            name, city, state, venue_type, amenities,
   525	            rating, review_count
   526	          )
   527	        `)
   528	        .eq('status', 'active')
   529	        .gte('start_time', new Date().toISOString()) // Only future events
   530	        .limit(batchSize);
   531	
   532	      if (!forceRescore) {
   533	        query = query.is('hotness_score', null);
   534	      }
   535	
   536	      const { data: events, error: eventsError } = await query;
   537	
   538	      if (eventsError) {
   539	        return new Response(
   540	          JSON.stringify({ error: 'Failed to fetch events', details: eventsError }),
   541	          { status: 500, headers: { 'Content-Type': 'application/json' } }
   542	        );
   543	      }
   544	
   545	      const results = {
   546	        total_processed: 0,
   547	        scores: [] as HotnessScore[],
   548	        errors: [] as string[]
   549	      };
   550	
   551	      for (const event of events || []) {
   552	        try {
   553	          // Get competing events
   554	          const eventDate = new Date(event.start_time);
   555	          const startRange = new Date(eventDate.getTime() - 3 * 60 * 60 * 1000);
   556	          const endRange = new Date(eventDate.getTime() + 3 * 60 * 60 * 1000);
   557	
   558	          const { data: competingEvents } = await supabase
   559	            .from('events')
   560	            .select('id')
   561	            .neq('id', event.id)
   562	            .gte('start_time', startRange.toISOString())
   563	            .lte('start_time', endRange.toISOString());
   564	
   565	          const competing_events_count = competingEvents?.length || 0;
   566	
   567	          // Extract features and calculate score
   568	          const features = extractFeatures({
   569	            ...event,
   570	            venue: event.venues,
   571	            venue_rating: event.venues?.rating,
   572	            venue_review_count: event.venues?.review_count
   573	          });
   574	
   575	          features.competing_events_count = competing_events_count;
   576	
   577	          const hotnessResult = calculateHotnessScore(features, competing_events_count);
   578	          hotnessResult.event_id = event.id;
   579	
   580	          results.scores.push(hotnessResult);
   581	
   582	          // Update database
   583	          await supabase
   584	            .from('events')
   585	            .update({
   586	              hotness_score: hotnessResult.score,
   587	              hotness_confidence: hotnessResult.confidence,
   588	              hotness_factors: hotnessResult.factors,
   589	              hotness_explanation: hotnessResult.explanation,
   590	              last_updated: new Date().toISOString()
   591	            })
   592	            .eq('id', event.id);
   593	
   594	          results.total_processed++;
   595	
   596	        } catch (error) {
   597	          console.error(`Error processing event ${event.id}:`, error);
   598	          results.errors.push(`Event ${event.id}: ${error.message}`);
   599	        }
   600	      }
   601	
   602	      console.log(`Processed ${results.total_processed} events for hotness scoring`);
   603	
   604	      return new Response(
   605	        JSON.stringify({
   606	          success: true,
   607	          ...results
   608	        }),
   609	        { status: 200, headers: { 'Content-Type': 'application/json' } }
   610	      );
   611	
   612	    } else {
   613	      return new Response(
   614	        JSON.stringify({ error: 'Method not allowed' }),
   615	        { status: 405, headers: { 'Content-Type': 'application/json' } }
   616	      );
   617	    }
   618	
   619	  } catch (error) {
   620	    console.error('Error in hotness_ml function:', error);
   621	    return new Response(
   622	      JSON.stringify({ 
   623	        error: 'Internal server error',
   624	        details: error.message 
   625	      }),
   626	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   627	    );
   628	  }
   629	});
=== FILE: ./supabase/functions/ics//index.ts ===
     1	import { serve } from "https://deno.land/std@0.224.0/http/server.ts"
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2"
     3	serve(async (req) => {
     4	  const sp = new URL(req.url).searchParams
     5	  const id = sp.get('id')
     6	  if (!id) return new Response('missing id', { status: 400 })
     7	  const supabase = createClient(Deno.env.get("SUPABASE_URL")!, Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!)
     8	  const { data: e } = await supabase.from('events').select('id,title,starts_at,ends_at,venue_name').eq('id', id).single()
     9	  if (!e) return new Response('not found', { status: 404 })
    10	  const dt = new Date(e.starts_at).toISOString().replace(/[-:]/g,'').split('.')[0] + 'Z'
    11	  const end = (e.ends_at ? new Date(e.ends_at) : new Date(new Date(e.starts_at).getTime()+2*3600e3)).toISOString().replace(/[-:]/g,'').split('.')[0] + 'Z'
    12	  const ics = [
    13	    'BEGIN:VCALENDAR','VERSION:2.0','PRODID:-//SceneScout//EN','BEGIN:VEVENT',
    14	    `UID:${e.id}@scenescout`,
    15	    `DTSTART:${dt}`,
    16	    `DTEND:${end}`,
    17	    `SUMMARY:${e.title}`,
    18	    e.venue_name ? `LOCATION:${e.venue_name}` : '',
    19	    'END:VEVENT','END:VCALENDAR'
    20	  ].filter(Boolean).join('\r\n')
    21	  return new Response(ics, { headers: { 'content-type': 'text/calendar; charset=utf-8' } })
    22	})

=== FILE: ./supabase/functions/img-proxy//index.ts ===
     1	// deno-lint-ignore-file no-explicit-any
     2	import { serve } from "https://deno.land/std@0.224.0/http/server.ts"
     3	
     4	serve(async (req) => {
     5	  const url = new URL(req.url).searchParams.get('url')
     6	  if (!url) return new Response('missing url', { status: 400 })
     7	  try {
     8	    const u = new URL(url)
     9	    if (!['http:', 'https:'].includes(u.protocol)) return new Response('bad url', { status: 400 })
    10	    const res = await fetch(u.toString(), { headers: { 'user-agent': 'SceneScoutImageProxy/1.0' } })
    11	    if (!res.ok) return new Response('fetch error', { status: 502 })
    12	    const ct = res.headers.get('content-type') || 'image/jpeg'
    13	    const headers = new Headers({ 'content-type': ct, 'cache-control': 'public, max-age=86400, s-maxage=86400' })
    14	    return new Response(res.body, { headers })
    15	  } catch {
    16	    return new Response('proxy error', { status: 500 })
    17	  }
    18	})

=== FILE: ./supabase/functions/ingest_eventbrite//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface EventbriteEvent {
     6	  id: string;
     7	  name: {
     8	    text: string;
     9	    html: string;
    10	  };
    11	  description: {
    12	    text: string;
    13	    html: string;
    14	  };
    15	  url: string;
    16	  start: {
    17	    timezone: string;
    18	    local: string;
    19	    utc: string;
    20	  };
    21	  end: {
    22	    timezone: string;
    23	    local: string;
    24	    utc: string;
    25	  };
    26	  organization_id: string;
    27	  created: string;
    28	  changed: string;
    29	  published: string;
    30	  capacity: number;
    31	  capacity_is_custom: boolean;
    32	  status: string;
    33	  currency: string;
    34	  listed: boolean;
    35	  shareable: boolean;
    36	  online_event: boolean;
    37	  tx_time_limit: number;
    38	  hide_start_date: boolean;
    39	  hide_end_date: boolean;
    40	  locale: string;
    41	  is_locked: boolean;
    42	  privacy_setting: string;
    43	  is_series: boolean;
    44	  is_series_parent: boolean;
    45	  inventory_type: string;
    46	  is_reserved_seating: boolean;
    47	  show_pick_a_seat: boolean;
    48	  show_seatmap_thumbnail: boolean;
    49	  show_colors_in_seatmap_thumbnail: boolean;
    50	  source: string;
    51	  is_free: boolean;
    52	  version: string;
    53	  summary: string;
    54	  logo_id: string;
    55	  organizer_id: string;
    56	  venue_id: string;
    57	  category_id: string;
    58	  subcategory_id: string;
    59	  format_id: string;
    60	  resource_uri: string;
    61	  is_externally_ticketed: boolean;
    62	  logo?: {
    63	    crop_mask: {
    64	      top_left: { x: number; y: number };
    65	      width: number;
    66	      height: number;
    67	    };
    68	    original: {
    69	      url: string;
    70	      width: number;
    71	      height: number;
    72	    };
    73	    id: string;
    74	    url: string;
    75	    aspect_ratio: string;
    76	    edge_color: string;
    77	    edge_color_set: boolean;
    78	  };
    79	}
    80	
    81	interface EventbriteVenue {
    82	  resource_uri: string;
    83	  id: string;
    84	  name: string;
    85	  latitude: string;
    86	  longitude: string;
    87	  address: {
    88	    address_1: string;
    89	    address_2: string;
    90	    city: string;
    91	    region: string;
    92	    postal_code: string;
    93	    country: string;
    94	    localized_address_display: string;
    95	    localized_area_display: string;
    96	    localized_multi_line_address_display: string[];
    97	  };
    98	}
    99	
   100	interface EventbriteOrganizer {
   101	  resource_uri: string;
   102	  id: string;
   103	  name: string;
   104	  description: {
   105	    text: string;
   106	    html: string;
   107	  };
   108	  long_description: {
   109	    text: string;
   110	    html: string;
   111	  };
   112	  logo_id: string;
   113	  url: string;
   114	  vanity_url: string;
   115	  num_past_events: number;
   116	  num_future_events: number;
   117	  twitter: string;
   118	  facebook: string;
   119	  instagram: string;
   120	  logo?: {
   121	    crop_mask: {
   122	      top_left: { x: number; y: number };
   123	      width: number;
   124	      height: number;
   125	    };
   126	    original: {
   127	      url: string;
   128	      width: number;
   129	      height: number;
   130	    };
   131	    id: string;
   132	    url: string;
   133	    aspect_ratio: string;
   134	    edge_color: string;
   135	    edge_color_set: boolean;
   136	  };
   137	}
   138	
   139	interface EventbriteTicketClass {
   140	  resource_uri: string;
   141	  id: string;
   142	  name: string;
   143	  description: string;
   144	  donation: boolean;
   145	  free: boolean;
   146	  minimum_quantity: number;
   147	  maximum_quantity: number;
   148	  maximum_quantity_per_order: number;
   149	  on_sale_status: string;
   150	  on_sale_status_message: string;
   151	  event_id: string;
   152	  order_confirmation_message: string;
   153	  cost: {
   154	    currency: string;
   155	    value: number;
   156	    major_value: string;
   157	    display: string;
   158	  };
   159	  fee: {
   160	    currency: string;
   161	    value: number;
   162	    major_value: string;
   163	    display: string;
   164	  };
   165	  tax: {
   166	    currency: string;
   167	    value: number;
   168	    major_value: string;
   169	    display: string;
   170	  };
   171	  actual_cost: {
   172	    currency: string;
   173	    value: number;
   174	    major_value: string;
   175	    display: string;
   176	  };
   177	  sales_start: string;
   178	  sales_end: string;
   179	  sales_start_after: string;
   180	  include_fee: boolean;
   181	  split_fee: boolean;
   182	  hide_description: boolean;
   183	  hide_sale_dates: boolean;
   184	  auto_hide: boolean;
   185	  auto_hide_before: string;
   186	  auto_hide_after: string;
   187	  variant: string;
   188	  hidden: boolean;
   189	  order_confirmation_message_type: string;
   190	  delivery_methods: string[];
   191	  category: string;
   192	  inventory_tier: string;
   193	  secondary_assignment_enabled: boolean;
   194	}
   195	
   196	interface EventbriteResponse {
   197	  events: EventbriteEvent[];
   198	  pagination: {
   199	    object_count: number;
   200	    page_number: number;
   201	    page_size: number;
   202	    page_count: number;
   203	    continuation: string;
   204	    has_more_items: boolean;
   205	  };
   206	}
   207	
   208	/**
   209	 * Supabase Edge Function to ingest events from Eventbrite API
   210	 * Fetches events from Eventbrite Events API and stores them in the database
   211	 */
   212	serve(async (req) => {
   213	  try {
   214	    // Initialize Supabase client
   215	    const supabase = createClient<Database>(
   216	      Deno.env.get('SUPABASE_URL') ?? '',
   217	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   218	    );
   219	
   220	    // Get API token from environment variables
   221	    const token = Deno.env.get('EVENTBRITE_TOKEN');
   222	    if (!token) {
   223	      return new Response(
   224	        JSON.stringify({ error: 'Eventbrite API token not configured' }),
   225	        { status: 500, headers: { 'Content-Type': 'application/json' } }
   226	      );
   227	    }
   228	
   229	    // Get query parameters
   230	    const url = new URL(req.url);
   231	    const location = url.searchParams.get('location') || 'San Francisco, CA';
   232	    const startDate = url.searchParams.get('start_date') || new Date().toISOString().split('T')[0] + 'T00:00:00Z';
   233	    const categories = url.searchParams.get('categories') || '';
   234	    const q = url.searchParams.get('q') || '';
   235	
   236	    console.log(`Fetching Eventbrite events for location: ${location}`);
   237	
   238	    // Construct Eventbrite API URL
   239	    const eventbriteUrl = new URL('https://www.eventbriteapi.com/v3/events/search/');
   240	    eventbriteUrl.searchParams.set('location.address', location);
   241	    eventbriteUrl.searchParams.set('location.within', '25mi');
   242	    eventbriteUrl.searchParams.set('start_date.range_start', startDate);
   243	    eventbriteUrl.searchParams.set('sort_by', 'date');
   244	    eventbriteUrl.searchParams.set('expand', 'venue,organizer,ticket_classes');
   245	    eventbriteUrl.searchParams.set('page_size', '50');
   246	    
   247	    if (categories) {
   248	      eventbriteUrl.searchParams.set('categories', categories);
   249	    }
   250	    
   251	    if (q) {
   252	      eventbriteUrl.searchParams.set('q', q);
   253	    }
   254	
   255	    // Fetch events from Eventbrite
   256	    const response = await fetch(eventbriteUrl.toString(), {
   257	      headers: {
   258	        'Authorization': `Bearer ${token}`,
   259	        'Accept': 'application/json',
   260	        'User-Agent': 'SceneScout/1.0'
   261	      }
   262	    });
   263	
   264	    if (!response.ok) {
   265	      console.error(`Eventbrite API error: ${response.status} ${response.statusText}`);
   266	      const errorBody = await response.text();
   267	      console.error('Error response:', errorBody);
   268	      return new Response(
   269	        JSON.stringify({ 
   270	          error: 'Failed to fetch from Eventbrite API',
   271	          status: response.status,
   272	          statusText: response.statusText,
   273	          details: errorBody
   274	        }),
   275	        { status: response.status, headers: { 'Content-Type': 'application/json' } }
   276	      );
   277	    }
   278	
   279	    const data: EventbriteResponse = await response.json();
   280	    const events = data.events || [];
   281	
   282	    console.log(`Found ${events.length} events from Eventbrite`);
   283	
   284	    // Process and insert events
   285	    const processedEvents = [];
   286	    const processedVenues = [];
   287	    const processedOrganizers = [];
   288	
   289	    for (const event of events) {
   290	      try {
   291	        // Process venue if it exists
   292	        let venueId = null;
   293	        if (event.venue_id && (event as any).venue) {
   294	          const venue = (event as any).venue as EventbriteVenue;
   295	          
   296	          const venueData = {
   297	            id: venue.id,
   298	            name: venue.name,
   299	            address: venue.address?.address_1 || '',
   300	            city: venue.address?.city || '',
   301	            state: venue.address?.region || '',
   302	            postal_code: venue.address?.postal_code || '',
   303	            country: venue.address?.country || 'United States',
   304	            latitude: parseFloat(venue.latitude || '0'),
   305	            longitude: parseFloat(venue.longitude || '0'),
   306	            phone: null,
   307	            website: null,
   308	            timezone: event.start?.timezone || 'America/Los_Angeles',
   309	            capacity: null,
   310	            venue_type: 'unknown',
   311	            amenities: [],
   312	            accessibility_features: [],
   313	            parking_info: null,
   314	            source: 'eventbrite',
   315	            external_id: venue.id,
   316	            last_updated: new Date().toISOString()
   317	          };
   318	
   319	          processedVenues.push(venueData);
   320	          venueId = venue.id;
   321	        }
   322	
   323	        // Process organizer if it exists
   324	        if (event.organizer_id && (event as any).organizer) {
   325	          const organizer = (event as any).organizer as EventbriteOrganizer;
   326	          
   327	          const organizerData = {
   328	            id: organizer.id,
   329	            name: organizer.name,
   330	            description: organizer.description?.text || '',
   331	            website: organizer.url || null,
   332	            social_media: {
   333	              twitter: organizer.twitter || null,
   334	              facebook: organizer.facebook || null,
   335	              instagram: organizer.instagram || null
   336	            },
   337	            logo_url: organizer.logo?.original?.url || null,
   338	            source: 'eventbrite',
   339	            external_id: organizer.id,
   340	            last_updated: new Date().toISOString()
   341	          };
   342	
   343	          processedOrganizers.push(organizerData);
   344	        }
   345	
   346	        // Determine pricing from ticket classes
   347	        let priceMin = null;
   348	        let priceMax = null;
   349	        let isFree = event.is_free;
   350	        
   351	        if ((event as any).ticket_classes) {
   352	          const ticketClasses = (event as any).ticket_classes as EventbriteTicketClass[];
   353	          const prices = ticketClasses
   354	            .filter(tc => !tc.free && tc.cost?.value > 0)
   355	            .map(tc => tc.cost.value / 100); // Convert cents to dollars
   356	          
   357	          if (prices.length > 0) {
   358	            priceMin = Math.min(...prices);
   359	            priceMax = Math.max(...prices);
   360	            isFree = false;
   361	          }
   362	        }
   363	
   364	        // Process event
   365	        const eventData = {
   366	          id: event.id,
   367	          title: event.name?.text || 'Untitled Event',
   368	          description: event.description?.text || event.summary || '',
   369	          start_time: event.start?.utc || event.start?.local,
   370	          end_time: event.end?.utc || event.end?.local,
   371	          timezone: event.start?.timezone || 'America/Los_Angeles',
   372	          venue_id: venueId,
   373	          organizer_id: event.organizer_id || null,
   374	          category: 'Community', // Eventbrite events are typically community events
   375	          subcategory: null,
   376	          tags: [],
   377	          price_min: isFree ? 0 : priceMin,
   378	          price_max: isFree ? 0 : priceMax,
   379	          price_currency: event.currency || 'USD',
   380	          ticket_url: event.url,
   381	          image_url: event.logo?.original?.url || null,
   382	          source: 'eventbrite',
   383	          external_id: event.id,
   384	          status: event.status === 'live' && event.listed ? 'active' : 'inactive',
   385	          age_restriction: null,
   386	          capacity: event.capacity || null,
   387	          last_updated: new Date().toISOString(),
   388	          hotness_score: 0
   389	        };
   390	
   391	        processedEvents.push(eventData);
   392	
   393	      } catch (error) {
   394	        console.error(`Error processing event ${event.id}:`, error);
   395	        continue;
   396	      }
   397	    }
   398	
   399	    // Insert organizers first
   400	    if (processedOrganizers.length > 0) {
   401	      const { error: organizerError } = await supabase
   402	        .from('organizers')
   403	        .upsert(processedOrganizers, { 
   404	          onConflict: 'external_id,source',
   405	          ignoreDuplicates: false 
   406	        });
   407	
   408	      if (organizerError) {
   409	        console.error('Error inserting organizers:', organizerError);
   410	      } else {
   411	        console.log(`Inserted/updated ${processedOrganizers.length} organizers`);
   412	      }
   413	    }
   414	
   415	    // Insert venues
   416	    if (processedVenues.length > 0) {
   417	      const { error: venueError } = await supabase
   418	        .from('venues')
   419	        .upsert(processedVenues, { 
   420	          onConflict: 'external_id,source',
   421	          ignoreDuplicates: false 
   422	        });
   423	
   424	      if (venueError) {
   425	        console.error('Error inserting venues:', venueError);
   426	      } else {
   427	        console.log(`Inserted/updated ${processedVenues.length} venues`);
   428	      }
   429	    }
   430	
   431	    // Insert events
   432	    if (processedEvents.length > 0) {
   433	      const { error: eventError } = await supabase
   434	        .from('events')
   435	        .upsert(processedEvents, { 
   436	          onConflict: 'external_id,source',
   437	          ignoreDuplicates: false 
   438	        });
   439	
   440	      if (eventError) {
   441	        console.error('Error inserting events:', eventError);
   442	        return new Response(
   443	          JSON.stringify({ 
   444	            error: 'Failed to insert events into database',
   445	            details: eventError 
   446	          }),
   447	          { status: 500, headers: { 'Content-Type': 'application/json' } }
   448	        );
   449	      }
   450	
   451	      console.log(`Inserted/updated ${processedEvents.length} events`);
   452	    }
   453	
   454	    return new Response(
   455	      JSON.stringify({
   456	        success: true,
   457	        eventsProcessed: processedEvents.length,
   458	        venuesProcessed: processedVenues.length,
   459	        organizersProcessed: processedOrganizers.length,
   460	        totalFound: events.length,
   461	        hasMore: data.pagination?.has_more_items || false
   462	      }),
   463	      { status: 200, headers: { 'Content-Type': 'application/json' } }
   464	    );
   465	
   466	  } catch (error) {
   467	    console.error('Error in ingest_eventbrite function:', error);
   468	    return new Response(
   469	      JSON.stringify({ 
   470	        error: 'Internal server error',
   471	        details: error.message 
   472	      }),
   473	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   474	    );
   475	  }
   476	});
=== FILE: ./supabase/functions/ingest_meetup//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface MeetupEvent {
     6	  id: string;
     7	  name: string;
     8	  description: string;
     9	  status: string;
    10	  created: number;
    11	  updated: number;
    12	  time: number;
    13	  utc_offset: number;
    14	  waitlist_count: number;
    15	  yes_rsvp_count: number;
    16	  venue?: {
    17	    id: number;
    18	    name: string;
    19	    lat: number;
    20	    lon: number;
    21	    repinned: boolean;
    22	    address_1: string;
    23	    address_2?: string;
    24	    address_3?: string;
    25	    city: string;
    26	    country: string;
    27	    localized_country_name: string;
    28	    phone?: string;
    29	    zip?: string;
    30	    state?: string;
    31	  };
    32	  group: {
    33	    id: number;
    34	    name: string;
    35	    urlname: string;
    36	    category: {
    37	      id: number;
    38	      name: string;
    39	      shortname: string;
    40	    };
    41	    photo?: {
    42	      id: number;
    43	      highres_link: string;
    44	      photo_link: string;
    45	      thumb_link: string;
    46	      type: string;
    47	      base_url: string;
    48	    };
    49	    created: number;
    50	    join_mode: string;
    51	    lat: number;
    52	    lon: number;
    53	    members: number;
    54	    status: string;
    55	    timezone: string;
    56	    visibility: string;
    57	  };
    58	  link: string;
    59	  photo?: {
    60	    id: number;
    61	    highres_link: string;
    62	    photo_link: string;
    63	    thumb_link: string;
    64	    type: string;
    65	    base_url: string;
    66	  };
    67	  how_to_find_us?: string;
    68	  visibility: string;
    69	  member_pay_fee: boolean;
    70	  fee?: {
    71	    accepts: string;
    72	    amount: number;
    73	    currency: string;
    74	    description: string;
    75	    label: string;
    76	    required: boolean;
    77	  };
    78	  attendee_sample?: Array<{
    79	    id: number;
    80	    name: string;
    81	    photo?: {
    82	      id: number;
    83	      highres_link: string;
    84	      photo_link: string;
    85	      thumb_link: string;
    86	      type: string;
    87	      base_url: string;
    88	    };
    89	  }>;
    90	  duration?: number;
    91	  plain_text_description?: string;
    92	  plain_text_no_images_description?: string;
    93	  short_link?: string;
    94	  series?: {
    95	    id: number;
    96	    start_date: string;
    97	    end_date: string;
    98	    weekly: boolean;
    99	    monthly: boolean;
   100	    template_event_id: string;
   101	    description?: string;
   102	  };
   103	  featured_photo?: {
   104	    id: number;
   105	    highres_link: string;
   106	    photo_link: string;
   107	    thumb_link: string;
   108	    type: string;
   109	    base_url: string;
   110	  };
   111	  pro_is_email_shared?: boolean;
   112	  event_hosts?: Array<{
   113	    id: number;
   114	    name: string;
   115	    intro: string;
   116	  }>;
   117	  rsvp_limit?: number;
   118	  comment_count?: number;
   119	  rating_count?: number;
   120	  rating_average?: number;
   121	}
   122	
   123	interface MeetupGroup {
   124	  id: number;
   125	  name: string;
   126	  urlname: string;
   127	  description: string;
   128	  created: number;
   129	  city: string;
   130	  untranslated_city: string;
   131	  country: string;
   132	  state: string;
   133	  join_mode: string;
   134	  visibility: string;
   135	  lat: number;
   136	  lon: number;
   137	  members: number;
   138	  organizer: {
   139	    id: number;
   140	    name: string;
   141	    bio?: string;
   142	  };
   143	  who: string;
   144	  group_photo?: {
   145	    id: number;
   146	    highres_link: string;
   147	    photo_link: string;
   148	    thumb_link: string;
   149	    type: string;
   150	    base_url: string;
   151	  };
   152	  key_photo?: {
   153	    id: number;
   154	    highres_link: string;
   155	    photo_link: string;
   156	    thumb_link: string;
   157	    type: string;
   158	    base_url: string;
   159	  };
   160	  timezone: string;
   161	  next_event?: {
   162	    id: string;
   163	    name: string;
   164	    yes_rsvp_count: number;
   165	    time: number;
   166	  };
   167	  category: {
   168	    id: number;
   169	    name: string;
   170	    shortname: string;
   171	    sort_name: string;
   172	  };
   173	  meta_category: {
   174	    id: number;
   175	    shortname: string;
   176	    name: string;
   177	    sort_name: string;
   178	  };
   179	  photo?: {
   180	    id: number;
   181	    highres_link: string;
   182	    photo_link: string;
   183	    thumb_link: string;
   184	    type: string;
   185	    base_url: string;
   186	  };
   187	  status: string;
   188	  link: string;
   189	  rating?: number;
   190	  pro_network?: {
   191	    name: string;
   192	  };
   193	  topics?: Array<{
   194	    id: number;
   195	    name: string;
   196	    urlkey: string;
   197	  }>;
   198	  localized_location: string;
   199	  region?: string;
   200	  short_link?: string;
   201	}
   202	
   203	/**
   204	 * Rate limiting helper for Meetup API
   205	 */
   206	class MeetupRateLimit {
   207	  private requests: number[] = [];
   208	  private maxRequests = 200; // 200 requests per hour
   209	  private windowMs = 60 * 60 * 1000; // 1 hour
   210	
   211	  async waitIfNeeded(): Promise<void> {
   212	    const now = Date.now();
   213	    this.requests = this.requests.filter(time => now - time < this.windowMs);
   214	    
   215	    if (this.requests.length >= this.maxRequests) {
   216	      const oldestRequest = Math.min(...this.requests);
   217	      const waitTime = this.windowMs - (now - oldestRequest);
   218	      if (waitTime > 0) {
   219	        console.log(`Rate limit reached, waiting ${Math.round(waitTime / 1000)}s`);
   220	        await new Promise(resolve => setTimeout(resolve, waitTime));
   221	      }
   222	    }
   223	    
   224	    this.requests.push(now);
   225	  }
   226	}
   227	
   228	const rateLimit = new MeetupRateLimit();
   229	
   230	/**
   231	 * Supabase Edge Function to ingest meetups from Meetup API
   232	 * Fetches meetup events from Meetup.com API and stores them in the database
   233	 */
   234	serve(async (req) => {
   235	  try {
   236	    // Initialize Supabase client
   237	    const supabase = createClient<Database>(
   238	      Deno.env.get('SUPABASE_URL') ?? '',
   239	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   240	    );
   241	
   242	    // Get access token from environment variables
   243	    const accessToken = Deno.env.get('MEETUP_ACCESS_TOKEN');
   244	    if (!accessToken) {
   245	      return new Response(
   246	        JSON.stringify({ error: 'Meetup access token not configured' }),
   247	        { status: 500, headers: { 'Content-Type': 'application/json' } }
   248	      );
   249	    }
   250	
   251	    // Get query parameters
   252	    const url = new URL(req.url);
   253	    const lat = parseFloat(url.searchParams.get('lat') || '37.7749'); // San Francisco default
   254	    const lon = parseFloat(url.searchParams.get('lon') || '-122.4194');
   255	    const radius = parseFloat(url.searchParams.get('radius') || '25'); // miles
   256	    const category = url.searchParams.get('category') || '';
   257	    const text = url.searchParams.get('text') || '';
   258	
   259	    console.log(`Fetching Meetup events for lat: ${lat}, lon: ${lon}, radius: ${radius}mi`);
   260	
   261	    // Apply rate limiting
   262	    await rateLimit.waitIfNeeded();
   263	
   264	    // Construct Meetup API URL for events
   265	    const meetupUrl = new URL('https://api.meetup.com/find/upcoming_events');
   266	    meetupUrl.searchParams.set('lat', lat.toString());
   267	    meetupUrl.searchParams.set('lon', lon.toString());
   268	    meetupUrl.searchParams.set('radius', radius.toString());
   269	    meetupUrl.searchParams.set('page', '200');
   270	    
   271	    if (category) {
   272	      meetupUrl.searchParams.set('category', category);
   273	    }
   274	    
   275	    if (text) {
   276	      meetupUrl.searchParams.set('text', text);
   277	    }
   278	
   279	    // Fetch events from Meetup
   280	    const response = await fetch(meetupUrl.toString(), {
   281	      headers: {
   282	        'Authorization': `Bearer ${accessToken}`,
   283	        'Accept': 'application/json',
   284	        'User-Agent': 'SceneScout/1.0'
   285	      }
   286	    });
   287	
   288	    if (!response.ok) {
   289	      console.error(`Meetup API error: ${response.status} ${response.statusText}`);
   290	      const errorBody = await response.text();
   291	      console.error('Error response:', errorBody);
   292	      return new Response(
   293	        JSON.stringify({ 
   294	          error: 'Failed to fetch from Meetup API',
   295	          status: response.status,
   296	          statusText: response.statusText,
   297	          details: errorBody
   298	        }),
   299	        { status: response.status, headers: { 'Content-Type': 'application/json' } }
   300	      );
   301	    }
   302	
   303	    const data = await response.json();
   304	    const events: MeetupEvent[] = data.events || [];
   305	
   306	    console.log(`Found ${events.length} meetup events`);
   307	
   308	    // Process and insert events
   309	    const processedEvents = [];
   310	    const processedVenues = [];
   311	    const processedGroups = [];
   312	
   313	    for (const event of events) {
   314	      try {
   315	        // Process group (organizer)
   316	        if (event.group) {
   317	          const group = event.group;
   318	          
   319	          const groupData = {
   320	            id: group.id.toString(),
   321	            name: group.name,
   322	            description: '', // Would need separate API call to get full description
   323	            website: `https://www.meetup.com/${group.urlname}`,
   324	            social_media: {},
   325	            logo_url: group.photo?.photo_link || null,
   326	            category: group.category?.name || 'Community',
   327	            member_count: group.members,
   328	            location: `${group.lat},${group.lon}`,
   329	            timezone: group.timezone,
   330	            source: 'meetup',
   331	            external_id: group.id.toString(),
   332	            last_updated: new Date().toISOString()
   333	          };
   334	
   335	          processedGroups.push(groupData);
   336	        }
   337	
   338	        // Process venue if it exists
   339	        let venueId = null;
   340	        if (event.venue) {
   341	          const venue = event.venue;
   342	          
   343	          const venueData = {
   344	            id: venue.id.toString(),
   345	            name: venue.name,
   346	            address: [venue.address_1, venue.address_2, venue.address_3].filter(Boolean).join(', '),
   347	            city: venue.city,
   348	            state: venue.state || '',
   349	            postal_code: venue.zip || '',
   350	            country: venue.country,
   351	            latitude: venue.lat,
   352	            longitude: venue.lon,
   353	            phone: venue.phone || null,
   354	            website: null,
   355	            timezone: event.group.timezone,
   356	            capacity: null,
   357	            venue_type: 'meetup_venue',
   358	            amenities: [],
   359	            accessibility_features: [],
   360	            parking_info: null,
   361	            source: 'meetup',
   362	            external_id: venue.id.toString(),
   363	            last_updated: new Date().toISOString()
   364	          };
   365	
   366	          processedVenues.push(venueData);
   367	          venueId = venue.id.toString();
   368	        }
   369	
   370	        // Calculate event duration (default to 2 hours if not specified)
   371	        const startTime = new Date(event.time + event.utc_offset);
   372	        const duration = event.duration || (2 * 60 * 60 * 1000); // 2 hours in milliseconds
   373	        const endTime = new Date(startTime.getTime() + duration);
   374	
   375	        // Process event
   376	        const eventData = {
   377	          id: event.id,
   378	          title: event.name,
   379	          description: event.plain_text_description || event.description || '',
   380	          start_time: startTime.toISOString(),
   381	          end_time: endTime.toISOString(),
   382	          timezone: event.group.timezone,
   383	          venue_id: venueId,
   384	          organizer_id: event.group.id.toString(),
   385	          category: 'Community',
   386	          subcategory: event.group.category?.name || 'Meetup',
   387	          tags: [
   388	            'meetup',
   389	            event.group.category?.name || '',
   390	            ...(event.group.name.split(' ').slice(0, 3)) // First few words of group name as tags
   391	          ].filter(Boolean),
   392	          price_min: event.fee?.amount ? event.fee.amount / 100 : 0, // Convert cents to dollars
   393	          price_max: event.fee?.amount ? event.fee.amount / 100 : 0,
   394	          price_currency: event.fee?.currency || 'USD',
   395	          ticket_url: event.link,
   396	          image_url: event.featured_photo?.photo_link || 
   397	                     event.photo?.photo_link || 
   398	                     event.group.photo?.photo_link || null,
   399	          source: 'meetup',
   400	          external_id: event.id,
   401	          status: event.status === 'upcoming' ? 'active' : 'inactive',
   402	          age_restriction: null,
   403	          capacity: event.rsvp_limit || null,
   404	          attendee_count: event.yes_rsvp_count || 0,
   405	          last_updated: new Date().toISOString(),
   406	          hotness_score: Math.min(Math.round((event.yes_rsvp_count || 0) / 2), 100) // RSVP count as popularity indicator
   407	        };
   408	
   409	        processedEvents.push(eventData);
   410	
   411	      } catch (error) {
   412	        console.error(`Error processing event ${event.id}:`, error);
   413	        continue;
   414	      }
   415	    }
   416	
   417	    // Insert groups (as organizers) first
   418	    if (processedGroups.length > 0) {
   419	      const { error: groupError } = await supabase
   420	        .from('organizers')
   421	        .upsert(processedGroups, { 
   422	          onConflict: 'external_id,source',
   423	          ignoreDuplicates: false 
   424	        });
   425	
   426	      if (groupError) {
   427	        console.error('Error inserting groups:', groupError);
   428	      } else {
   429	        console.log(`Inserted/updated ${processedGroups.length} meetup groups`);
   430	      }
   431	    }
   432	
   433	    // Insert venues
   434	    if (processedVenues.length > 0) {
   435	      const { error: venueError } = await supabase
   436	        .from('venues')
   437	        .upsert(processedVenues, { 
   438	          onConflict: 'external_id,source',
   439	          ignoreDuplicates: false 
   440	        });
   441	
   442	      if (venueError) {
   443	        console.error('Error inserting venues:', venueError);
   444	      } else {
   445	        console.log(`Inserted/updated ${processedVenues.length} venues`);
   446	      }
   447	    }
   448	
   449	    // Insert events
   450	    if (processedEvents.length > 0) {
   451	      const { error: eventError } = await supabase
   452	        .from('events')
   453	        .upsert(processedEvents, { 
   454	          onConflict: 'external_id,source',
   455	          ignoreDuplicates: false 
   456	        });
   457	
   458	      if (eventError) {
   459	        console.error('Error inserting events:', eventError);
   460	        return new Response(
   461	          JSON.stringify({ 
   462	            error: 'Failed to insert events into database',
   463	            details: eventError 
   464	          }),
   465	          { status: 500, headers: { 'Content-Type': 'application/json' } }
   466	        );
   467	      }
   468	
   469	      console.log(`Inserted/updated ${processedEvents.length} meetup events`);
   470	    }
   471	
   472	    return new Response(
   473	      JSON.stringify({
   474	        success: true,
   475	        eventsProcessed: processedEvents.length,
   476	        venuesProcessed: processedVenues.length,
   477	        groupsProcessed: processedGroups.length,
   478	        totalFound: events.length
   479	      }),
   480	      { status: 200, headers: { 'Content-Type': 'application/json' } }
   481	    );
   482	
   483	  } catch (error) {
   484	    console.error('Error in ingest_meetup function:', error);
   485	    return new Response(
   486	      JSON.stringify({ 
   487	        error: 'Internal server error',
   488	        details: error.message 
   489	      }),
   490	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   491	    );
   492	  }
   493	});
=== FILE: ./supabase/functions/ingest_places_google//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface GooglePlace {
     6	  place_id: string;
     7	  name: string;
     8	  formatted_address: string;
     9	  geometry: {
    10	    location: {
    11	      lat: number;
    12	      lng: number;
    13	    };
    14	  };
    15	  types: string[];
    16	  business_status?: string;
    17	  rating?: number;
    18	  user_ratings_total?: number;
    19	  price_level?: number;
    20	  opening_hours?: {
    21	    open_now: boolean;
    22	    periods?: Array<{
    23	      close: {
    24	        day: number;
    25	        time: string;
    26	      };
    27	      open: {
    28	        day: number;
    29	        time: string;
    30	      };
    31	    }>;
    32	    weekday_text?: string[];
    33	  };
    34	  photos?: Array<{
    35	    height: number;
    36	    html_attributions: string[];
    37	    photo_reference: string;
    38	    width: number;
    39	  }>;
    40	  vicinity?: string;
    41	  permanently_closed?: boolean;
    42	  plus_code?: {
    43	    compound_code: string;
    44	    global_code: string;
    45	  };
    46	  icon?: string;
    47	  icon_background_color?: string;
    48	  icon_mask_base_uri?: string;
    49	  reference?: string;
    50	  scope?: string;
    51	  alt_ids?: Array<{
    52	    place_id: string;
    53	    scope: string;
    54	  }>;
    55	}
    56	
    57	interface GooglePlacesResponse {
    58	  html_attributions: string[];
    59	  results: GooglePlace[];
    60	  status: string;
    61	  error_message?: string;
    62	  info_messages?: string[];
    63	  next_page_token?: string;
    64	}
    65	
    66	interface GooglePlaceDetails {
    67	  place_id: string;
    68	  name: string;
    69	  formatted_address: string;
    70	  formatted_phone_number?: string;
    71	  international_phone_number?: string;
    72	  website?: string;
    73	  url: string;
    74	  geometry: {
    75	    location: {
    76	      lat: number;
    77	      lng: number;
    78	    };
    79	  };
    80	  types: string[];
    81	  business_status?: string;
    82	  rating?: number;
    83	  user_ratings_total?: number;
    84	  price_level?: number;
    85	  opening_hours?: {
    86	    open_now: boolean;
    87	    periods?: Array<{
    88	      close: {
    89	        day: number;
    90	        time: string;
    91	      };
    92	      open: {
    93	        day: number;
    94	        time: string;
    95	      };
    96	    }>;
    97	    weekday_text?: string[];
    98	  };
    99	  photos?: Array<{
   100	    height: number;
   101	    html_attributions: string[];
   102	    photo_reference: string;
   103	    width: number;
   104	  }>;
   105	  reviews?: Array<{
   106	    author_name: string;
   107	    author_url: string;
   108	    language: string;
   109	    profile_photo_url: string;
   110	    rating: number;
   111	    relative_time_description: string;
   112	    text: string;
   113	    time: number;
   114	  }>;
   115	  editorial_summary?: {
   116	    language: string;
   117	    overview: string;
   118	  };
   119	  current_opening_hours?: {
   120	    open_now: boolean;
   121	    periods: Array<{
   122	      close?: {
   123	        date: string;
   124	        day: number;
   125	        time: string;
   126	      };
   127	      open: {
   128	        date: string;
   129	        day: number;
   130	        time: string;
   131	      };
   132	    }>;
   133	    weekday_text: string[];
   134	  };
   135	  wheelchair_accessible_entrance?: boolean;
   136	  curbside_pickup?: boolean;
   137	  delivery?: boolean;
   138	  dine_in?: boolean;
   139	  takeout?: boolean;
   140	  reservable?: boolean;
   141	  serves_breakfast?: boolean;
   142	  serves_lunch?: boolean;
   143	  serves_dinner?: boolean;
   144	  serves_beer?: boolean;
   145	  serves_wine?: boolean;
   146	  serves_vegetarian_food?: boolean;
   147	  utc_offset?: number;
   148	  vicinity?: string;
   149	  adr_address?: string;
   150	  plus_code?: {
   151	    compound_code: string;
   152	    global_code: string;
   153	  };
   154	}
   155	
   156	/**
   157	 * Rate limiting helper for Google Places API
   158	 */
   159	class GooglePlacesRateLimit {
   160	  private requests: number[] = [];
   161	  private maxRequestsPerSecond = 50;
   162	  private windowMs = 1000; // 1 second
   163	
   164	  async waitIfNeeded(): Promise<void> {
   165	    const now = Date.now();
   166	    this.requests = this.requests.filter(time => now - time < this.windowMs);
   167	    
   168	    if (this.requests.length >= this.maxRequestsPerSecond) {
   169	      const waitTime = this.windowMs;
   170	      console.log(`Rate limit reached, waiting ${waitTime}ms`);
   171	      await new Promise(resolve => setTimeout(resolve, waitTime));
   172	    }
   173	    
   174	    this.requests.push(now);
   175	  }
   176	}
   177	
   178	const rateLimit = new GooglePlacesRateLimit();
   179	
   180	/**
   181	 * Maps Google Place types to venue categories
   182	 */
   183	function categorizeVenue(types: string[]): { category: string; venue_type: string } {
   184	  const typeMap = {
   185	    restaurant: { category: 'Food & Drink', venue_type: 'restaurant' },
   186	    bar: { category: 'Food & Drink', venue_type: 'bar' },
   187	    night_club: { category: 'Entertainment', venue_type: 'nightclub' },
   188	    movie_theater: { category: 'Entertainment', venue_type: 'movie_theater' },
   189	    amusement_park: { category: 'Entertainment', venue_type: 'amusement_park' },
   190	    bowling_alley: { category: 'Entertainment', venue_type: 'bowling_alley' },
   191	    museum: { category: 'Arts & Culture', venue_type: 'museum' },
   192	    art_gallery: { category: 'Arts & Culture', venue_type: 'art_gallery' },
   193	    library: { category: 'Arts & Culture', venue_type: 'library' },
   194	    park: { category: 'Recreation', venue_type: 'park' },
   195	    gym: { category: 'Recreation', venue_type: 'fitness' },
   196	    stadium: { category: 'Sports', venue_type: 'stadium' },
   197	    shopping_mall: { category: 'Shopping', venue_type: 'shopping_center' },
   198	    store: { category: 'Shopping', venue_type: 'retail' },
   199	    tourist_attraction: { category: 'Entertainment', venue_type: 'attraction' },
   200	    church: { category: 'Community', venue_type: 'religious' },
   201	    university: { category: 'Education', venue_type: 'educational' },
   202	    school: { category: 'Education', venue_type: 'educational' }
   203	  };
   204	
   205	  for (const type of types) {
   206	    if (typeMap[type as keyof typeof typeMap]) {
   207	      return typeMap[type as keyof typeof typeMap];
   208	    }
   209	  }
   210	
   211	  return { category: 'Other', venue_type: 'unknown' };
   212	}
   213	
   214	/**
   215	 * Parses address components from formatted address
   216	 */
   217	function parseAddress(formatted_address: string): {
   218	  city: string;
   219	  state: string;
   220	  postal_code: string;
   221	  country: string;
   222	} {
   223	  const parts = formatted_address.split(', ');
   224	  let city = '';
   225	  let state = '';
   226	  let postal_code = '';
   227	  let country = 'United States';
   228	
   229	  // This is a simplified parser - Google Places Details API provides better structured data
   230	  if (parts.length >= 3) {
   231	    const lastPart = parts[parts.length - 1]; // Country
   232	    const secondLastPart = parts[parts.length - 2]; // State + ZIP
   233	    
   234	    if (lastPart !== 'USA' && lastPart !== 'United States') {
   235	      country = lastPart;
   236	    }
   237	    
   238	    const stateZipMatch = secondLastPart.match(/^([A-Z]{2})\s+(\d{5}(-\d{4})?)$/);
   239	    if (stateZipMatch) {
   240	      state = stateZipMatch[1];
   241	      postal_code = stateZipMatch[2];
   242	    }
   243	    
   244	    if (parts.length >= 4) {
   245	      city = parts[parts.length - 4];
   246	    } else if (parts.length === 3) {
   247	      city = parts[0];
   248	    }
   249	  }
   250	
   251	  return { city, state, postal_code, country };
   252	}
   253	
   254	/**
   255	 * Supabase Edge Function to ingest venues from Google Places API
   256	 * Fetches venues from Google Places API and stores them in the database
   257	 */
   258	serve(async (req) => {
   259	  try {
   260	    // Initialize Supabase client
   261	    const supabase = createClient<Database>(
   262	      Deno.env.get('SUPABASE_URL') ?? '',
   263	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   264	    );
   265	
   266	    // Get API key from environment variables
   267	    const apiKey = Deno.env.get('GOOGLE_PLACES_API_KEY');
   268	    if (!apiKey) {
   269	      return new Response(
   270	        JSON.stringify({ error: 'Google Places API key not configured' }),
   271	        { status: 500, headers: { 'Content-Type': 'application/json' } }
   272	      );
   273	    }
   274	
   275	    // Get query parameters
   276	    const url = new URL(req.url);
   277	    const location = url.searchParams.get('location') || '37.7749,-122.4194'; // San Francisco default
   278	    const radius = parseInt(url.searchParams.get('radius') || '5000'); // 5km default
   279	    const type = url.searchParams.get('type') || ''; // venue type
   280	    const keyword = url.searchParams.get('keyword') || '';
   281	    const fetchDetails = url.searchParams.get('details') === 'true';
   282	
   283	    console.log(`Fetching Google Places for location: ${location}, radius: ${radius}m`);
   284	
   285	    // Define venue types to search for
   286	    const venueTypes = type ? [type] : [
   287	      'restaurant',
   288	      'bar', 
   289	      'night_club',
   290	      'movie_theater',
   291	      'amusement_park',
   292	      'bowling_alley',
   293	      'museum',
   294	      'art_gallery',
   295	      'park',
   296	      'stadium',
   297	      'tourist_attraction',
   298	      'shopping_mall'
   299	    ];
   300	
   301	    const allVenues = [];
   302	
   303	    // Search for each venue type
   304	    for (const venueType of venueTypes) {
   305	      try {
   306	        await rateLimit.waitIfNeeded();
   307	
   308	        // Construct Google Places API URL
   309	        const placesUrl = new URL('https://maps.googleapis.com/maps/api/place/nearbysearch/json');
   310	        placesUrl.searchParams.set('location', location);
   311	        placesUrl.searchParams.set('radius', radius.toString());
   312	        placesUrl.searchParams.set('type', venueType);
   313	        placesUrl.searchParams.set('key', apiKey);
   314	        
   315	        if (keyword) {
   316	          placesUrl.searchParams.set('keyword', keyword);
   317	        }
   318	
   319	        // Fetch places from Google
   320	        const response = await fetch(placesUrl.toString(), {
   321	          headers: {
   322	            'Accept': 'application/json',
   323	            'User-Agent': 'SceneScout/1.0'
   324	          }
   325	        });
   326	
   327	        if (!response.ok) {
   328	          console.error(`Google Places API error for ${venueType}: ${response.status} ${response.statusText}`);
   329	          continue;
   330	        }
   331	
   332	        const data: GooglePlacesResponse = await response.json();
   333	
   334	        if (data.status !== 'OK') {
   335	          console.error(`Google Places API returned status ${data.status} for ${venueType}: ${data.error_message}`);
   336	          continue;
   337	        }
   338	
   339	        console.log(`Found ${data.results.length} places for type: ${venueType}`);
   340	        allVenues.push(...data.results);
   341	
   342	      } catch (error) {
   343	        console.error(`Error fetching ${venueType} venues:`, error);
   344	        continue;
   345	      }
   346	    }
   347	
   348	    // Remove duplicates based on place_id
   349	    const uniqueVenues = Array.from(
   350	      new Map(allVenues.map(venue => [venue.place_id, venue])).values()
   351	    );
   352	
   353	    console.log(`Processing ${uniqueVenues.length} unique venues`);
   354	
   355	    // Process and insert venues
   356	    const processedVenues = [];
   357	
   358	    for (const place of uniqueVenues) {
   359	      try {
   360	        let venueData: any;
   361	
   362	        // Fetch detailed information if requested
   363	        if (fetchDetails) {
   364	          await rateLimit.waitIfNeeded();
   365	
   366	          const detailsUrl = new URL('https://maps.googleapis.com/maps/api/place/details/json');
   367	          detailsUrl.searchParams.set('place_id', place.place_id);
   368	          detailsUrl.searchParams.set('fields', 'place_id,name,formatted_address,formatted_phone_number,website,url,geometry,types,business_status,rating,user_ratings_total,price_level,opening_hours,photos,wheelchair_accessible_entrance,editorial_summary');
   369	          detailsUrl.searchParams.set('key', apiKey);
   370	
   371	          const detailsResponse = await fetch(detailsUrl.toString());
   372	          
   373	          if (detailsResponse.ok) {
   374	            const detailsData = await detailsResponse.json();
   375	            if (detailsData.status === 'OK') {
   376	              const details: GooglePlaceDetails = detailsData.result;
   377	              
   378	              const addressInfo = parseAddress(details.formatted_address);
   379	              const { category, venue_type } = categorizeVenue(details.types);
   380	              
   381	              // Extract amenities from place details
   382	              const amenities = [];
   383	              if (details.wheelchair_accessible_entrance) amenities.push('wheelchair_accessible');
   384	              if (details.curbside_pickup) amenities.push('curbside_pickup');
   385	              if (details.delivery) amenities.push('delivery');
   386	              if (details.takeout) amenities.push('takeout');
   387	              if (details.dine_in) amenities.push('dine_in');
   388	              if (details.reservable) amenities.push('reservations');
   389	              
   390	              venueData = {
   391	                id: details.place_id,
   392	                name: details.name,
   393	                address: details.formatted_address,
   394	                city: addressInfo.city,
   395	                state: addressInfo.state,
   396	                postal_code: addressInfo.postal_code,
   397	                country: addressInfo.country,
   398	                latitude: details.geometry.location.lat,
   399	                longitude: details.geometry.location.lng,
   400	                phone: details.formatted_phone_number || null,
   401	                website: details.website || null,
   402	                timezone: 'America/Los_Angeles', // Would need geocoding for accurate timezone
   403	                capacity: null,
   404	                venue_type,
   405	                category,
   406	                rating: details.rating || null,
   407	                review_count: details.user_ratings_total || 0,
   408	                price_level: details.price_level || null,
   409	                amenities,
   410	                accessibility_features: details.wheelchair_accessible_entrance ? ['wheelchair_accessible'] : [],
   411	                parking_info: null,
   412	                description: details.editorial_summary?.overview || '',
   413	                opening_hours: details.opening_hours?.weekday_text || [],
   414	                photos: details.photos?.slice(0, 3).map(photo => ({
   415	                  url: `https://maps.googleapis.com/maps/api/place/photo?maxwidth=800&photo_reference=${photo.photo_reference}&key=${apiKey}`,
   416	                  width: photo.width,
   417	                  height: photo.height
   418	                })) || [],
   419	                source: 'google_places',
   420	                external_id: details.place_id,
   421	                last_updated: new Date().toISOString()
   422	              };
   423	            }
   424	          }
   425	        }
   426	
   427	        // Fallback to basic place data if details not fetched or failed
   428	        if (!venueData) {
   429	          const addressInfo = parseAddress(place.formatted_address);
   430	          const { category, venue_type } = categorizeVenue(place.types);
   431	          
   432	          venueData = {
   433	            id: place.place_id,
   434	            name: place.name,
   435	            address: place.formatted_address,
   436	            city: addressInfo.city,
   437	            state: addressInfo.state,
   438	            postal_code: addressInfo.postal_code,
   439	            country: addressInfo.country,
   440	            latitude: place.geometry.location.lat,
   441	            longitude: place.geometry.location.lng,
   442	            phone: null,
   443	            website: null,
   444	            timezone: 'America/Los_Angeles',
   445	            capacity: null,
   446	            venue_type,
   447	            category,
   448	            rating: place.rating || null,
   449	            review_count: place.user_ratings_total || 0,
   450	            price_level: place.price_level || null,
   451	            amenities: [],
   452	            accessibility_features: [],
   453	            parking_info: null,
   454	            description: '',
   455	            opening_hours: [],
   456	            photos: [],
   457	            source: 'google_places',
   458	            external_id: place.place_id,
   459	            last_updated: new Date().toISOString()
   460	          };
   461	        }
   462	
   463	        // Skip permanently closed venues
   464	        if (place.permanently_closed || place.business_status === 'CLOSED_PERMANENTLY') {
   465	          console.log(`Skipping permanently closed venue: ${place.name}`);
   466	          continue;
   467	        }
   468	
   469	        processedVenues.push(venueData);
   470	
   471	      } catch (error) {
   472	        console.error(`Error processing place ${place.place_id}:`, error);
   473	        continue;
   474	      }
   475	    }
   476	
   477	    // Insert venues
   478	    if (processedVenues.length > 0) {
   479	      const { error: venueError } = await supabase
   480	        .from('venues')
   481	        .upsert(processedVenues, { 
   482	          onConflict: 'external_id,source',
   483	          ignoreDuplicates: false 
   484	        });
   485	
   486	      if (venueError) {
   487	        console.error('Error inserting venues:', venueError);
   488	        return new Response(
   489	          JSON.stringify({ 
   490	            error: 'Failed to insert venues into database',
   491	            details: venueError 
   492	          }),
   493	          { status: 500, headers: { 'Content-Type': 'application/json' } }
   494	        );
   495	      }
   496	
   497	      console.log(`Inserted/updated ${processedVenues.length} venues from Google Places`);
   498	    }
   499	
   500	    return new Response(
   501	      JSON.stringify({
   502	        success: true,
   503	        venuesProcessed: processedVenues.length,
   504	        totalFound: uniqueVenues.length,
   505	        typesSearched: venueTypes.length
   506	      }),
   507	      { status: 200, headers: { 'Content-Type': 'application/json' } }
   508	    );
   509	
   510	  } catch (error) {
   511	    console.error('Error in ingest_places_google function:', error);
   512	    return new Response(
   513	      JSON.stringify({ 
   514	        error: 'Internal server error',
   515	        details: error.message 
   516	      }),
   517	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   518	    );
   519	  }
   520	});
=== FILE: ./supabase/functions/ingest_places_yelp//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface YelpBusiness {
     6	  id: string;
     7	  alias: string;
     8	  name: string;
     9	  image_url: string;
    10	  is_closed: boolean;
    11	  url: string;
    12	  review_count: number;
    13	  categories: Array<{
    14	    alias: string;
    15	    title: string;
    16	  }>;
    17	  rating: number;
    18	  coordinates: {
    19	    latitude: number;
    20	    longitude: number;
    21	  };
    22	  transactions: string[];
    23	  price?: string;
    24	  location: {
    25	    address1: string;
    26	    address2?: string;
    27	    address3?: string;
    28	    city: string;
    29	    zip_code: string;
    30	    country: string;
    31	    state: string;
    32	    display_address: string[];
    33	    cross_streets?: string;
    34	  };
    35	  phone: string;
    36	  display_phone: string;
    37	  distance?: number;
    38	  attributes?: {
    39	    business_temp_closed?: boolean;
    40	    menu_url?: string;
    41	    open24_hours?: boolean;
    42	    waitlist_reservation?: boolean;
    43	  };
    44	}
    45	
    46	interface YelpBusinessDetails {
    47	  id: string;
    48	  alias: string;
    49	  name: string;
    50	  image_url: string;
    51	  is_claimed?: boolean;
    52	  is_closed: boolean;
    53	  url: string;
    54	  phone: string;
    55	  display_phone: string;
    56	  review_count: number;
    57	  categories: Array<{
    58	    alias: string;
    59	    title: string;
    60	  }>;
    61	  rating: number;
    62	  location: {
    63	    address1: string;
    64	    address2?: string;
    65	    address3?: string;
    66	    city: string;
    67	    zip_code: string;
    68	    country: string;
    69	    state: string;
    70	    display_address: string[];
    71	    cross_streets?: string;
    72	  };
    73	  coordinates: {
    74	    latitude: number;
    75	    longitude: number;
    76	  };
    77	  photos: string[];
    78	  price?: string;
    79	  hours?: Array<{
    80	    open: Array<{
    81	      is_overnight: boolean;
    82	      start: string;
    83	      end: string;
    84	      day: number;
    85	    }>;
    86	    hours_type: string;
    87	    is_open_now: boolean;
    88	  }>;
    89	  transactions: string[];
    90	  special_hours?: Array<{
    91	    date: string;
    92	    is_closed?: boolean;
    93	    start?: string;
    94	    end?: string;
    95	    is_overnight?: boolean;
    96	  }>;
    97	  messaging?: {
    98	    url: string;
    99	    use_case_text: string;
   100	  };
   101	  attributes?: {
   102	    business_temp_closed?: boolean;
   103	    menu_url?: string;
   104	    open24_hours?: boolean;
   105	    waitlist_reservation?: boolean;
   106	    wheelchair_accessible?: boolean;
   107	    open_to_all?: boolean;
   108	    gender_neutral_restrooms?: boolean;
   109	    restaurant_reservation?: boolean;
   110	    restaurant_delivery?: boolean;
   111	    restaurant_takeout?: boolean;
   112	    outdoor_seating?: boolean;
   113	    wifi?: string;
   114	    noise_level?: string;
   115	    music?: {
   116	      dj?: boolean;
   117	      background_music?: boolean;
   118	      no_music?: boolean;
   119	      jukebox?: boolean;
   120	      live?: boolean;
   121	      karaoke?: boolean;
   122	    };
   123	    alcohol?: string;
   124	    smoking?: string;
   125	    dogs_allowed?: boolean;
   126	    bike_parking?: boolean;
   127	    good_for_kids?: boolean;
   128	    good_for_groups?: boolean;
   129	    drive_thru?: boolean;
   130	    caters?: boolean;
   131	    by_appointment_only?: boolean;
   132	  };
   133	}
   134	
   135	interface YelpSearchResponse {
   136	  businesses: YelpBusiness[];
   137	  total: number;
   138	  region: {
   139	    center: {
   140	      longitude: number;
   141	      latitude: number;
   142	    };
   143	  };
   144	}
   145	
   146	/**
   147	 * Rate limiting helper for Yelp API
   148	 */
   149	class YelpRateLimit {
   150	  private requests: number[] = [];
   151	  private maxRequests = 5000; // 5000 requests per day
   152	  private dailyWindowMs = 24 * 60 * 60 * 1000; // 24 hours
   153	
   154	  async waitIfNeeded(): Promise<void> {
   155	    const now = Date.now();
   156	    this.requests = this.requests.filter(time => now - time < this.dailyWindowMs);
   157	    
   158	    if (this.requests.length >= this.maxRequests) {
   159	      const oldestRequest = Math.min(...this.requests);
   160	      const waitTime = this.dailyWindowMs - (now - oldestRequest);
   161	      if (waitTime > 0) {
   162	        console.log(`Rate limit reached, waiting ${Math.round(waitTime / 1000 / 60)}min`);
   163	        await new Promise(resolve => setTimeout(resolve, Math.min(waitTime, 60000))); // Max 1 minute wait
   164	      }
   165	    }
   166	    
   167	    this.requests.push(now);
   168	  }
   169	}
   170	
   171	const rateLimit = new YelpRateLimit();
   172	
   173	/**
   174	 * Maps Yelp categories to venue categories and types
   175	 */
   176	function categorizeYelpBusiness(categories: Array<{ alias: string; title: string }>): { 
   177	  category: string; 
   178	  venue_type: string; 
   179	  subcategory: string;
   180	} {
   181	  const primaryCategory = categories[0];
   182	  const categoryAlias = primaryCategory?.alias || '';
   183	  const categoryTitle = primaryCategory?.title || '';
   184	
   185	  // Map Yelp categories to our schema
   186	  const categoryMap: Record<string, { category: string; venue_type: string }> = {
   187	    // Food & Drink
   188	    restaurants: { category: 'Food & Drink', venue_type: 'restaurant' },
   189	    bars: { category: 'Food & Drink', venue_type: 'bar' },
   190	    nightlife: { category: 'Food & Drink', venue_type: 'bar' },
   191	    coffee: { category: 'Food & Drink', venue_type: 'cafe' },
   192	    cafes: { category: 'Food & Drink', venue_type: 'cafe' },
   193	    food: { category: 'Food & Drink', venue_type: 'restaurant' },
   194	
   195	    // Entertainment
   196	    entertainment: { category: 'Entertainment', venue_type: 'entertainment' },
   197	    eventservices: { category: 'Entertainment', venue_type: 'event_space' },
   198	    venues: { category: 'Entertainment', venue_type: 'event_space' },
   199	    musicvenues: { category: 'Entertainment', venue_type: 'music_venue' },
   200	    comedyclubs: { category: 'Entertainment', venue_type: 'comedy_club' },
   201	    theaters: { category: 'Entertainment', venue_type: 'theater' },
   202	    movietheaters: { category: 'Entertainment', venue_type: 'movie_theater' },
   203	    bowling: { category: 'Entertainment', venue_type: 'bowling_alley' },
   204	    poolbilliards: { category: 'Entertainment', venue_type: 'pool_hall' },
   205	    amusementparks: { category: 'Entertainment', venue_type: 'amusement_park' },
   206	
   207	    // Arts & Culture
   208	    arts: { category: 'Arts & Culture', venue_type: 'art_gallery' },
   209	    museums: { category: 'Arts & Culture', venue_type: 'museum' },
   210	    galleries: { category: 'Arts & Culture', venue_type: 'art_gallery' },
   211	    libraries: { category: 'Arts & Culture', venue_type: 'library' },
   212	
   213	    // Recreation
   214	    active: { category: 'Recreation', venue_type: 'fitness' },
   215	    gyms: { category: 'Recreation', venue_type: 'fitness' },
   216	    fitness: { category: 'Recreation', venue_type: 'fitness' },
   217	    parks: { category: 'Recreation', venue_type: 'park' },
   218	
   219	    // Shopping
   220	    shopping: { category: 'Shopping', venue_type: 'retail' },
   221	    retail: { category: 'Shopping', venue_type: 'retail' },
   222	
   223	    // Services
   224	    eventplanning: { category: 'Services', venue_type: 'event_planning' },
   225	    professional: { category: 'Services', venue_type: 'professional' },
   226	
   227	    // Community
   228	    religiousorgs: { category: 'Community', venue_type: 'religious' },
   229	    nonprofit: { category: 'Community', venue_type: 'nonprofit' }
   230	  };
   231	
   232	  const mapped = categoryMap[categoryAlias] || { category: 'Other', venue_type: 'unknown' };
   233	  
   234	  return {
   235	    ...mapped,
   236	    subcategory: categoryTitle
   237	  };
   238	}
   239	
   240	/**
   241	 * Extracts amenities from Yelp business attributes
   242	 */
   243	function extractAmenities(attributes: YelpBusinessDetails['attributes'] = {}, transactions: string[] = []): string[] {
   244	  const amenities: string[] = [];
   245	
   246	  // Transaction-based amenities
   247	  if (transactions.includes('delivery')) amenities.push('delivery');
   248	  if (transactions.includes('pickup')) amenities.push('takeout');
   249	  if (transactions.includes('restaurant_reservation')) amenities.push('reservations');
   250	
   251	  // Attribute-based amenities
   252	  if (attributes.wheelchair_accessible) amenities.push('wheelchair_accessible');
   253	  if (attributes.wifi === 'free') amenities.push('free_wifi');
   254	  if (attributes.wifi === 'paid') amenities.push('paid_wifi');
   255	  if (attributes.outdoor_seating) amenities.push('outdoor_seating');
   256	  if (attributes.restaurant_delivery) amenities.push('delivery');
   257	  if (attributes.restaurant_takeout) amenities.push('takeout');
   258	  if (attributes.drive_thru) amenities.push('drive_thru');
   259	  if (attributes.bike_parking) amenities.push('bike_parking');
   260	  if (attributes.dogs_allowed) amenities.push('pet_friendly');
   261	  if (attributes.good_for_kids) amenities.push('family_friendly');
   262	  if (attributes.good_for_groups) amenities.push('group_friendly');
   263	  if (attributes.caters) amenities.push('catering');
   264	
   265	  return [...new Set(amenities)]; // Remove duplicates
   266	}
   267	
   268	/**
   269	 * Supabase Edge Function to ingest venues from Yelp API
   270	 * Fetches venues from Yelp Fusion API and stores them in the database
   271	 */
   272	serve(async (req) => {
   273	  try {
   274	    // Initialize Supabase client
   275	    const supabase = createClient<Database>(
   276	      Deno.env.get('SUPABASE_URL') ?? '',
   277	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   278	    );
   279	
   280	    // Get API key from environment variables
   281	    const apiKey = Deno.env.get('YELP_API_KEY');
   282	    if (!apiKey) {
   283	      return new Response(
   284	        JSON.stringify({ error: 'Yelp API key not configured' }),
   285	        { status: 500, headers: { 'Content-Type': 'application/json' } }
   286	      );
   287	    }
   288	
   289	    // Get query parameters
   290	    const url = new URL(req.url);
   291	    const location = url.searchParams.get('location') || 'San Francisco, CA';
   292	    const radius = parseInt(url.searchParams.get('radius') || '10000'); // 10km default
   293	    const categories = url.searchParams.get('categories') || '';
   294	    const term = url.searchParams.get('term') || '';
   295	    const limit = parseInt(url.searchParams.get('limit') || '50');
   296	    const fetchDetails = url.searchParams.get('details') === 'true';
   297	
   298	    console.log(`Fetching Yelp businesses for location: ${location}`);
   299	
   300	    // Apply rate limiting
   301	    await rateLimit.waitIfNeeded();
   302	
   303	    // Construct Yelp API URL
   304	    const yelpUrl = new URL('https://api.yelp.com/v3/businesses/search');
   305	    yelpUrl.searchParams.set('location', location);
   306	    yelpUrl.searchParams.set('radius', Math.min(radius, 40000).toString()); // Yelp max is 40km
   307	    yelpUrl.searchParams.set('limit', Math.min(limit, 50).toString()); // Yelp max is 50
   308	    yelpUrl.searchParams.set('sort_by', 'rating');
   309	    
   310	    if (categories) {
   311	      yelpUrl.searchParams.set('categories', categories);
   312	    } else {
   313	      // Default categories for event venues
   314	      yelpUrl.searchParams.set('categories', 'restaurants,bars,nightlife,entertainment,eventservices,venues,musicvenues');
   315	    }
   316	    
   317	    if (term) {
   318	      yelpUrl.searchParams.set('term', term);
   319	    }
   320	
   321	    // Fetch businesses from Yelp
   322	    const response = await fetch(yelpUrl.toString(), {
   323	      headers: {
   324	        'Authorization': `Bearer ${apiKey}`,
   325	        'Accept': 'application/json',
   326	        'User-Agent': 'SceneScout/1.0'
   327	      }
   328	    });
   329	
   330	    if (!response.ok) {
   331	      console.error(`Yelp API error: ${response.status} ${response.statusText}`);
   332	      const errorBody = await response.text();
   333	      console.error('Error response:', errorBody);
   334	      return new Response(
   335	        JSON.stringify({ 
   336	          error: 'Failed to fetch from Yelp API',
   337	          status: response.status,
   338	          statusText: response.statusText,
   339	          details: errorBody
   340	        }),
   341	        { status: response.status, headers: { 'Content-Type': 'application/json' } }
   342	      );
   343	    }
   344	
   345	    const data: YelpSearchResponse = await response.json();
   346	    const businesses = data.businesses || [];
   347	
   348	    console.log(`Found ${businesses.length} businesses from Yelp`);
   349	
   350	    // Process and insert venues
   351	    const processedVenues = [];
   352	
   353	    for (const business of businesses) {
   354	      try {
   355	        // Skip closed businesses
   356	        if (business.is_closed) {
   357	          console.log(`Skipping closed business: ${business.name}`);
   358	          continue;
   359	        }
   360	
   361	        let venueData: any;
   362	
   363	        // Fetch detailed information if requested
   364	        if (fetchDetails) {
   365	          try {
   366	            await rateLimit.waitIfNeeded();
   367	
   368	            const detailsResponse = await fetch(`https://api.yelp.com/v3/businesses/${business.id}`, {
   369	              headers: {
   370	                'Authorization': `Bearer ${apiKey}`,
   371	                'Accept': 'application/json',
   372	                'User-Agent': 'SceneScout/1.0'
   373	              }
   374	            });
   375	
   376	            if (detailsResponse.ok) {
   377	              const details: YelpBusinessDetails = await detailsResponse.json();
   378	              const { category, venue_type, subcategory } = categorizeYelpBusiness(details.categories);
   379	              const amenities = extractAmenities(details.attributes, details.transactions);
   380	              
   381	              // Format opening hours
   382	              const openingHours = details.hours?.[0]?.open?.map(hour => {
   383	                const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
   384	                const dayName = days[hour.day];
   385	                const startTime = `${hour.start.slice(0, 2)}:${hour.start.slice(2)}`;
   386	                const endTime = `${hour.end.slice(0, 2)}:${hour.end.slice(2)}`;
   387	                return `${dayName}: ${startTime} - ${endTime}`;
   388	              }) || [];
   389	
   390	              venueData = {
   391	                id: details.id,
   392	                name: details.name,
   393	                address: details.location.display_address.join(', '),
   394	                city: details.location.city,
   395	                state: details.location.state,
   396	                postal_code: details.location.zip_code,
   397	                country: details.location.country,
   398	                latitude: details.coordinates.latitude,
   399	                longitude: details.coordinates.longitude,
   400	                phone: details.display_phone || null,
   401	                website: details.url,
   402	                timezone: 'America/Los_Angeles', // Would need geocoding for accurate timezone
   403	                capacity: null,
   404	                venue_type,
   405	                category,
   406	                subcategory,
   407	                rating: details.rating,
   408	                review_count: details.review_count,
   409	                price_level: details.price ? details.price.length : null, // $ = 1, $$ = 2, etc.
   410	                amenities,
   411	                accessibility_features: details.attributes?.wheelchair_accessible ? ['wheelchair_accessible'] : [],
   412	                parking_info: details.attributes?.bike_parking ? 'Bike parking available' : null,
   413	                description: `${details.categories.map(c => c.title).join(', ')} • ${details.review_count} reviews`,
   414	                opening_hours: openingHours,
   415	                photos: details.photos?.slice(0, 5).map(url => ({
   416	                  url,
   417	                  width: 800,
   418	                  height: 600
   419	                })) || [],
   420	                source: 'yelp',
   421	                external_id: details.id,
   422	                last_updated: new Date().toISOString()
   423	              };
   424	            }
   425	          } catch (detailError) {
   426	            console.error(`Error fetching details for ${business.id}:`, detailError);
   427	          }
   428	        }
   429	
   430	        // Fallback to basic business data if details not fetched or failed
   431	        if (!venueData) {
   432	          const { category, venue_type, subcategory } = categorizeYelpBusiness(business.categories);
   433	          const amenities = extractAmenities({}, business.transactions);
   434	          
   435	          venueData = {
   436	            id: business.id,
   437	            name: business.name,
   438	            address: business.location.display_address.join(', '),
   439	            city: business.location.city,
   440	            state: business.location.state,
   441	            postal_code: business.location.zip_code,
   442	            country: business.location.country,
   443	            latitude: business.coordinates.latitude,
   444	            longitude: business.coordinates.longitude,
   445	            phone: business.display_phone || null,
   446	            website: business.url,
   447	            timezone: 'America/Los_Angeles',
   448	            capacity: null,
   449	            venue_type,
   450	            category,
   451	            subcategory,
   452	            rating: business.rating,
   453	            review_count: business.review_count,
   454	            price_level: business.price ? business.price.length : null,
   455	            amenities,
   456	            accessibility_features: [],
   457	            parking_info: null,
   458	            description: `${business.categories.map(c => c.title).join(', ')} • ${business.review_count} reviews`,
   459	            opening_hours: [],
   460	            photos: business.image_url ? [{
   461	              url: business.image_url,
   462	              width: 800,
   463	              height: 600
   464	            }] : [],
   465	            source: 'yelp',
   466	            external_id: business.id,
   467	            last_updated: new Date().toISOString()
   468	          };
   469	        }
   470	
   471	        processedVenues.push(venueData);
   472	
   473	      } catch (error) {
   474	        console.error(`Error processing business ${business.id}:`, error);
   475	        continue;
   476	      }
   477	    }
   478	
   479	    // Insert venues
   480	    if (processedVenues.length > 0) {
   481	      const { error: venueError } = await supabase
   482	        .from('venues')
   483	        .upsert(processedVenues, { 
   484	          onConflict: 'external_id,source',
   485	          ignoreDuplicates: false 
   486	        });
   487	
   488	      if (venueError) {
   489	        console.error('Error inserting venues:', venueError);
   490	        return new Response(
   491	          JSON.stringify({ 
   492	            error: 'Failed to insert venues into database',
   493	            details: venueError 
   494	          }),
   495	          { status: 500, headers: { 'Content-Type': 'application/json' } }
   496	        );
   497	      }
   498	
   499	      console.log(`Inserted/updated ${processedVenues.length} venues from Yelp`);
   500	    }
   501	
   502	    return new Response(
   503	      JSON.stringify({
   504	        success: true,
   505	        venuesProcessed: processedVenues.length,
   506	        totalFound: businesses.length,
   507	        region: data.region
   508	      }),
   509	      { status: 200, headers: { 'Content-Type': 'application/json' } }
   510	    );
   511	
   512	  } catch (error) {
   513	    console.error('Error in ingest_places_yelp function:', error);
   514	    return new Response(
   515	      JSON.stringify({ 
   516	        error: 'Internal server error',
   517	        details: error.message 
   518	      }),
   519	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   520	    );
   521	  }
   522	});
=== FILE: ./supabase/functions/ingest_songkick//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface SongkickEvent {
     6	  id: number;
     7	  type: string;
     8	  uri: string;
     9	  displayName: string;
    10	  start: {
    11	    date: string;
    12	    time: string;
    13	    datetime: string;
    14	  };
    15	  performance: Array<{
    16	    id: number;
    17	    displayName: string;
    18	    billing: string;
    19	    billingIndex: number;
    20	    artist: {
    21	      id: number;
    22	      displayName: string;
    23	      uri: string;
    24	      identifier: Array<{
    25	        mbid: string;
    26	        href: string;
    27	      }>;
    28	    };
    29	  }>;
    30	  location: {
    31	    city: string;
    32	    lat: number;
    33	    lng: number;
    34	  };
    35	  venue: {
    36	    id: number;
    37	    displayName: string;
    38	    uri: string;
    39	    lat: number;
    40	    lng: number;
    41	    metroArea: {
    42	      displayName: string;
    43	      country: {
    44	        displayName: string;
    45	      };
    46	      id: number;
    47	      uri: string;
    48	    };
    49	  };
    50	  status: string;
    51	  popularity: number;
    52	  ageRestriction: string;
    53	}
    54	
    55	interface SongkickResponse {
    56	  resultsPage: {
    57	    status: string;
    58	    results: {
    59	      event: SongkickEvent[];
    60	    };
    61	    perPage: number;
    62	    page: number;
    63	    totalEntries: number;
    64	  };
    65	}
    66	
    67	interface SongkickArtist {
    68	  id: number;
    69	  displayName: string;
    70	  uri: string;
    71	  identifier?: Array<{
    72	    mbid?: string;
    73	    href?: string;
    74	  }>;
    75	  onTourUntil?: string;
    76	}
    77	
    78	interface SongkickVenue {
    79	  id: number;
    80	  displayName: string;
    81	  uri: string;
    82	  lng: number;
    83	  lat: number;
    84	  metroArea: {
    85	    displayName: string;
    86	    country: {
    87	      displayName: string;
    88	    };
    89	    state?: {
    90	      displayName: string;
    91	    };
    92	    id: number;
    93	    uri: string;
    94	  };
    95	  street?: string;
    96	  zip?: string;
    97	  phone?: string;
    98	  website?: string;
    99	  capacity?: number;
   100	  description?: string;
   101	}
   102	
   103	/**
   104	 * Rate limiting helper for Songkick API
   105	 */
   106	class RateLimit {
   107	  private requests: number[] = [];
   108	  private maxRequests = 60; // 60 requests per minute
   109	  private windowMs = 60 * 1000; // 1 minute
   110	
   111	  async waitIfNeeded(): Promise<void> {
   112	    const now = Date.now();
   113	    this.requests = this.requests.filter(time => now - time < this.windowMs);
   114	    
   115	    if (this.requests.length >= this.maxRequests) {
   116	      const oldestRequest = Math.min(...this.requests);
   117	      const waitTime = this.windowMs - (now - oldestRequest);
   118	      if (waitTime > 0) {
   119	        console.log(`Rate limit reached, waiting ${waitTime}ms`);
   120	        await new Promise(resolve => setTimeout(resolve, waitTime));
   121	      }
   122	    }
   123	    
   124	    this.requests.push(now);
   125	  }
   126	}
   127	
   128	const rateLimit = new RateLimit();
   129	
   130	/**
   131	 * Supabase Edge Function to ingest concerts from Songkick API
   132	 * Fetches concerts from Songkick Events API and stores them in the database
   133	 */
   134	serve(async (req) => {
   135	  try {
   136	    // Initialize Supabase client
   137	    const supabase = createClient<Database>(
   138	      Deno.env.get('SUPABASE_URL') ?? '',
   139	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   140	    );
   141	
   142	    // Get API key from environment variables
   143	    const apiKey = Deno.env.get('SONGKICK_API_KEY');
   144	    if (!apiKey) {
   145	      return new Response(
   146	        JSON.stringify({ error: 'Songkick API key not configured' }),
   147	        { status: 500, headers: { 'Content-Type': 'application/json' } }
   148	      );
   149	    }
   150	
   151	    // Get query parameters
   152	    const url = new URL(req.url);
   153	    const location = url.searchParams.get('location') || 'sk:26330'; // San Francisco metro area ID
   154	    const minDate = url.searchParams.get('min_date') || new Date().toISOString().split('T')[0];
   155	    const maxDate = url.searchParams.get('max_date') || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
   156	
   157	    console.log(`Fetching Songkick events for location: ${location}`);
   158	
   159	    // Apply rate limiting
   160	    await rateLimit.waitIfNeeded();
   161	
   162	    // Construct Songkick API URL
   163	    const songkickUrl = new URL('https://api.songkick.com/api/3.0/metro_areas/' + location + '/calendar.json');
   164	    songkickUrl.searchParams.set('apikey', apiKey);
   165	    songkickUrl.searchParams.set('min_date', minDate);
   166	    songkickUrl.searchParams.set('max_date', maxDate);
   167	    songkickUrl.searchParams.set('per_page', '50');
   168	
   169	    // Fetch events from Songkick
   170	    const response = await fetch(songkickUrl.toString(), {
   171	      headers: {
   172	        'Accept': 'application/json',
   173	        'User-Agent': 'SceneScout/1.0'
   174	      }
   175	    });
   176	
   177	    if (!response.ok) {
   178	      console.error(`Songkick API error: ${response.status} ${response.statusText}`);
   179	      const errorBody = await response.text();
   180	      console.error('Error response:', errorBody);
   181	      return new Response(
   182	        JSON.stringify({ 
   183	          error: 'Failed to fetch from Songkick API',
   184	          status: response.status,
   185	          statusText: response.statusText,
   186	          details: errorBody
   187	        }),
   188	        { status: response.status, headers: { 'Content-Type': 'application/json' } }
   189	      );
   190	    }
   191	
   192	    const data: SongkickResponse = await response.json();
   193	    const events = data.resultsPage?.results?.event || [];
   194	
   195	    console.log(`Found ${events.length} concerts from Songkick`);
   196	
   197	    // Process and insert events
   198	    const processedEvents = [];
   199	    const processedVenues = [];
   200	    const processedArtists = [];
   201	
   202	    for (const event of events) {
   203	      try {
   204	        // Process venue
   205	        let venueId = null;
   206	        if (event.venue) {
   207	          const venue = event.venue;
   208	          
   209	          const venueData = {
   210	            id: venue.id.toString(),
   211	            name: venue.displayName,
   212	            address: '', // Songkick doesn't provide detailed address
   213	            city: venue.metroArea?.displayName?.split(',')[0] || '',
   214	            state: venue.metroArea?.state?.displayName || '',
   215	            postal_code: '',
   216	            country: venue.metroArea?.country?.displayName || 'United States',
   217	            latitude: venue.lat || 0,
   218	            longitude: venue.lng || 0,
   219	            phone: null,
   220	            website: null,
   221	            timezone: 'America/Los_Angeles', // Default, would need geocoding for accurate timezone
   222	            capacity: null,
   223	            venue_type: 'music_venue',
   224	            amenities: [],
   225	            accessibility_features: [],
   226	            parking_info: null,
   227	            source: 'songkick',
   228	            external_id: venue.id.toString(),
   229	            last_updated: new Date().toISOString()
   230	          };
   231	
   232	          processedVenues.push(venueData);
   233	          venueId = venue.id.toString();
   234	        }
   235	
   236	        // Process artists
   237	        const artistNames = [];
   238	        if (event.performance) {
   239	          for (const performance of event.performance) {
   240	            const artist = performance.artist;
   241	            artistNames.push(artist.displayName);
   242	            
   243	            const artistData = {
   244	              id: artist.id.toString(),
   245	              name: artist.displayName,
   246	              genre: [],
   247	              description: '',
   248	              image_url: null,
   249	              external_links: {
   250	                songkick: artist.uri,
   251	                musicbrainz: artist.identifier?.find(id => id.mbid)?.mbid || null
   252	              },
   253	              source: 'songkick',
   254	              external_id: artist.id.toString(),
   255	              last_updated: new Date().toISOString()
   256	            };
   257	
   258	            processedArtists.push(artistData);
   259	          }
   260	        }
   261	
   262	        // Process event
   263	        const headliner = event.performance?.[0]?.artist?.displayName || 'Unknown Artist';
   264	        const eventTitle = artistNames.length > 1 
   265	          ? `${headliner} with ${artistNames.slice(1).join(', ')}`
   266	          : headliner;
   267	
   268	        const eventData = {
   269	          id: event.id.toString(),
   270	          title: eventTitle,
   271	          description: `Live concert featuring ${artistNames.join(', ')}`,
   272	          start_time: event.start?.datetime || `${event.start?.date}T20:00:00`,
   273	          end_time: null, // Songkick doesn't provide end times
   274	          timezone: 'America/Los_Angeles', // Default, would need venue-specific timezone
   275	          venue_id: venueId,
   276	          category: 'Music',
   277	          subcategory: 'Concert',
   278	          tags: ['live music', 'concert', ...artistNames],
   279	          price_min: null, // Songkick doesn't provide pricing
   280	          price_max: null,
   281	          price_currency: 'USD',
   282	          ticket_url: `https://www.songkick.com${event.uri}`,
   283	          image_url: null, // Would need to fetch from artist or venue
   284	          source: 'songkick',
   285	          external_id: event.id.toString(),
   286	          status: event.status === 'ok' ? 'active' : 'inactive',
   287	          age_restriction: event.ageRestriction || null,
   288	          last_updated: new Date().toISOString(),
   289	          hotness_score: Math.min(Math.round((event.popularity || 0) * 10), 100) // Convert to 0-100 scale
   290	        };
   291	
   292	        processedEvents.push(eventData);
   293	
   294	      } catch (error) {
   295	        console.error(`Error processing event ${event.id}:`, error);
   296	        continue;
   297	      }
   298	    }
   299	
   300	    // Insert artists first
   301	    if (processedArtists.length > 0) {
   302	      const { error: artistError } = await supabase
   303	        .from('artists')
   304	        .upsert(processedArtists, { 
   305	          onConflict: 'external_id,source',
   306	          ignoreDuplicates: false 
   307	        });
   308	
   309	      if (artistError) {
   310	        console.error('Error inserting artists:', artistError);
   311	      } else {
   312	        console.log(`Inserted/updated ${processedArtists.length} artists`);
   313	      }
   314	    }
   315	
   316	    // Insert venues
   317	    if (processedVenues.length > 0) {
   318	      const { error: venueError } = await supabase
   319	        .from('venues')
   320	        .upsert(processedVenues, { 
   321	          onConflict: 'external_id,source',
   322	          ignoreDuplicates: false 
   323	        });
   324	
   325	      if (venueError) {
   326	        console.error('Error inserting venues:', venueError);
   327	      } else {
   328	        console.log(`Inserted/updated ${processedVenues.length} venues`);
   329	      }
   330	    }
   331	
   332	    // Insert events
   333	    if (processedEvents.length > 0) {
   334	      const { error: eventError } = await supabase
   335	        .from('events')
   336	        .upsert(processedEvents, { 
   337	          onConflict: 'external_id,source',
   338	          ignoreDuplicates: false 
   339	        });
   340	
   341	      if (eventError) {
   342	        console.error('Error inserting events:', eventError);
   343	        return new Response(
   344	          JSON.stringify({ 
   345	            error: 'Failed to insert events into database',
   346	            details: eventError 
   347	          }),
   348	          { status: 500, headers: { 'Content-Type': 'application/json' } }
   349	        );
   350	      }
   351	
   352	      console.log(`Inserted/updated ${processedEvents.length} events`);
   353	
   354	      // Create event-artist relationships
   355	      const eventArtistRelations = [];
   356	      for (const event of events) {
   357	        if (event.performance) {
   358	          for (const performance of event.performance) {
   359	            eventArtistRelations.push({
   360	              event_id: event.id.toString(),
   361	              artist_id: performance.artist.id.toString(),
   362	              billing_order: performance.billingIndex || 0,
   363	              role: performance.billing === 'headline' ? 'headliner' : 'support'
   364	            });
   365	          }
   366	        }
   367	      }
   368	
   369	      if (eventArtistRelations.length > 0) {
   370	        const { error: relationError } = await supabase
   371	          .from('event_artists')
   372	          .upsert(eventArtistRelations, { 
   373	            onConflict: 'event_id,artist_id',
   374	            ignoreDuplicates: true 
   375	          });
   376	
   377	        if (relationError) {
   378	          console.error('Error inserting event-artist relations:', relationError);
   379	        } else {
   380	          console.log(`Inserted ${eventArtistRelations.length} event-artist relationships`);
   381	        }
   382	      }
   383	    }
   384	
   385	    return new Response(
   386	      JSON.stringify({
   387	        success: true,
   388	        eventsProcessed: processedEvents.length,
   389	        venuesProcessed: processedVenues.length,
   390	        artistsProcessed: processedArtists.length,
   391	        totalFound: events.length
   392	      }),
   393	      { status: 200, headers: { 'Content-Type': 'application/json' } }
   394	    );
   395	
   396	  } catch (error) {
   397	    console.error('Error in ingest_songkick function:', error);
   398	    return new Response(
   399	      JSON.stringify({ 
   400	        error: 'Internal server error',
   401	        details: error.message 
   402	      }),
   403	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   404	    );
   405	  }
   406	});
=== FILE: ./supabase/functions/ingest_ticketmaster//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface TicketmasterEvent {
     6	  id: string;
     7	  name: string;
     8	  type: string;
     9	  url: string;
    10	  locale: string;
    11	  images: Array<{
    12	    ratio: string;
    13	    url: string;
    14	    width: number;
    15	    height: number;
    16	    fallback: boolean;
    17	  }>;
    18	  sales: {
    19	    public: {
    20	      startDateTime: string;
    21	      startTBD: boolean;
    22	      startTBA: boolean;
    23	      endDateTime: string;
    24	    };
    25	  };
    26	  dates: {
    27	    start: {
    28	      localDate: string;
    29	      localTime: string;
    30	      dateTime: string;
    31	      dateTBD: boolean;
    32	      dateTBA: boolean;
    33	      timeTBA: boolean;
    34	      noSpecificTime: boolean;
    35	    };
    36	    timezone: string;
    37	    status: {
    38	      code: string;
    39	    };
    40	    spanMultipleDays: boolean;
    41	  };
    42	  classifications: Array<{
    43	    primary: boolean;
    44	    segment: {
    45	      id: string;
    46	      name: string;
    47	    };
    48	    genre: {
    49	      id: string;
    50	      name: string;
    51	    };
    52	    subGenre: {
    53	      id: string;
    54	      name: string;
    55	    };
    56	  }>;
    57	  promoter?: {
    58	    id: string;
    59	    name: string;
    60	    description: string;
    61	  };
    62	  promoters?: Array<{
    63	    id: string;
    64	    name: string;
    65	    description: string;
    66	  }>;
    67	  info?: string;
    68	  pleaseNote?: string;
    69	  priceRanges?: Array<{
    70	    type: string;
    71	    currency: string;
    72	    min: number;
    73	    max: number;
    74	  }>;
    75	  products?: Array<{
    76	    name: string;
    77	    id: string;
    78	    url: string;
    79	    type: string;
    80	    classifications: Array<{
    81	      primary: boolean;
    82	      segment: {
    83	        id: string;
    84	        name: string;
    85	      };
    86	      genre: {
    87	        id: string;
    88	        name: string;
    89	      };
    90	      subGenre: {
    91	        id: string;
    92	        name: string;
    93	      };
    94	    }>;
    95	  }>;
    96	  seatmap?: {
    97	    staticUrl: string;
    98	  };
    99	  accessibility?: {
   100	    ticketLimit?: number;
   101	  };
   102	  ticketLimit?: {
   103	    info: string;
   104	  };
   105	  ageRestrictions?: {
   106	    legalAgeEnforced: boolean;
   107	  };
   108	  ticketing?: {
   109	    safeTix: {
   110	      enabled: boolean;
   111	    };
   112	  };
   113	  _links: {
   114	    self: {
   115	      href: string;
   116	    };
   117	    attractions?: Array<{
   118	      href: string;
   119	    }>;
   120	    venues?: Array<{
   121	      href: string;
   122	    }>;
   123	  };
   124	  _embedded?: {
   125	    venues?: Array<{
   126	      name: string;
   127	      type: string;
   128	      id: string;
   129	      test: boolean;
   130	      url?: string;
   131	      locale: string;
   132	      images?: Array<{
   133	        ratio: string;
   134	        url: string;
   135	        width: number;
   136	        height: number;
   137	        fallback: boolean;
   138	      }>;
   139	      distance?: number;
   140	      units?: string;
   141	      postalCode?: string;
   142	      timezone: string;
   143	      city: {
   144	        name: string;
   145	      };
   146	      state: {
   147	        name: string;
   148	        stateCode: string;
   149	      };
   150	      country: {
   151	        name: string;
   152	        countryCode: string;
   153	      };
   154	      address: {
   155	        line1: string;
   156	      };
   157	      location: {
   158	        longitude: string;
   159	        latitude: string;
   160	      };
   161	      markets?: Array<{
   162	        name: string;
   163	        id: string;
   164	      }>;
   165	      dmas?: Array<{
   166	        id: number;
   167	      }>;
   168	      social?: {
   169	        twitter: {
   170	          handle: string;
   171	        };
   172	      };
   173	      boxOfficeInfo?: {
   174	        phoneNumberDetail: string;
   175	        openHoursDetail: string;
   176	        acceptedPaymentDetail: string;
   177	        willCallDetail: string;
   178	      };
   179	      parkingDetail?: string;
   180	      accessibleSeatingDetail?: string;
   181	      generalInfo?: {
   182	        generalRule: string;
   183	        childRule: string;
   184	      };
   185	      upcomingEvents?: {
   186	        ticketmaster?: number;
   187	        _total: number;
   188	        _filtered: number;
   189	      };
   190	      ada?: {
   191	        adaPhones: string;
   192	        adaCustomCopy: string;
   193	        adaHours: string;
   194	      };
   195	      _links: {
   196	        self: {
   197	          href: string;
   198	        };
   199	      };
   200	    }>;
   201	    attractions?: Array<{
   202	      name: string;
   203	      type: string;
   204	      id: string;
   205	      test: boolean;
   206	      url?: string;
   207	      locale: string;
   208	      externalLinks?: {
   209	        youtube?: Array<{
   210	          url: string;
   211	        }>;
   212	        twitter?: Array<{
   213	          url: string;
   214	        }>;
   215	        itunes?: Array<{
   216	          url: string;
   217	        }>;
   218	        lastfm?: Array<{
   219	          url: string;
   220	        }>;
   221	        facebook?: Array<{
   222	          url: string;
   223	        }>;
   224	        spotify?: Array<{
   225	          url: string;
   226	        }>;
   227	        musicbrainz?: Array<{
   228	          id: string;
   229	        }>;
   230	        homepage?: Array<{
   231	          url: string;
   232	        }>;
   233	      };
   234	      images?: Array<{
   235	        ratio: string;
   236	        url: string;
   237	        width: number;
   238	        height: number;
   239	        fallback: boolean;
   240	      }>;
   241	      classifications?: Array<{
   242	        primary: boolean;
   243	        segment: {
   244	          id: string;
   245	          name: string;
   246	        };
   247	        genre: {
   248	          id: string;
   249	          name: string;
   250	        };
   251	        subGenre: {
   252	          id: string;
   253	          name: string;
   254	        };
   255	        type: {
   256	          id: string;
   257	          name: string;
   258	        };
   259	        subType: {
   260	          id: string;
   261	          name: string;
   262	        };
   263	        family: boolean;
   264	      }>;
   265	      upcomingEvents?: {
   266	        ticketmaster?: number;
   267	        _total: number;
   268	        _filtered: number;
   269	      };
   270	      _links: {
   271	        self: {
   272	          href: string;
   273	        };
   274	      };
   275	    }>;
   276	  };
   277	}
   278	
   279	interface TicketmasterResponse {
   280	  _embedded?: {
   281	    events: TicketmasterEvent[];
   282	  };
   283	  _links: {
   284	    first?: { href: string };
   285	    self: { href: string };
   286	    next?: { href: string };
   287	    last?: { href: string };
   288	  };
   289	  page: {
   290	    size: number;
   291	    totalElements: number;
   292	    totalPages: number;
   293	    number: number;
   294	  };
   295	}
   296	
   297	/**
   298	 * Supabase Edge Function to ingest events from Ticketmaster API
   299	 * Fetches events from Ticketmaster Discovery API and stores them in the database
   300	 */
   301	serve(async (req) => {
   302	  try {
   303	    // Initialize Supabase client
   304	    const supabase = createClient<Database>(
   305	      Deno.env.get('SUPABASE_URL') ?? '',
   306	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   307	    );
   308	
   309	    // Get API key from environment variables
   310	    const apiKey = Deno.env.get('TICKETMASTER_API_KEY');
   311	    if (!apiKey) {
   312	      return new Response(
   313	        JSON.stringify({ error: 'Ticketmaster API key not configured' }),
   314	        { status: 500, headers: { 'Content-Type': 'application/json' } }
   315	      );
   316	    }
   317	
   318	    // Get query parameters
   319	    const url = new URL(req.url);
   320	    const city = url.searchParams.get('city') || 'San Francisco';
   321	    const stateCode = url.searchParams.get('stateCode') || 'CA';
   322	    const startDateTime = url.searchParams.get('startDateTime') || new Date().toISOString();
   323	    const size = parseInt(url.searchParams.get('size') || '200');
   324	    const keyword = url.searchParams.get('keyword') || '';
   325	
   326	    console.log(`Fetching Ticketmaster events for ${city}, ${stateCode}`);
   327	
   328	    // Construct Ticketmaster API URL
   329	    const ticketmasterUrl = new URL('https://app.ticketmaster.com/discovery/v2/events.json');
   330	    ticketmasterUrl.searchParams.set('apikey', apiKey);
   331	    ticketmasterUrl.searchParams.set('city', city);
   332	    ticketmasterUrl.searchParams.set('stateCode', stateCode);
   333	    ticketmasterUrl.searchParams.set('startDateTime', startDateTime);
   334	    ticketmasterUrl.searchParams.set('size', size.toString());
   335	    ticketmasterUrl.searchParams.set('sort', 'date,asc');
   336	    
   337	    if (keyword) {
   338	      ticketmasterUrl.searchParams.set('keyword', keyword);
   339	    }
   340	
   341	    // Fetch events from Ticketmaster
   342	    const response = await fetch(ticketmasterUrl.toString(), {
   343	      headers: {
   344	        'Accept': 'application/json',
   345	        'User-Agent': 'SceneScout/1.0'
   346	      }
   347	    });
   348	
   349	    if (!response.ok) {
   350	      console.error(`Ticketmaster API error: ${response.status} ${response.statusText}`);
   351	      return new Response(
   352	        JSON.stringify({ 
   353	          error: 'Failed to fetch from Ticketmaster API',
   354	          status: response.status,
   355	          statusText: response.statusText
   356	        }),
   357	        { status: response.status, headers: { 'Content-Type': 'application/json' } }
   358	      );
   359	    }
   360	
   361	    const data: TicketmasterResponse = await response.json();
   362	    const events = data._embedded?.events || [];
   363	
   364	    console.log(`Found ${events.length} events from Ticketmaster`);
   365	
   366	    // Process and insert events
   367	    const processedEvents = [];
   368	    const processedVenues = [];
   369	
   370	    for (const event of events) {
   371	      try {
   372	        // Process venue if it exists
   373	        let venueId = null;
   374	        if (event._embedded?.venues?.[0]) {
   375	          const venue = event._embedded.venues[0];
   376	          
   377	          const venueData = {
   378	            id: venue.id,
   379	            name: venue.name,
   380	            address: venue.address?.line1 || '',
   381	            city: venue.city?.name || '',
   382	            state: venue.state?.name || '',
   383	            postal_code: venue.postalCode || '',
   384	            country: venue.country?.name || 'United States',
   385	            latitude: parseFloat(venue.location?.latitude || '0'),
   386	            longitude: parseFloat(venue.location?.longitude || '0'),
   387	            phone: venue.boxOfficeInfo?.phoneNumberDetail || null,
   388	            website: venue.url || null,
   389	            timezone: venue.timezone || 'America/Los_Angeles',
   390	            capacity: null,
   391	            venue_type: venue.type || 'unknown',
   392	            amenities: [],
   393	            accessibility_features: venue.accessibleSeatingDetail ? [venue.accessibleSeatingDetail] : [],
   394	            parking_info: venue.parkingDetail || null,
   395	            source: 'ticketmaster',
   396	            external_id: venue.id,
   397	            last_updated: new Date().toISOString()
   398	          };
   399	
   400	          processedVenues.push(venueData);
   401	          venueId = venue.id;
   402	        }
   403	
   404	        // Process event
   405	        const eventStart = event.dates?.start?.dateTime || 
   406	          `${event.dates?.start?.localDate}T${event.dates?.start?.localTime || '19:00:00'}`;
   407	        
   408	        const eventData = {
   409	          id: event.id,
   410	          title: event.name,
   411	          description: event.info || event.pleaseNote || '',
   412	          start_time: eventStart,
   413	          end_time: null, // Ticketmaster doesn't provide end times
   414	          timezone: event.dates?.timezone || 'America/Los_Angeles',
   415	          venue_id: venueId,
   416	          category: event.classifications?.[0]?.segment?.name || 'Entertainment',
   417	          subcategory: event.classifications?.[0]?.genre?.name || null,
   418	          tags: [
   419	            ...(event.classifications?.map(c => c.genre?.name).filter(Boolean) || []),
   420	            ...(event.classifications?.map(c => c.subGenre?.name).filter(Boolean) || [])
   421	          ],
   422	          price_min: event.priceRanges?.[0]?.min || null,
   423	          price_max: event.priceRanges?.[0]?.max || null,
   424	          price_currency: event.priceRanges?.[0]?.currency || 'USD',
   425	          ticket_url: event.url,
   426	          image_url: event.images?.find(img => img.ratio === '16_9')?.url || 
   427	                     event.images?.[0]?.url || null,
   428	          source: 'ticketmaster',
   429	          external_id: event.id,
   430	          status: event.dates?.status?.code === 'onsale' ? 'active' : 'inactive',
   431	          age_restriction: event.ageRestrictions?.legalAgeEnforced ? '21+' : null,
   432	          last_updated: new Date().toISOString(),
   433	          hotness_score: 0
   434	        };
   435	
   436	        processedEvents.push(eventData);
   437	
   438	      } catch (error) {
   439	        console.error(`Error processing event ${event.id}:`, error);
   440	        continue;
   441	      }
   442	    }
   443	
   444	    // Insert venues first (upsert to avoid duplicates)
   445	    if (processedVenues.length > 0) {
   446	      const { error: venueError } = await supabase
   447	        .from('venues')
   448	        .upsert(processedVenues, { 
   449	          onConflict: 'external_id,source',
   450	          ignoreDuplicates: false 
   451	        });
   452	
   453	      if (venueError) {
   454	        console.error('Error inserting venues:', venueError);
   455	      } else {
   456	        console.log(`Inserted/updated ${processedVenues.length} venues`);
   457	      }
   458	    }
   459	
   460	    // Insert events (upsert to avoid duplicates)
   461	    if (processedEvents.length > 0) {
   462	      const { error: eventError } = await supabase
   463	        .from('events')
   464	        .upsert(processedEvents, { 
   465	          onConflict: 'external_id,source',
   466	          ignoreDuplicates: false 
   467	        });
   468	
   469	      if (eventError) {
   470	        console.error('Error inserting events:', eventError);
   471	        return new Response(
   472	          JSON.stringify({ 
   473	            error: 'Failed to insert events into database',
   474	            details: eventError 
   475	          }),
   476	          { status: 500, headers: { 'Content-Type': 'application/json' } }
   477	        );
   478	      }
   479	
   480	      console.log(`Inserted/updated ${processedEvents.length} events`);
   481	    }
   482	
   483	    return new Response(
   484	      JSON.stringify({
   485	        success: true,
   486	        eventsProcessed: processedEvents.length,
   487	        venuesProcessed: processedVenues.length,
   488	        totalFound: events.length
   489	      }),
   490	      { status: 200, headers: { 'Content-Type': 'application/json' } }
   491	    );
   492	
   493	  } catch (error) {
   494	    console.error('Error in ingest_ticketmaster function:', error);
   495	    return new Response(
   496	      JSON.stringify({ 
   497	        error: 'Internal server error',
   498	        details: error.message 
   499	      }),
   500	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   501	    );
   502	  }
   503	});
=== FILE: ./supabase/functions/og-event//index.ts ===
     1	import { serve } from "https://deno.land/std@0.224.0/http/server.ts"
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2"
     3	
     4	// Simple OG: render SVG and return as PNG via resvg-wasm
     5	import satori from "https://esm.sh/satori@0.10.14"
     6	import initWasm, { Resvg } from "https://esm.sh/@resvg/resvg-wasm@2.6.2"
     7	// @ts-ignore
     8	import wasm from "https://cdn.jsdelivr.net/npm/@resvg/resvg-wasm@2.6.2/index_bg.wasm"
     9	
    10	await initWasm(wasm)
    11	
    12	serve(async (req) => {
    13	  const sp = new URL(req.url).searchParams
    14	  const id = sp.get('id')
    15	  const supabase = createClient(Deno.env.get("SUPABASE_URL")!, Deno.env.get("SUPABASE_ANON_KEY")!)
    16	  let title = 'SceneScout', subtitle = 'Don’t think, just go.'
    17	  if (id) {
    18	    const { data } = await supabase.from('events').select('title,starts_at').eq('id', id).single()
    19	    title = data?.title || title
    20	    subtitle = data?.starts_at ? new Date(data.starts_at).toLocaleString() : subtitle
    21	  }
    22	  const svg = await satori(
    23	    { type: 'div', props: { children: [
    24	      { type:'div', props:{ children:'SceneScout', style:{ fontSize: 22, opacity: 0.9 } } },
    25	      { type:'div', props:{ children:[
    26	        { type:'div', props:{ children: title, style:{ fontSize: 64, fontWeight: 700 } } },
    27	        { type:'div', props:{ children: subtitle, style:{ fontSize: 28, opacity: 0.85 } } },
    28	      ], style: { display:'flex', flexDirection:'column', gap: 12 } } },
    29	      { type:'div', props:{ children:'Don’t think, just go.', style:{ fontSize: 22, opacity: 0.8 } } }
    30	    ], style: { width: 1200, height: 630, color:'#fff', background: 'linear-gradient(135deg, #0B0B0C 0%, #111827 100%)', display:'flex', flexDirection:'column', justifyContent:'space-between', padding: 40 } } },
    31	    { width: 1200, height: 630, fonts: [] }
    32	  )
    33	  const png = new Resvg(svg).render().asPng()
    34	  return new Response(png, { headers: { 'content-type': 'image/png', 'cache-control': 'public, max-age=86400, s-maxage=86400' } })
    35	})

=== FILE: ./supabase/functions/push-send//index.ts ===
     1	// Note: for production, consider sending push from a Node worker using web-push.
     2	// This function is left as a placeholder to call an external sender or integrate a Deno web-push lib.
     3	import { serve } from "https://deno.land/std@0.224.0/http/server.ts"
     4	serve(() => new Response(JSON.stringify({ ok: false, note: "Implement server-side push sender (Node) as per v14 spec." }), { headers:{ "content-type":"application/json" } }))

=== FILE: ./supabase/functions/push-subscribe//index.ts ===
     1	import { serve } from "https://deno.land/std@0.224.0/http/server.ts"
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2"
     3	serve(async (req) => {
     4	  const body = await req.json().catch(()=>null)
     5	  if (!body?.user_id || !body?.endpoint || !body?.p256dh || !body?.auth) return new Response('missing fields', { status: 400 })
     6	  const supabase = createClient(Deno.env.get("SUPABASE_URL")!, Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!)
     7	  const { error } = await supabase.from("push_subscriptions").upsert(body)
     8	  if (error) return new Response(error.message, { status: 400 })
     9	  return new Response('ok')
    10	})

=== FILE: ./supabase/functions/reminders//index.ts ===
     1	import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
     2	import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
     3	import { Database } from "../_shared/types.ts";
     4	
     5	interface ReminderEvent {
     6	  id: string;
     7	  title: string;
     8	  start_time: string;
     9	  timezone: string;
    10	  venue_id: string;
    11	  ticket_url: string;
    12	  image_url: string;
    13	  venue?: {
    14	    id: string;
    15	    name: string;
    16	    address: string;
    17	    city: string;
    18	    state: string;
    19	  };
    20	}
    21	
    22	interface UserReminder {
    23	  id: string;
    24	  user_id: string;
    25	  event_id: string;
    26	  reminder_time: string;
    27	  notification_method: 'push' | 'email' | 'both';
    28	  status: 'pending' | 'sent' | 'failed';
    29	  user: {
    30	    id: string;
    31	    email: string;
    32	    push_token: string;
    33	    timezone: string;
    34	    notification_preferences: any;
    35	  };
    36	  event: ReminderEvent;
    37	}
    38	
    39	interface PushNotification {
    40	  to: string;
    41	  title: string;
    42	  body: string;
    43	  data?: any;
    44	  sound?: string;
    45	  badge?: number;
    46	}
    47	
    48	interface EmailReminder {
    49	  to: string;
    50	  subject: string;
    51	  html: string;
    52	  text: string;
    53	}
    54	
    55	/**
    56	 * Send push notification using Expo Push API
    57	 */
    58	async function sendPushNotification(notification: PushNotification): Promise<boolean> {
    59	  try {
    60	    const response = await fetch('https://exp.host/--/api/v2/push/send', {
    61	      method: 'POST',
    62	      headers: {
    63	        'Accept': 'application/json',
    64	        'Accept-Encoding': 'gzip, deflate',
    65	        'Content-Type': 'application/json',
    66	      },
    67	      body: JSON.stringify([notification])
    68	    });
    69	
    70	    if (!response.ok) {
    71	      const error = await response.text();
    72	      console.error('Failed to send push notification:', error);
    73	      return false;
    74	    }
    75	
    76	    const result = await response.json();
    77	    console.log('Push notification result:', result);
    78	    
    79	    return result.data?.[0]?.status === 'ok';
    80	  } catch (error) {
    81	    console.error('Error sending push notification:', error);
    82	    return false;
    83	  }
    84	}
    85	
    86	/**
    87	 * Send email reminder using Resend API
    88	 */
    89	async function sendEmailReminder(email: EmailReminder): Promise<boolean> {
    90	  const resendApiKey = Deno.env.get('RESEND_API_KEY');
    91	  if (!resendApiKey) {
    92	    console.error('Resend API key not configured');
    93	    return false;
    94	  }
    95	
    96	  try {
    97	    const response = await fetch('https://api.resend.com/emails', {
    98	      method: 'POST',
    99	      headers: {
   100	        'Authorization': `Bearer ${resendApiKey}`,
   101	        'Content-Type': 'application/json'
   102	      },
   103	      body: JSON.stringify({
   104	        from: 'SceneScout Reminders <reminders@scenescout.app>',
   105	        to: [email.to],
   106	        subject: email.subject,
   107	        html: email.html,
   108	        text: email.text
   109	      })
   110	    });
   111	
   112	    if (!response.ok) {
   113	      const error = await response.text();
   114	      console.error('Failed to send email reminder:', error);
   115	      return false;
   116	    }
   117	
   118	    return true;
   119	  } catch (error) {
   120	    console.error('Error sending email reminder:', error);
   121	    return false;
   122	  }
   123	}
   124	
   125	/**
   126	 * Generate email reminder HTML
   127	 */
   128	function generateReminderEmail(reminder: UserReminder): EmailReminder {
   129	  const event = reminder.event;
   130	  const venue = event.venue;
   131	  const startTime = new Date(event.start_time);
   132	  
   133	  const dateStr = startTime.toLocaleDateString('en-US', { 
   134	    weekday: 'long', 
   135	    year: 'numeric', 
   136	    month: 'long', 
   137	    day: 'numeric' 
   138	  });
   139	  const timeStr = startTime.toLocaleTimeString('en-US', { 
   140	    hour: 'numeric', 
   141	    minute: '2-digit',
   142	    timeZoneName: 'short'
   143	  });
   144	
   145	  const subject = `🔔 Reminder: ${event.title} starts soon!`;
   146	  
   147	  const html = `
   148	<!DOCTYPE html>
   149	<html>
   150	<head>
   151	  <meta charset="utf-8">
   152	  <meta name="viewport" content="width=device-width, initial-scale=1.0">
   153	  <title>Event Reminder - SceneScout</title>
   154	  <style>
   155	    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
   156	    .header { text-align: center; margin-bottom: 30px; }
   157	    .event-card { background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0; border: 2px solid #007bff; }
   158	    .cta-button { background: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-size: 16px; margin: 10px 5px; }
   159	    .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; font-size: 12px; color: #666; }
   160	  </style>
   161	</head>
   162	<body>
   163	  <div class="header">
   164	    <h1 style="color: #007bff; margin: 0;">🔔 Event Reminder</h1>
   165	  </div>
   166	
   167	  <div class="event-card">
   168	    ${event.image_url ? `<img src="${event.image_url}" alt="${event.title}" style="width: 100%; max-width: 400px; height: 200px; object-fit: cover; border-radius: 6px; margin-bottom: 15px;">` : ''}
   169	    
   170	    <h2 style="color: #1a1a1a; margin: 0 0 15px 0;">${event.title}</h2>
   171	    
   172	    <p style="font-size: 16px; margin: 10px 0;">
   173	      <strong>📅 ${dateStr}</strong><br>
   174	      <strong>🕐 ${timeStr}</strong>
   175	    </p>
   176	    
   177	    ${venue ? `<p style="font-size: 16px; margin: 10px 0;">
   178	      <strong>📍 ${venue.name}</strong><br>
   179	      ${venue.address}, ${venue.city}, ${venue.state}
   180	    </p>` : ''}
   181	
   182	    <div style="text-align: center; margin: 25px 0;">
   183	      <a href="${event.ticket_url}" class="cta-button">View Event Details</a>
   184	      ${venue ? `<a href="https://maps.google.com/?q=${encodeURIComponent(venue.address + ', ' + venue.city + ', ' + venue.state)}" class="cta-button" style="background: #28a745;">Get Directions</a>` : ''}
   185	    </div>
   186	  </div>
   187	
   188	  <div style="text-align: center; margin: 30px 0;">
   189	    <p style="font-size: 18px; color: #007bff;">
   190	      ✨ Have a great time at the event!
   191	    </p>
   192	  </div>
   193	
   194	  <div class="footer">
   195	    <p>This is a reminder for an event you saved on SceneScout.</p>
   196	    <p>
   197	      <a href="https://scenescout.app/reminders">Manage Reminders</a> | 
   198	      <a href="https://scenescout.app/preferences">Update Preferences</a>
   199	    </p>
   200	    <p>&copy; 2024 SceneScout. All rights reserved.</p>
   201	  </div>
   202	</body>
   203	</html>
   204	  `;
   205	
   206	  const text = `
   207	Event Reminder - SceneScout
   208	
   209	${event.title}
   210	
   211	Date: ${dateStr}
   212	Time: ${timeStr}
   213	${venue ? `Venue: ${venue.name}\nAddress: ${venue.address}, ${venue.city}, ${venue.state}` : ''}
   214	
   215	View event details: ${event.ticket_url}
   216	${venue ? `Get directions: https://maps.google.com/?q=${encodeURIComponent(venue.address + ', ' + venue.city + ', ' + venue.state)}` : ''}
   217	
   218	Have a great time at the event!
   219	
   220	Manage your reminders at https://scenescout.app/reminders
   221	  `;
   222	
   223	  return {
   224	    to: reminder.user.email,
   225	    subject,
   226	    html,
   227	    text
   228	  };
   229	}
   230	
   231	/**
   232	 * Calculate time until event starts
   233	 */
   234	function getTimeUntilEvent(eventTime: string): string {
   235	  const now = new Date();
   236	  const event = new Date(eventTime);
   237	  const diff = event.getTime() - now.getTime();
   238	  
   239	  const hours = Math.floor(diff / (1000 * 60 * 60));
   240	  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
   241	  
   242	  if (hours > 24) {
   243	    const days = Math.floor(hours / 24);
   244	    return `${days} day${days !== 1 ? 's' : ''}`;
   245	  } else if (hours > 0) {
   246	    return `${hours}h ${minutes}m`;
   247	  } else {
   248	    return `${minutes} minutes`;
   249	  }
   250	}
   251	
   252	/**
   253	 * Supabase Edge Function to send event reminders via push notifications and email
   254	 * Processes pending reminders and sends them at the appropriate time
   255	 */
   256	serve(async (req) => {
   257	  try {
   258	    // Initialize Supabase client
   259	    const supabase = createClient<Database>(
   260	      Deno.env.get('SUPABASE_URL') ?? '',
   261	      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
   262	    );
   263	
   264	    // Get query parameters
   265	    const url = new URL(req.url);
   266	    const testMode = url.searchParams.get('test') === 'true';
   267	    const userEmail = url.searchParams.get('user_email');
   268	    const lookAheadMinutes = parseInt(url.searchParams.get('look_ahead') || '5');
   269	
   270	    console.log(`Processing event reminders ${testMode ? '(test mode)' : ''}`);
   271	
   272	    // Calculate time window for reminders to send
   273	    const now = new Date();
   274	    const windowEnd = new Date(now.getTime() + lookAheadMinutes * 60 * 1000);
   275	
   276	    // Get pending reminders that should be sent now
   277	    let remindersQuery = supabase
   278	      .from('user_reminders')
   279	      .select(`
   280	        id,
   281	        user_id,
   282	        event_id,
   283	        reminder_time,
   284	        notification_method,
   285	        status,
   286	        users!inner (
   287	          id,
   288	          email,
   289	          push_token,
   290	          timezone,
   291	          notification_preferences
   292	        ),
   293	        events!inner (
   294	          id,
   295	          title,
   296	          start_time,
   297	          timezone,
   298	          venue_id,
   299	          ticket_url,
   300	          image_url,
   301	          venues (
   302	            id,
   303	            name,
   304	            address,
   305	            city,
   306	            state
   307	          )
   308	        )
   309	      `)
   310	      .eq('status', 'pending')
   311	      .lte('reminder_time', windowEnd.toISOString())
   312	      .gte('reminder_time', new Date(now.getTime() - 60 * 60 * 1000).toISOString()); // Don't send reminders more than 1 hour late
   313	
   314	    // Filter for test mode
   315	    if (testMode && userEmail) {
   316	      remindersQuery = remindersQuery.eq('users.email', userEmail);
   317	    }
   318	
   319	    const { data: reminders, error: remindersError } = await remindersQuery;
   320	
   321	    if (remindersError) {
   322	      console.error('Error fetching reminders:', remindersError);
   323	      return new Response(
   324	        JSON.stringify({ error: 'Failed to fetch reminders', details: remindersError }),
   325	        { status: 500, headers: { 'Content-Type': 'application/json' } }
   326	      );
   327	    }
   328	
   329	    console.log(`Found ${reminders?.length || 0} reminders to process`);
   330	
   331	    const results = {
   332	      totalReminders: reminders?.length || 0,
   333	      pushSent: 0,
   334	      emailsSent: 0,
   335	      failed: 0,
   336	      errors: [] as string[]
   337	    };
   338	
   339	    // Process each reminder
   340	    for (const reminder of reminders || []) {
   341	      try {
   342	        console.log(`Processing reminder ${reminder.id} for event ${reminder.event_id}`);
   343	
   344	        const user = reminder.users;
   345	        const event = reminder.events;
   346	        const venue = event.venues;
   347	
   348	        // Validate reminder data
   349	        if (!user || !event) {
   350	          console.error(`Invalid reminder data for ${reminder.id}`);
   351	          results.errors.push(`Invalid reminder data for ${reminder.id}`);
   352	          continue;
   353	        }
   354	
   355	        // Check if event hasn't been cancelled
   356	        const { data: currentEvent } = await supabase
   357	          .from('events')
   358	          .select('status')
   359	          .eq('id', event.id)
   360	          .single();
   361	
   362	        if (currentEvent?.status !== 'active') {
   363	          console.log(`Skipping reminder for cancelled/inactive event ${event.id}`);
   364	          
   365	          // Mark reminder as completed since event is cancelled
   366	          await supabase
   367	            .from('user_reminders')
   368	            .update({ 
   369	              status: 'sent',
   370	              updated_at: new Date().toISOString()
   371	            })
   372	            .eq('id', reminder.id);
   373	          
   374	          continue;
   375	        }
   376	
   377	        const timeUntilEvent = getTimeUntilEvent(event.start_time);
   378	        let pushSent = false;
   379	        let emailSent = false;
   380	
   381	        // Send push notification if requested and user has push token
   382	        if (
   383	          (reminder.notification_method === 'push' || reminder.notification_method === 'both') &&
   384	          user.push_token &&
   385	          user.notification_preferences?.push_enabled
   386	        ) {
   387	          const pushNotification: PushNotification = {
   388	            to: user.push_token,
   389	            title: `🎭 ${event.title} starts in ${timeUntilEvent}`,
   390	            body: venue ? `at ${venue.name}` : 'Don\'t forget!',
   391	            data: {
   392	              eventId: event.id,
   393	              type: 'event_reminder',
   394	              url: event.ticket_url
   395	            },
   396	            sound: 'default',
   397	            badge: 1
   398	          };
   399	
   400	          pushSent = await sendPushNotification(pushNotification);
   401	          if (pushSent) {
   402	            results.pushSent++;
   403	          }
   404	        }
   405	
   406	        // Send email reminder if requested
   407	        if (
   408	          (reminder.notification_method === 'email' || reminder.notification_method === 'both') &&
   409	          user.email &&
   410	          user.notification_preferences?.email_reminders
   411	        ) {
   412	          const emailReminder = generateReminderEmail({
   413	            ...reminder,
   414	            user,
   415	            event: {
   416	              ...event,
   417	              venue
   418	            }
   419	          } as UserReminder);
   420	
   421	          emailSent = await sendEmailReminder(emailReminder);
   422	          if (emailSent) {
   423	            results.emailsSent++;
   424	          }
   425	        }
   426	
   427	        // Update reminder status
   428	        const success = (reminder.notification_method === 'push' && pushSent) ||
   429	                       (reminder.notification_method === 'email' && emailSent) ||
   430	                       (reminder.notification_method === 'both' && (pushSent || emailSent));
   431	
   432	        const newStatus = success ? 'sent' : 'failed';
   433	        
   434	        await supabase
   435	          .from('user_reminders')
   436	          .update({ 
   437	            status: newStatus,
   438	            sent_at: success ? new Date().toISOString() : null,
   439	            updated_at: new Date().toISOString()
   440	          })
   441	          .eq('id', reminder.id);
   442	
   443	        if (success) {
   444	          console.log(`✅ Sent reminder for ${event.title} to ${user.email}`);
   445	          
   446	          // Create notification record
   447	          await supabase
   448	            .from('user_notifications')
   449	            .insert({
   450	              user_id: user.id,
   451	              type: 'event_reminder',
   452	              title: 'Event Reminder Sent',
   453	              message: `Reminder sent for ${event.title}`,
   454	              data: { 
   455	                event_id: event.id,
   456	                reminder_id: reminder.id,
   457	                methods_used: {
   458	                  push: pushSent,
   459	                  email: emailSent
   460	                }
   461	              },
   462	              read: false,
   463	              sent_at: new Date().toISOString()
   464	            });
   465	        } else {
   466	          results.failed++;
   467	          results.errors.push(`Failed to send reminder for event ${event.title} to ${user.email}`);
   468	        }
   469	
   470	      } catch (error) {
   471	        console.error(`Error processing reminder ${reminder.id}:`, error);
   472	        results.failed++;
   473	        results.errors.push(`Error processing reminder ${reminder.id}: ${error.message}`);
   474	
   475	        // Mark as failed
   476	        try {
   477	          await supabase
   478	            .from('user_reminders')
   479	            .update({ 
   480	              status: 'failed',
   481	              updated_at: new Date().toISOString()
   482	            })
   483	            .eq('id', reminder.id);
   484	        } catch (updateError) {
   485	          console.error(`Failed to update reminder status for ${reminder.id}:`, updateError);
   486	        }
   487	      }
   488	    }
   489	
   490	    console.log(`Reminders processed: ${results.pushSent} push, ${results.emailsSent} emails, ${results.failed} failed`);
   491	
   492	    return new Response(
   493	      JSON.stringify({
   494	        success: true,
   495	        ...results
   496	      }),
   497	      { status: 200, headers: { 'Content-Type': 'application/json' } }
   498	    );
   499	
   500	  } catch (error) {
   501	    console.error('Error in reminders function:', error);
   502	    return new Response(
   503	      JSON.stringify({ 
   504	        error: 'Internal server error',
   505	        details: error.message 
   506	      }),
   507	      { status: 500, headers: { 'Content-Type': 'application/json' } }
   508	    );
   509	  }
   510	});