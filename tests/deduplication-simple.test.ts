import { describe, it, expect } from '@jest/globals'\nimport { Event } from '@/types'\nimport { createDeduplicationSystem } from '@/lib/scraping/deduplication'\n\n// Simple test data\nconst mockEvent1: Event = {\n  id: 'event-1',\n  title: 'Jazz Concert at Blue Note',\n  venue_name: 'Blue Note Jazz Club',\n  city_name: 'New York',\n  start_time: '2024-01-15T20:00:00Z',\n  category: 'music',\n  source: 'primary',\n  created_at: '2024-01-01T00:00:00Z',\n  updated_at: '2024-01-01T00:00:00Z'\n}\n\nconst mockEvent2: Event = {\n  id: 'event-2',\n  title: 'Jazz Concert at Blue Note',\n  venue_name: 'Blue Note Jazz Club',\n  city_name: 'New York',\n  start_time: '2024-01-15T20:00:00Z',\n  category: 'music',\n  source: 'eventbrite',\n  created_at: '2024-01-02T00:00:00Z',\n  updated_at: '2024-01-02T00:00:00Z'\n}\n\ndescribe('Deduplication System - Basic Test', () => {\n  it('should initialize and detect duplicates', async () => {\n    const system = createDeduplicationSystem()\n    await system.initialize()\n    \n    try {\n      const result = await system.checkForDuplicates(mockEvent1, [mockEvent2])\n      \n      expect(result).toBeDefined()\n      expect(result.isDuplicate).toBe(true)\n      expect(result.confidence).toBeGreaterThan(0.5)\n      expect(result.matches.length).toBeGreaterThan(0)\n      \n    } finally {\n      system.cleanup()\n    }\n  })\n  \n  it('should create merge decisions', () => {\n    const system = createDeduplicationSystem()\n    \n    const decision = system.createMergeDecision(\n      mockEvent1,\n      [mockEvent2],\n      'enhance_primary'\n    )\n    \n    expect(decision).toBeDefined()\n    expect(decision.primaryEventId).toBe(mockEvent1.id)\n    expect(decision.duplicateEventIds).toContain(mockEvent2.id)\n    expect(decision.confidence).toBeGreaterThan(0)\n    \n    system.cleanup()\n  })\n})\n"